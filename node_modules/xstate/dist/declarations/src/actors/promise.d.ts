import { AnyActorSystem } from "../system.js";
import { ActorLogic, ActorRefFrom, EventObject, NonReducibleUnknown, Snapshot } from "../types.js";
export type PromiseSnapshot<TOutput, TInput> = Snapshot<TOutput> & {
    input: TInput | undefined;
};
export type PromiseActorLogic<TOutput, TInput = unknown, TEmitted extends EventObject = EventObject> = ActorLogic<PromiseSnapshot<TOutput, TInput>, {
    type: string;
    [k: string]: unknown;
}, TInput, // input
AnyActorSystem, TEmitted>;
export type PromiseActorRef<TOutput> = ActorRefFrom<PromiseActorLogic<TOutput, unknown>>;
export declare function fromPromise<TOutput, TInput = NonReducibleUnknown, TEmitted extends EventObject = EventObject>(promiseCreator: ({ input, system, self, signal, emit }: {
    /**
     * Data that was provided to the promise actor
     */
    input: TInput;
    /**
     * The actor system to which the promise actor belongs
     */
    system: AnyActorSystem;
    /**
     * The parent actor of the promise actor
     */
    self: PromiseActorRef<TOutput>;
    signal: AbortSignal;
    emit: (emitted: TEmitted) => void;
}) => PromiseLike<TOutput>): PromiseActorLogic<TOutput, TInput, TEmitted>;
