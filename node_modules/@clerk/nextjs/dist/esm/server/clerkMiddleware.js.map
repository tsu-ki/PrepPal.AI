{"version":3,"sources":["../../../src/server/clerkMiddleware.ts"],"sourcesContent":["import type {\n  AuthenticateRequestOptions,\n  AuthObject,\n  ClerkRequest,\n  RedirectFun,\n  RequestState,\n} from '@clerk/backend/internal';\nimport { AuthStatus, constants, createClerkRequest, createRedirect } from '@clerk/backend/internal';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { NextMiddleware } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport { isRedirect, serverRedirectWithAuth, setHeader } from '../utils';\nimport { withLogger } from '../utils/debugLogger';\nimport { clerkClient } from './clerkClient';\nimport { PUBLISHABLE_KEY, SECRET_KEY, SIGN_IN_URL, SIGN_UP_URL } from './constants';\nimport { errorThrower } from './errorThrower';\nimport type { AuthProtect } from './protect';\nimport { createProtect } from './protect';\nimport type { NextMiddlewareEvtParam, NextMiddlewareRequestParam, NextMiddlewareReturn } from './types';\nimport {\n  assertKey,\n  decorateRequest,\n  handleMultiDomainAndProxy,\n  redirectAdapter,\n  setRequestHeadersOnNextResponse,\n} from './utils';\n\nconst CONTROL_FLOW_ERROR = {\n  FORCE_NOT_FOUND: 'CLERK_PROTECT_REWRITE',\n  REDIRECT_TO_URL: 'CLERK_PROTECT_REDIRECT_TO_URL',\n  REDIRECT_TO_SIGN_IN: 'CLERK_PROTECT_REDIRECT_TO_SIGN_IN',\n};\n\nexport type ClerkMiddlewareAuthObject = AuthObject & {\n  protect: AuthProtect;\n  redirectToSignIn: RedirectFun<Response>;\n};\n\nexport type ClerkMiddlewareAuth = () => ClerkMiddlewareAuthObject;\n\ntype ClerkMiddlewareHandler = (\n  auth: ClerkMiddlewareAuth,\n  request: NextMiddlewareRequestParam,\n  event: NextMiddlewareEvtParam,\n) => NextMiddlewareReturn;\n\nexport type ClerkMiddlewareOptions = AuthenticateRequestOptions & { debug?: boolean };\n\n/**\n * Middleware for Next.js that handles authentication and authorization with Clerk.\n * For more details, please refer to the docs: https://clerk.com/docs/references/nextjs/clerk-middleware\n */\ninterface ClerkMiddleware {\n  /**\n   * @example\n   * export default clerkMiddleware((auth, request, event) => { ... }, options);\n   */\n  (handler: ClerkMiddlewareHandler, options?: ClerkMiddlewareOptions): NextMiddleware;\n  /**\n   * @example\n   * export default clerkMiddleware(options);\n   */\n  (options?: ClerkMiddlewareOptions): NextMiddleware;\n  /**\n   * @example\n   * export default clerkMiddleware;\n   */\n  (request: NextMiddlewareRequestParam, event: NextMiddlewareEvtParam): NextMiddlewareReturn;\n}\n\nexport const clerkMiddleware: ClerkMiddleware = withLogger('clerkMiddleware', logger => (...args: unknown[]): any => {\n  const [request, event] = parseRequestAndEvent(args);\n  const [handler, params] = parseHandlerAndOptions(args);\n  if (params.debug) {\n    logger.enable();\n  }\n\n  const publishableKey = assertKey(params.publishableKey || PUBLISHABLE_KEY, () =>\n    errorThrower.throwMissingPublishableKeyError(),\n  );\n  const secretKey = assertKey(params.secretKey || SECRET_KEY, () => errorThrower.throwMissingSecretKeyError());\n  const signInUrl = params.signInUrl || SIGN_IN_URL;\n  const signUpUrl = params.signUpUrl || SIGN_UP_URL;\n\n  const options = {\n    ...params,\n    publishableKey,\n    secretKey,\n    signInUrl,\n    signUpUrl,\n  };\n\n  clerkClient.telemetry.record(\n    eventMethodCalled('clerkMiddleware', {\n      handler: Boolean(handler),\n      satellite: Boolean(options.isSatellite),\n      proxy: Boolean(options.proxyUrl),\n    }),\n  );\n\n  const nextMiddleware: NextMiddleware = async (request, event) => {\n    const clerkRequest = createClerkRequest(request);\n    logger.debug('options', options);\n    logger.debug('url', () => clerkRequest.toJSON());\n\n    const requestState = await clerkClient.authenticateRequest(\n      clerkRequest,\n      createAuthenticateRequestOptions(clerkRequest, options),\n    );\n\n    logger.debug('requestState', () => ({\n      status: requestState.status,\n      headers: JSON.stringify(Object.fromEntries(requestState.headers)),\n      reason: requestState.reason,\n    }));\n\n    const locationHeader = requestState.headers.get(constants.Headers.Location);\n    if (locationHeader) {\n      return new Response(null, { status: 307, headers: requestState.headers });\n    } else if (requestState.status === AuthStatus.Handshake) {\n      throw new Error('Clerk: handshake status without redirect');\n    }\n\n    const authObject = requestState.toAuth();\n    logger.debug('auth', () => ({ auth: authObject, debug: authObject.debug() }));\n\n    const redirectToSignIn = createMiddlewareRedirectToSignIn(clerkRequest);\n    const protect = createMiddlewareProtect(clerkRequest, authObject, redirectToSignIn);\n    const authObjWithMethods: ClerkMiddlewareAuthObject = Object.assign(authObject, { protect, redirectToSignIn });\n\n    let handlerResult: Response = NextResponse.next();\n    try {\n      handlerResult = (await handler?.(() => authObjWithMethods, request, event)) || handlerResult;\n    } catch (e: any) {\n      handlerResult = handleControlFlowErrors(e, clerkRequest, requestState);\n    }\n\n    // TODO @nikos: we need to make this more generic\n    // and move the logic in clerk/backend\n    if (requestState.headers) {\n      requestState.headers.forEach((value, key) => {\n        handlerResult.headers.append(key, value);\n      });\n    }\n\n    if (isRedirect(handlerResult)) {\n      logger.debug('handlerResult is redirect');\n      return serverRedirectWithAuth(clerkRequest, handlerResult, options);\n    }\n\n    if (options.debug) {\n      setRequestHeadersOnNextResponse(handlerResult, clerkRequest, { [constants.Headers.EnableDebug]: 'true' });\n    }\n\n    decorateRequest(clerkRequest, handlerResult, requestState, options.secretKey);\n\n    return handlerResult;\n  };\n\n  // If we have a request and event, we're being called as a middleware directly\n  // eg, export default clerkMiddleware;\n  if (request && event) {\n    return nextMiddleware(request, event);\n  }\n\n  // Otherwise, return a middleware that can be called with a request and event\n  // eg, export default clerkMiddleware(auth => { ... });\n  return nextMiddleware;\n});\n\nconst parseRequestAndEvent = (args: unknown[]) => {\n  return [args[0] instanceof Request ? args[0] : undefined, args[0] instanceof Request ? args[1] : undefined] as [\n    NextMiddlewareRequestParam | undefined,\n    NextMiddlewareEvtParam | undefined,\n  ];\n};\n\nconst parseHandlerAndOptions = (args: unknown[]) => {\n  return [\n    typeof args[0] === 'function' ? args[0] : undefined,\n    (args.length === 2 ? args[1] : typeof args[0] === 'function' ? {} : args[0]) || {},\n  ] as [ClerkMiddlewareHandler | undefined, ClerkMiddlewareOptions];\n};\n\nexport const createAuthenticateRequestOptions = (clerkRequest: ClerkRequest, options: ClerkMiddlewareOptions) => {\n  return {\n    ...options,\n    ...handleMultiDomainAndProxy(clerkRequest, options),\n  };\n};\n\nconst createMiddlewareRedirectToSignIn = (\n  clerkRequest: ClerkRequest,\n): ClerkMiddlewareAuthObject['redirectToSignIn'] => {\n  return (opts = {}) => {\n    const err = new Error(CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN) as any;\n    err.returnBackUrl = opts.returnBackUrl === null ? '' : opts.returnBackUrl || clerkRequest.clerkUrl.toString();\n    throw err;\n  };\n};\n\nconst createMiddlewareProtect = (\n  clerkRequest: ClerkRequest,\n  authObject: AuthObject,\n  redirectToSignIn: RedirectFun<Response>,\n): ClerkMiddlewareAuthObject['protect'] => {\n  return ((params, options) => {\n    const notFound = () => {\n      throw new Error(CONTROL_FLOW_ERROR.FORCE_NOT_FOUND) as any;\n    };\n\n    const redirect = (url: string) => {\n      const err = new Error(CONTROL_FLOW_ERROR.REDIRECT_TO_URL) as any;\n      err.redirectUrl = url;\n      throw err;\n    };\n\n    // @ts-expect-error TS is not happy even though the types are correct\n    return createProtect({ request: clerkRequest, redirect, notFound, authObject, redirectToSignIn })(params, options);\n  }) as AuthProtect;\n};\n\n// Handle errors thrown by protect() and redirectToSignIn() calls,\n// as we want to align the APIs between middleware, pages and route handlers\n// Normally, middleware requires to explicitly return a response, but we want to\n// avoid discrepancies between the APIs as it's easy to miss the `return` statement\n// especially when copy-pasting code from one place to another.\n// This function handles the known errors thrown by the APIs described above,\n// and returns the appropriate response.\nconst handleControlFlowErrors = (e: any, clerkRequest: ClerkRequest, requestState: RequestState): Response => {\n  switch (e.message) {\n    case CONTROL_FLOW_ERROR.FORCE_NOT_FOUND:\n      // Rewrite to a bogus URL to force not found error\n      return setHeader(\n        NextResponse.rewrite(`${clerkRequest.clerkUrl.origin}/clerk_${Date.now()}`),\n        constants.Headers.AuthReason,\n        'protect-rewrite',\n      );\n    case CONTROL_FLOW_ERROR.REDIRECT_TO_URL:\n      return redirectAdapter(e.redirectUrl);\n    case CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN:\n      return createRedirect({\n        redirectAdapter,\n        baseUrl: clerkRequest.clerkUrl,\n        signInUrl: requestState.signInUrl,\n        signUpUrl: requestState.signUpUrl,\n        publishableKey: requestState.publishableKey,\n      }).redirectToSignIn({ returnBackUrl: e.returnBackUrl });\n    default:\n      throw e;\n  }\n};\n"],"mappings":"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","names":["request","event"]}