import * as _radix_ui_react_form from '@radix-ui/react-form';
import { FormControlProps, FormProps as FormProps$1, FormFieldProps as FormFieldProps$1, FormSubmitProps as FormSubmitProps$1, FormMessageProps } from '@radix-ui/react-form';
import { ClerkAPIError, Autocomplete, PasswordSettingsData } from '@clerk/types';
import * as React from 'react';
import { SetRequired } from 'type-fest';
import { BaseActorRef } from 'xstate';

declare abstract class ClerkElementsErrorBase extends Error {
    readonly code: string;
    clerkError: boolean;
    clerkElementsError: boolean;
    rawMessage: string;
    constructor(code: string, message: string);
    toString(): string;
}
declare class ClerkElementsError extends ClerkElementsErrorBase {
    static fromAPIError(error: ClerkAPIError): ClerkElementsError;
    constructor(code: string, message: string);
}

type ComplexityErrors = {
    [key in keyof Partial<Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>>]?: boolean;
};
declare const errorMessages: Record<keyof Omit<ComplexityErrors, 'allowed_special_characters'>, [string, string] | string>;
type ErrorMessagesKey = Autocomplete<keyof typeof errorMessages>;

type OTPInputProps = Exclude<FormControlProps, 'type' | 'autoComplete' | 'minLength' | 'maxLength' | 'inputMode' | 'pattern' | 'spellCheck'> & {
    render?: (props: {
        value: string;
        status: OTPInputSegmentStatus;
        index: number;
    }) => React.ReactNode;
    length?: number;
    autoSubmit?: boolean;
    passwordManagerOffset?: number;
};
/**
 * The status of a single segment element in the OTP input
 */
type OTPInputSegmentStatus = 'none' | 'cursor' | 'selected' | 'hovered';

/** Extracted relevant fields from @clerk/types  */
type ClerkFieldId = 'code' | 'confirmPassword' | 'currentPassword' | 'emailAddress' | 'firstName' | 'identifier' | 'lastName' | 'name' | 'newPassword' | 'password' | 'phoneNumber' | 'username';
declare const FIELD_STATES: {
    readonly success: "success";
    readonly error: "error";
    readonly idle: "idle";
    readonly warning: "warning";
    readonly info: "info";
};
type FieldStates = (typeof FIELD_STATES)[keyof typeof FIELD_STATES];

type FormProps = SetRequired<FormProps$1, 'children'> & {
    flowActor?: BaseActorRef<{
        type: 'SUBMIT';
    }>;
};
type FormFieldProps = Omit<FormFieldProps$1, 'children'> & {
    name: Autocomplete<ClerkFieldId>;
    alwaysShow?: boolean;
    children: React.ReactNode | ((state: FieldStates) => React.ReactNode);
};
/**
 * Field is used to associate its child elements with a specific input. It automatically handles unique ID generation and associating the contained label and input elements.
 *
 * @param name - Give your `<Field>` a unique name inside the current form. If you choose one of the following names Clerk Elements will automatically set the correct type on the `<input />` element: `emailAddress`, `password`, `phoneNumber`, and `code`.
 * @param alwaysShow - Optional. When `true`, the field will always be rendered, regardless of its state. By default, a field is hidden if it's optional or if it's a filled-out required field.
 * @param {Function} children - A function that receives `state` as an argument. `state` is a union of `"success" | "error" | "idle" | "warning" | "info"`.
 *
 * @example
 * <Clerk.Field name="emailAddress">
 *   <Clerk.Label>Email</Clerk.Label>
 *   <Clerk.Input />
 * </Clerk.Field>
 *
 * @example
 * <Clerk.Field name="emailAddress">
 *  {(fieldState) => (
 *    <Clerk.Label>Email</Clerk.Label>
 *    <Clerk.Input className={`text-${fieldState}`} />
 *  )}
 * </Clerk.Field>
 */
declare const Field: React.ForwardRefExoticComponent<Omit<FormFieldProps$1, "children"> & {
    name: Autocomplete<ClerkFieldId>;
    alwaysShow?: boolean | undefined;
    children: React.ReactNode | ((state: FieldStates) => React.ReactNode);
} & React.RefAttributes<HTMLDivElement>>;
type FieldStateRenderFn = {
    children: (state: {
        state: FieldStates;
        message: string | undefined;
        codes: ErrorMessagesKey[] | undefined;
    }) => React.ReactNode;
};
/**
 * Programmatically access the state of the wrapping `<Field>`. Useful for implementing animations when direct access to the state value is necessary.
 *
 * @param {Function} children - A function that receives `state`, `message`, and `codes` as an argument. `state` will is a union of `"success" | "error" | "idle" | "warning" | "info"`. `message` will be the corresponding message, e.g. error message. `codes` will be an array of keys that were used to generate the password validation messages. This prop is only available when the field is of type `password` and has `validatePassword` set to `true`.
 *
 * @example
 *
 * <Clerk.Field name="email">
 *  <Clerk.Label>Email</Clerk.Label>
 *  <Clerk.FieldState>
 *    {({ state }) => (
 *      <Clerk.Input className={`text-${state}`} />
 *    )}
 *  </Clerk.FieldState>
 * </Clerk.Field>
 *
 * @example
 * <Clerk.Field name="password">
 *  <Clerk.Label>Password</Clerk.Label>
 *  <Clerk.Input validatePassword />
 *  <Clerk.FieldState>
 *    {({ state, message, codes }) => (
 *      <pre>Field state: {state}</pre>
 *      <pre>Field msg: {message}</pre>
 *      <pre>Pwd keys: {codes.join(', ')}</pre>
 *    )}
 *  </Clerk.FieldState>
 * </Clerk.Field>
 */
declare function FieldState({ children }: FieldStateRenderFn): React.ReactNode;
declare namespace FieldState {
    var displayName: string;
}
type PasswordInputProps = Exclude<FormControlProps, 'type'> & {
    validatePassword?: boolean;
};
type FormInputProps = FormControlProps | ({
    type: 'otp';
    render: OTPInputProps['render'];
} & Omit<OTPInputProps, 'asChild'>) | ({
    type: 'otp';
    render?: undefined;
} & OTPInputProps) | ({
    type: 'password' | 'text';
} & PasswordInputProps);
/**
 * Handles rendering of `<input>` elements within Clerk's flows. Supports special `type` prop values to render input types that are unique to authentication and user management flows. Additional props will be passed through to the `<input>` element.
 *
 * @param {boolean} [asChild] - If true, `<Input />` will render as its child element, passing along any necessary props.
 * @param {string} [name] - Used to target a specific field by name when rendering outside of a `<Field>` component.
 *
 * @example
 * <Clerk.Field name="identifier">
 *   <Clerk.Label>Email</Clerk.Label>
 *   <Clerk.Input type="email" autoComplete="email" className="emailInput" />
 * </Clerk.Field>
 *
 * @param {Number} [length] - The length of the OTP input. Defaults to 6.
 * @param {Number} [passwordManagerOffset] - Password managers place their icon inside an `<input />`. This default behaviour is not desirable when you use the render prop to display N distinct element. With this prop you can increase the width of the `<input />` so that the icon is rendered outside the OTP inputs.
 * @param {string} [type] - Type of control to render. Supports a special `'otp'` type for one-time password inputs. If the wrapping `<Field>` component has `name='code'`, the type will default to `'otp'`. With the `'otp'` type, the input will have a pattern and length set to 6 by default and render a single `<input />` element.
 *
 * @example
 * <Clerk.Field name="code">
 *   <Clerk.Label>Email code</Clerk.Label>
 *   <Clerk.Input type="otp" />
 * </Clerk.Field>
 *
 * @param {Function} [render] - Optionally, you can use a render prop that controls how each individual character is rendered. If no `render` prop is provided, a single text `<input />` will be rendered.
 *
 * @example
 * <Clerk.Field name="code">
 *   <Clerk.Label>Email code</Clerk.Label>
 *   <Clerk.Input
 *     type="otp"
 *     render={({ value, status }) => <span data-status={status}>{value}</span>}
 *   />
 * </Clerk.Field>
 */
declare const Input: React.ForwardRefExoticComponent<FormInputProps & React.RefAttributes<HTMLInputElement>>;
/**
 * Renders a `<label>` element that is automatically associated with its sibling `<Input />` inside of a `<Field>`. Additional props will be passed through to the `<label>` element.
 *
 * @param {boolean} [asChild] - If true, `<Label />` will render as its child element, passing along any necessary props.
 *
 * @example
 * <Clerk.Field name="email">
 *   <Clerk.Label>Email</Clerk.Label>
 *   <Clerk.Input />
 * </Clerk.Field>
 */
declare const Label: React.ForwardRefExoticComponent<_radix_ui_react_form.FormLabelProps & React.RefAttributes<HTMLLabelElement>>;
type FormSubmitProps = SetRequired<FormSubmitProps$1, 'children'>;
type FormSubmitComponent = React.ForwardRefExoticComponent<FormSubmitProps & React.RefAttributes<HTMLButtonElement>>;
/**
 * A `<button type="submit">` element.
 *
 * @param {boolean} [asChild] - When `true`, the component will render its child and passes all props to it.
 */
declare const Submit: FormSubmitComponent;
type FormErrorRenderProps = Pick<ClerkElementsError, 'code' | 'message'>;
type FormErrorPropsAsChild = {
    asChild?: true | never;
    children?: React.ReactElement | ((error: FormErrorRenderProps) => React.ReactNode);
    code?: string;
};
type FormErrorPropsStd = {
    asChild?: false;
    children: React.ReactNode;
    code: string;
};
type FormErrorProps<T> = Omit<T, 'asChild' | 'children'> & (FormErrorPropsStd | FormErrorPropsAsChild);
type FormGlobalErrorProps = FormErrorProps<React.ComponentPropsWithoutRef<'div'>>;
type FormFieldErrorProps = FormErrorProps<FormMessageProps & {
    name?: string;
}>;
/**
 * Used to render errors that are returned from Clerk's API, but that are not associated with a specific form field. By default, will render the error's message wrapped in a `<div>`. Optionally, the `children` prop accepts a function to completely customize rendering. Must be placed **inside** components like `<SignIn>`/`<SignUp>` to have access to the underlying form state.
 *
 * @param {string} [code] - Forces the message with the matching code to be shown. This is useful when using server-side validation.
 * @param {Function} [children] - A function that receives `message` and `code` as arguments.
 * @param {boolean} [asChild] - If `true`, `<GlobalError>` will render as its child element, passing along any necessary props.
 *
 * @example
 * <SignIn.Root>
 *   <Clerk.GlobalError />
 * </SignIn.Root>
 *
 * @example
 * <SignIn.Root>
 *   <Clerk.GlobalError code="user_locked">Your custom error message.</Clerk.GlobalError>
 * </SignIn.Root>
 *
 * @example
 * <SignIn.Root>
 *   <Clerk.GlobalError>
 *     {({ message, code }) => (
 *       <span data-error-code={code}>{message}</span>
 *     )}
 *   </Clerk.GlobalError>
 * </SignIn.Root>
 */
declare const GlobalError: React.ForwardRefExoticComponent<FormGlobalErrorProps & React.RefAttributes<HTMLDivElement>>;
/**
 * FieldError renders error messages associated with a specific field. By default, the error's message will be rendered in an unstyled `<span>`. Optionally, the `children` prop accepts a function to completely customize rendering.
 *
 * @param {string} [name] - Used to target a specific field by name when rendering outside of a `<Field>` component.
 * @param {Function} [children] - A function that receives `message` and `code` as arguments.
 *
 * @example
 * <Clerk.Field name="email">
 *   <Clerk.FieldError />
 * </Clerk.Field>
 *
 * @example
 * <Clerk.Field name="email">
 *   <Clerk.FieldError>
 *     {({ message, code }) => (
 *       <span data-error-code={code}>{message}</span>
 *     )}
 *   </Clerk.FieldError>
 * </Clerk.Field>
 */
declare const FieldError: React.ForwardRefExoticComponent<FormFieldErrorProps & React.RefAttributes<HTMLSpanElement>>;

export { Field as F, GlobalError as G, Input as I, Label as L, type OTPInputSegmentStatus as O, Submit as S, FieldError as a, FieldState as b, type FormFieldErrorProps as c, type FormErrorProps as d, type FormErrorRenderProps as e, type FormFieldProps as f, type FormGlobalErrorProps as g, type FormInputProps as h, type FormProps as i, type FormSubmitProps as j };
