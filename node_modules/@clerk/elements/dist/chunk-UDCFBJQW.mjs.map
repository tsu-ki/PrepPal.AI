{"version":3,"sources":["../src/react/router/next.ts","../src/react/router/react.tsx","../src/react/router/router.ts","../src/react/router/virtual.ts","../src/react/utils/path-inference/next.tsx","../src/react/utils/path-inference/utils.ts"],"sourcesContent":["import { usePathname, useRouter, useSearchParams } from 'next/navigation';\n\nimport { NEXT_WINDOW_HISTORY_SUPPORT_VERSION } from '~/internals/constants';\n\nimport type { ClerkHostRouter } from './router';\n\n/**\n * Clerk router integration with Next.js's router.\n */\nexport const useNextRouter = (): ClerkHostRouter => {\n  const router = useRouter();\n  const pathname = usePathname();\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- The order doesn't differ between renders as we're checking the execution environment.\n  const searchParams = typeof window === 'undefined' ? new URLSearchParams() : useSearchParams();\n\n  // The window.history APIs seem to prevent Next.js from triggering a full page re-render, allowing us to\n  // preserve internal state between steps.\n  const canUseWindowHistoryAPIs =\n    typeof window !== 'undefined' && window.next && window.next.version >= NEXT_WINDOW_HISTORY_SUPPORT_VERSION;\n\n  return {\n    mode: 'path',\n    name: 'NextRouter',\n    push: (path: string) => router.push(path),\n    replace: (path: string) =>\n      canUseWindowHistoryAPIs ? window.history.replaceState(null, '', path) : router.replace(path),\n    shallowPush(path: string) {\n      canUseWindowHistoryAPIs ? window.history.pushState(null, '', path) : router.push(path, {});\n    },\n    pathname: () => pathname,\n    searchParams: () => searchParams,\n  };\n};\n","import { createContext, useContext } from 'react';\n\nimport type { ClerkHostRouter, ClerkRouter } from './router';\nimport { createClerkRouter } from './router';\n\nexport const ClerkRouterContext = createContext<ClerkRouter | null>(null);\n\nexport function useClerkRouter() {\n  const ctx = useContext(ClerkRouterContext);\n\n  if (!ctx) {\n    throw new Error('clerk: Unable to locate ClerkRouter, make sure this is rendered within `<Router>`.');\n  }\n\n  return ctx;\n}\n\nexport function Router({\n  basePath,\n  children,\n  router,\n}: {\n  children: React.ReactNode;\n  basePath?: string;\n  router: ClerkHostRouter;\n}) {\n  const clerkRouter = createClerkRouter(router, basePath);\n\n  return <ClerkRouterContext.Provider value={clerkRouter}>{children}</ClerkRouterContext.Provider>;\n}\n\ntype RouteProps = { path?: string; index?: boolean };\n\nexport function Route({ path, children, index }: RouteProps & { children: React.ReactNode }) {\n  // check for parent router, if exists, create child router, otherwise create one\n  const parentRouter = useClerkRouter();\n\n  if (!path && !index) {\n    return children;\n  }\n\n  if (!parentRouter?.match(path, index)) {\n    return null;\n  }\n\n  return children;\n}\n","import { withLeadingSlash, withoutTrailingSlash } from '@clerk/shared/url';\n\nimport type { ROUTING } from '~/internals/constants';\n\nexport const PRESERVED_QUERYSTRING_PARAMS = ['after_sign_in_url', 'after_sign_up_url', 'redirect_url'];\n\n/**\n * This type represents a generic router interface that Clerk relies on to interact with the host router.\n */\nexport type ClerkHostRouter = {\n  readonly mode: ROUTING;\n  readonly name: string;\n  pathname: () => string;\n  push: (path: string) => void;\n  replace: (path: string) => void;\n  searchParams: () => URLSearchParams;\n  shallowPush: (path: string) => void;\n};\n\n/**\n * Internal Clerk router, used by Clerk components to interact with the host's router.\n */\nexport type ClerkRouter = {\n  /**\n   * The basePath the router is currently mounted on.\n   */\n  basePath: string;\n  /**\n   * Creates a child router instance scoped to the provided base path.\n   */\n  child: (childBasePath: string) => ClerkRouter;\n  /**\n   * Matches the provided path against the router's current path. If index is provided, matches against the root route of the router.\n   */\n  match: (path?: string, index?: boolean) => boolean;\n\n  /**\n   * Mode of the router instance, path-based or virtual\n   */\n  readonly mode: ROUTING;\n\n  /**\n   * Name of the router instance\n   */\n  readonly name: string;\n\n  /**\n   * Navigates to the provided path via a history push\n   */\n  push: ClerkHostRouter['push'];\n  /**\n   * Navigates to the provided path via a history replace\n   */\n  replace: ClerkHostRouter['replace'];\n  /**\n   * If supported by the host router, navigates to the provided path without triggering a full navigation\n   */\n  shallowPush: ClerkHostRouter['shallowPush'];\n  /**\n   * Returns the current pathname (including the base path)\n   */\n  pathname: ClerkHostRouter['pathname'];\n  /**\n   * Returns the current search params\n   */\n  searchParams: ClerkHostRouter['searchParams'];\n};\n\n/**\n * Ensures the provided path has a leading slash and no trailing slash\n */\nfunction normalizePath(path: string) {\n  return withoutTrailingSlash(withLeadingSlash(path));\n}\n\n/**\n * Factory function to create an instance of ClerkRouter with the provided host router.\n *\n * @param router host router instance to be used by the router\n * @param basePath base path of the router, navigation and matching will be scoped to this path\n * @returns A ClerkRouter instance\n */\nexport function createClerkRouter(router: ClerkHostRouter, basePath: string = '/'): ClerkRouter {\n  const normalizedBasePath = normalizePath(basePath);\n\n  /**\n   * Certain query parameters need to be preserved when navigating internally. These query parameters are ultimately used by Clerk to dictate behavior, so we keep them around.\n   */\n  function makeDestinationUrlWithPreservedQueryParameters(path: string) {\n    const destinationUrl = new URL(path, window.location.origin);\n    const currentSearchParams = router.searchParams();\n\n    PRESERVED_QUERYSTRING_PARAMS.forEach(key => {\n      const maybeValue = currentSearchParams.get(key);\n      if (maybeValue) {\n        destinationUrl.searchParams.set(key, maybeValue);\n      }\n    });\n\n    return `${destinationUrl.pathname}${destinationUrl.search}`;\n  }\n\n  function match(path?: string, index?: boolean) {\n    const pathToMatch = path ?? (index && '/');\n\n    if (!pathToMatch) {\n      throw new Error('[clerk] router.match() requires either a path to match, or the index flag must be set to true.');\n    }\n\n    const normalizedPath = normalizePath(pathToMatch);\n\n    return normalizePath(`${normalizedBasePath}${normalizedPath}`) === normalizePath(router.pathname());\n  }\n\n  function child(childBasePath: string) {\n    return createClerkRouter(router, `${normalizedBasePath}${normalizePath(childBasePath)}`);\n  }\n\n  function push(path: string) {\n    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);\n    return router.push(destinationUrl);\n  }\n\n  function replace(path: string) {\n    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);\n    return router.replace(destinationUrl);\n  }\n\n  function shallowPush(path: string) {\n    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);\n    return router.shallowPush(destinationUrl);\n  }\n\n  return {\n    child,\n    match,\n    mode: router.mode,\n    name: router.name,\n    push,\n    replace,\n    shallowPush,\n    pathname: router.pathname,\n    searchParams: router.searchParams,\n    basePath: normalizedBasePath,\n  };\n}\n","'use client';\n\nimport { useSyncExternalStore } from 'react';\n\nimport type { ClerkHostRouter } from './router';\n\nconst DUMMY_ORIGIN = 'https://clerk.dummy';\n\n// TODO: introduce history stack?\nclass VirtualRouter implements ClerkHostRouter {\n  readonly name = 'VirtualRouter';\n  readonly mode = 'virtual';\n\n  #url: URL;\n  #listeners: Set<(url: URL) => void> = new Set();\n\n  constructor(path?: string) {\n    const origin = typeof window === 'undefined' ? DUMMY_ORIGIN : window.location.origin;\n\n    this.#url = new URL(path ?? '/', origin);\n  }\n\n  push(path: string) {\n    const newUrl = new URL(this.#url.toString());\n    newUrl.pathname = path;\n\n    this.#url = newUrl;\n    this.emit();\n  }\n\n  replace(path: string) {\n    this.push(path);\n  }\n\n  shallowPush(path: string) {\n    this.push(path);\n  }\n\n  pathname() {\n    return this.#url.pathname;\n  }\n\n  searchParams() {\n    return this.#url.searchParams;\n  }\n\n  subscribe(listener: () => void) {\n    this.#listeners.add(listener);\n\n    return () => this.#listeners.delete(listener);\n  }\n\n  emit() {\n    this.#listeners.forEach(listener => listener(this.#url));\n  }\n\n  getSnapshot() {\n    return this.#url;\n  }\n}\n\nconst virtualRouter = new VirtualRouter('/');\n\nexport const useVirtualRouter = (): ClerkHostRouter => {\n  const url = useSyncExternalStore(\n    virtualRouter.subscribe.bind(virtualRouter),\n    virtualRouter.getSnapshot.bind(virtualRouter),\n  );\n\n  return {\n    mode: virtualRouter.mode,\n    name: virtualRouter.name,\n    pathname: () => url.pathname,\n    push: virtualRouter.push.bind(virtualRouter),\n    replace: virtualRouter.replace.bind(virtualRouter),\n    searchParams: () => url.searchParams,\n    shallowPush: virtualRouter.shallowPush.bind(virtualRouter),\n  };\n};\n","import { useRouter } from 'next/compat/router';\nimport { useParams, usePathname } from 'next/navigation';\nimport React from 'react';\n\nimport { removeOptionalCatchAllSegment } from './utils';\n\n// Adapted from packages/nextjs/src/client-boundary/hooks/usePathnameWithoutCatchAll.tsx\n\n/**\n * This hook grabs the current pathname (both in pages and app router) and removes any (optional) catch all segments.\n * @example\n * 1. /user/[id]/profile/[[...rest]]/page.tsx\n * 2. /user/123/profile/security\n * 3. /user/123/profile\n * @returns The pathname without any catch all segments\n */\nexport const usePathnameWithoutCatchAll = () => {\n  const pathRef = React.useRef<string>();\n\n  /**\n   * The compat version of useRouter returns null instead of throwing an error when used inside App router.\n   * Use it to detect if the component is used inside pages or app router\n   */\n  const pagesRouter = useRouter();\n\n  if (pagesRouter) {\n    if (pathRef.current) {\n      return pathRef.current;\n    } else {\n      // The optional catch all route is included in the pathname in pages router. It starts with [[... and we can just remove it\n      pathRef.current = removeOptionalCatchAllSegment(pagesRouter.pathname);\n      return pathRef.current;\n    }\n  }\n\n  /**\n   * Get the pathname that includes any named or catch all params.\n   * @example\n   * /user/[id]/profile/[[...rest]]/page.tsx\n   *\n   * This filesystem route could give us the following pathname:\n   * /user/123/profile/security\n   * if the user navigates to the security section of the user profile\n   */\n  const pathname = usePathname() || '';\n  const pathParts = pathname.split('/').filter(Boolean);\n  /**\n   * For /user/[id]/profile/[[...rest]]/page.tsx useParams will return { id: '123', rest: ['security'] }.\n   * So catch all params are always arrays\n   */\n  const catchAllParams = Object.values(useParams() || {})\n    .filter(v => Array.isArray(v))\n    .flat(Infinity);\n  if (pathRef.current) {\n    return pathRef.current;\n  } else {\n    // /user/123/profile/security should be transformed to /user/123/profile\n    pathRef.current = `/${pathParts.slice(0, pathParts.length - catchAllParams.length).join('/')}`;\n    return pathRef.current;\n  }\n};\n","export function removeOptionalCatchAllSegment(pathname: string) {\n  return pathname.replace(/\\/\\[\\[\\.\\.\\..*/, '');\n}\n"],"mappings":"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","names":["useRouter","usePathname","useRouter","usePathname"]}