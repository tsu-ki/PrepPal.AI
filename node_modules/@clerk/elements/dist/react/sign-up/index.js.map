{"version":3,"sources":["../../../src/react/sign-up/index.ts","../../../src/react/sign-up/root.tsx","../../../src/internals/constants/index.ts","../../../src/internals/machines/form/form.context.ts","../../../src/internals/machines/form/form.machine.ts","../../../src/internals/errors/index.ts","../../../src/internals/utils/inspector/index.ts","../../../src/internals/machines/sign-up/continue.machine.ts","../../../src/internals/machines/shared/shared.actions.ts","../../../src/internals/machines/sign-up/utils/fields-to-params.ts","../../../src/internals/machines/utils/assert.ts","../../../src/internals/machines/sign-up/router.machine.ts","../../../src/internals/machines/third-party/third-party.actors.ts","../../../src/internals/machines/utils/clerkjs.ts","../../../src/internals/machines/third-party/third-party.machine.ts","../../../src/internals/machines/utils/next.ts","../../../src/internals/machines/sign-up/start.machine.ts","../../../src/internals/machines/sign-up/verification.machine.ts","../../../src/internals/machines/sign-up/verification.types.ts","../../../src/react/router/next.ts","../../../src/react/router/react.tsx","../../../src/react/router/router.ts","../../../src/react/router/virtual.ts","../../../src/react/utils/create-context-from-actor-ref.ts","../../../src/react/sign-up/context/router.context.ts","../../../src/react/common/form/index.tsx","../../../../../node_modules/@radix-ui/primitive/dist/packages/core/primitive/src/index.ts","../../../../../node_modules/@radix-ui/primitive/dist/packages/core/primitive/src/primitive.tsx","../../../src/react/hooks/use-password.hook.ts","../../../src/react/utils/generate-password-error-text.ts","../../../src/react/sign-in/context/router.context.ts","../../../src/react/utils/is-react-fragment.ts","../../../src/react/common/form/otp.tsx","../../../src/react/common/form/types.ts","../../../src/react/utils/path-inference/next.tsx","../../../src/react/utils/path-inference/utils.ts","../../../src/react/sign-up/step.tsx","../../../src/react/hooks/use-active-tags.hook.ts","../../../src/react/sign-up/continue.tsx","../../../src/react/sign-up/start.tsx","../../../src/react/sign-up/verifications.tsx","../../../src/react/sign-up/action/action.tsx","../../../src/react/common/index.ts","../../../src/react/sign-up/action/navigate.tsx","../../../src/react/sign-up/action/resend.tsx","../../../src/react/sign-up/captcha.tsx"],"sourcesContent":["// Mark as a client-only package. This will error if you try to import it in a React Server Component.\nimport 'client-only';\n\nexport { SignUpRoot as SignUp, SignUpRoot as Root } from './root';\nexport { SignUpStep as Step } from './step';\nexport { SignUpAction as Action } from './action';\nexport { SignUpStrategy as Strategy } from './verifications';\nexport { SignUpCaptcha as Captcha } from './captcha';\n","import { ClerkLoaded, ClerkLoading, useClerk } from '@clerk/clerk-react';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\nimport { useSelector } from '@xstate/react';\nimport { useEffect } from 'react';\nimport { createActor } from 'xstate';\n\nimport { ROUTING, SIGN_IN_DEFAULT_BASE_PATH, SIGN_UP_DEFAULT_BASE_PATH } from '~/internals/constants';\nimport { FormStoreProvider, useFormStore } from '~/internals/machines/form/form.context';\nimport type { SignUpRouterInitEvent } from '~/internals/machines/sign-up';\nimport { SignUpRouterMachine } from '~/internals/machines/sign-up';\nimport { inspect } from '~/internals/utils/inspector';\nimport { Router, useClerkRouter, useNextRouter, useVirtualRouter } from '~/react/router';\nimport { SignUpRouterCtx } from '~/react/sign-up/context';\n\nimport { Form } from '../common/form';\nimport { usePathnameWithoutCatchAll } from '../utils/path-inference/next';\n\ntype SignUpFlowProviderProps = {\n  children: React.ReactNode;\n  exampleMode?: boolean;\n};\n\nconst actor = createActor(SignUpRouterMachine, { inspect });\nactor.start();\n\nfunction SignUpFlowProvider({ children, exampleMode }: SignUpFlowProviderProps) {\n  const clerk = useClerk();\n  const router = useClerkRouter();\n  const formRef = useFormStore();\n  const isReady = useSelector(actor, state => state.value !== 'Idle');\n\n  useEffect(() => {\n    if (!clerk || !router) {\n      return;\n    }\n\n    // @ts-expect-error -- This is actually an IsomorphicClerk instance\n    clerk.addOnLoaded(() => {\n      const evt: SignUpRouterInitEvent = {\n        type: 'INIT',\n        clerk,\n        exampleMode,\n        formRef,\n        router,\n        signInPath: SIGN_IN_DEFAULT_BASE_PATH,\n      };\n\n      if (actor.getSnapshot().can(evt)) {\n        actor.send(evt);\n      }\n\n      // Ensure that the latest instantiated formRef is attached to the router\n      if (formRef && actor.getSnapshot().can({ type: 'RESET.STEP' })) {\n        actor.send({\n          type: 'FORM.ATTACH',\n          formRef,\n        });\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clerk, exampleMode, formRef?.id, !!router]);\n\n  return isReady ? <SignUpRouterCtx.Provider actorRef={actor}>{children}</SignUpRouterCtx.Provider> : null;\n}\n\nexport type SignUpRootProps = SignUpFlowProviderProps & {\n  /**\n   * Fallback markup to render while Clerk is loading\n   */\n  fallback?: React.ReactNode;\n  /**\n   * The base path for your sign-up route.\n   * Will be automatically inferred in Next.js.\n   * @example `/sign-up`\n   */\n  path?: string;\n  /**\n   * If you want to render Clerk Elements in e.g. a modal, use the `virtual` routing mode.\n   */\n  routing?: ROUTING;\n};\n\n/**\n * Root component for the sign-up flow. It sets up providers and state management for its children.\n * Must wrap all sign-up related components.\n *\n * @param {string} path - The root path the sign-up flow is mounted at. Will be automatically inferred in Next.js. You can set it to `/sign-up` for example.\n * @param {React.ReactNode} fallback - Fallback markup to render while Clerk is loading. Default: `null`\n * @param {string} routing - If you want to render Clerk Elements in e.g. a modal, use the `'virtual'` routing mode. Default: `'path'`\n *\n * @example\n * import * as SignUp from \"@clerk/elements/sign-up\"\n *\n * export default SignUpPage = () => (\n *  <SignUp.Root>\n *  </SignUp.Root>\n * )\n */\nexport function SignUpRoot({\n  children,\n  exampleMode = false,\n  fallback = null,\n  path: pathProp,\n  routing = ROUTING.path,\n}: SignUpRootProps): JSX.Element | null {\n  const clerk = useClerk();\n  const inferredPath = usePathnameWithoutCatchAll();\n  const path = pathProp || inferredPath || SIGN_UP_DEFAULT_BASE_PATH;\n\n  clerk.telemetry?.record(\n    eventComponentMounted('Elements_SignUpRoot', {\n      exampleMode,\n      fallback: Boolean(fallback),\n      path,\n      routing,\n    }),\n  );\n\n  // TODO: eventually we'll rely on the framework SDK to specify its host router, but for now we'll default to Next.js\n  const router = (routing === ROUTING.virtual ? useVirtualRouter : useNextRouter)();\n  const isRootPath = path === router.pathname();\n\n  return (\n    <Router\n      basePath={path}\n      router={router}\n    >\n      <FormStoreProvider>\n        <SignUpFlowProvider exampleMode={exampleMode}>\n          {isRootPath ? (\n            <ClerkLoading>\n              <Form>{fallback}</Form>\n            </ClerkLoading>\n          ) : null}\n          <ClerkLoaded>{children}</ClerkLoaded>\n        </SignUpFlowProvider>\n      </FormStoreProvider>\n    </Router>\n  );\n}\n","export const SSO_CALLBACK_PATH_ROUTE = '/sso-callback';\nexport const MAGIC_LINK_VERIFY_PATH_ROUTE = '/verify';\n\nexport const SIGN_IN_DEFAULT_BASE_PATH =\n  process.env.CLERK_SIGN_IN_URL ?? process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL ?? '/sign-in';\nexport const SIGN_UP_DEFAULT_BASE_PATH =\n  process.env.CLERK_SIGN_UP_URL ?? process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL ?? '/sign-up';\n\n// The version that Next added support for the window.history.pushState and replaceState APIs.\n// ref: https://nextjs.org/blog/next-14-1#windowhistorypushstate-and-windowhistoryreplacestate\nexport const NEXT_WINDOW_HISTORY_SUPPORT_VERSION = '14.1.0';\n\nexport const SEARCH_PARAMS = {\n  createdSession: '__clerk_created_session',\n  handshake: '__clerk_handshake',\n  help: '__clerk_help',\n  invitationToken: '__clerk_invitation_token',\n  modalState: '__clerk_modal_state',\n  satelliteUrl: '__clerk_satellite_url',\n  status: '__clerk_status',\n  synced: '__clerk_synced',\n  ticket: '__clerk_ticket',\n  transfer: '__clerk_transfer',\n} as const;\n\nexport const RESENDABLE_COUNTDOWN_DEFAULT = 60;\n\nexport const CAPTCHA_ELEMENT_ID = 'clerk-captcha';\n\n// Pulled from: https://github.com/clerk/javascript/blob/c7d626292a9fd12ca0f1b31a1035e711b6e99531/packages/clerk-js/src/core/constants.ts#L15\nexport const ERROR_CODES = {\n  FORM_IDENTIFIER_NOT_FOUND: 'form_identifier_not_found',\n  FORM_PASSWORD_INCORRECT: 'form_password_incorrect',\n  INVALID_STRATEGY_FOR_USER: 'strategy_for_user_invalid',\n  NOT_ALLOWED_TO_SIGN_UP: 'not_allowed_to_sign_up',\n  OAUTH_ACCESS_DENIED: 'oauth_access_denied',\n  OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML: 'oauth_email_domain_reserved_by_saml',\n  NOT_ALLOWED_ACCESS: 'not_allowed_access',\n  SAML_USER_ATTRIBUTE_MISSING: 'saml_user_attribute_missing',\n  USER_LOCKED: 'user_locked',\n};\n\nexport const ROUTING = {\n  path: 'path',\n  virtual: 'virtual',\n} as const;\n\nexport type ROUTING = (typeof ROUTING)[keyof typeof ROUTING];\n","import { createActorContext } from '@xstate/react';\nimport type { SnapshotFrom } from 'xstate';\n\nimport { FormMachine } from '~/internals/machines/form';\nimport { inspect } from '~/internals/utils/inspector';\n\nexport type SnapshotState = SnapshotFrom<typeof FormMachine>;\n\nconst FormMachineContext = createActorContext(FormMachine, { inspect });\n\nexport const FormStoreProvider = FormMachineContext.Provider;\nexport const useFormStore = FormMachineContext.useActorRef;\nexport const useFormSelector = FormMachineContext.useSelector;\n\n/**\n * Selects a global error, if it exists\n */\nexport const globalErrorsSelector = (state: SnapshotState) => state.context.errors;\n\n/**\n * Selects if a specific field has a value\n */\nexport const fieldValueSelector = (name: string | undefined) => (state: SnapshotState) =>\n  name ? state.context.fields.get(name)?.value : '';\n\n/**\n * Selects if a specific field has a value\n */\nexport const fieldHasValueSelector = (name: string | undefined) => (state: SnapshotState) =>\n  Boolean(fieldValueSelector(name)(state));\n\n/**\n * Selects field-specific feedback, if they exist\n */\nexport const fieldFeedbackSelector = (name: string | undefined) => (state: SnapshotState) =>\n  name ? state.context.fields.get(name)?.feedback : undefined;\n","import { isKnownError } from '@clerk/shared/error';\nimport { snakeToCamel } from '@clerk/shared/underscore';\nimport type { MachineContext } from 'xstate';\nimport { assign, enqueueActions, setup } from 'xstate';\n\nimport { ClerkElementsError, ClerkElementsFieldError } from '~/internals/errors';\n\nimport type { FieldDetails, FormDefaultValues, FormFields } from './form.types';\n\nexport interface FormMachineContext extends MachineContext {\n  defaultValues: FormDefaultValues;\n  errors: ClerkElementsError[];\n  fields: FormFields;\n  hidden?: Set<string>;\n  missing?: Set<string>;\n  optional?: Set<string>;\n  progressive: boolean;\n  required?: Set<string>;\n}\n\nexport type FormMachineEvents =\n  | { type: 'FIELD.ADD'; field: Pick<FieldDetails, 'name' | 'value'> }\n  | { type: 'FIELD.REMOVE'; field: Pick<FieldDetails, 'name'> }\n  | {\n      type: 'MARK_AS_PROGRESSIVE';\n      defaultValues: FormDefaultValues;\n      missing: string[];\n      optional: string[];\n      required: string[];\n    }\n  | { type: 'UNMARK_AS_PROGRESSIVE' }\n  | {\n      type: 'FIELD.UPDATE';\n      field: Pick<FieldDetails, 'name' | 'value'>;\n    }\n  | { type: 'ERRORS.SET'; error: any }\n  | { type: 'ERRORS.CLEAR' }\n  | {\n      type: 'FIELD.FEEDBACK.SET';\n      field: Pick<FieldDetails, 'name' | 'feedback'>;\n    }\n  | {\n      type: 'FIELD.FEEDBACK.CLEAR';\n      field: Pick<FieldDetails, 'name'>;\n    }\n  | { type: 'FIELD.FEEDBACK.CLEAR.ALL' };\n\ntype FormMachineTypes = {\n  events: FormMachineEvents;\n  context: FormMachineContext;\n};\n\nexport type TFormMachine = typeof FormMachine;\n\n/**\n * A machine for managing form state.\n * This machine is used alongside our other, flow-specific machines and a reference to a spawned FormMachine actor is used in the flows to interact with the form state.\n */\nexport const FormMachine = setup({\n  actions: {\n    setGlobalErrors: assign({\n      errors: (_, params: { errors: ClerkElementsError[] }) => [...params.errors],\n    }),\n    setFieldFeedback: assign({\n      fields: ({ context }, params: Pick<FieldDetails, 'name' | 'feedback'>) => {\n        if (!params.name) {\n          throw new Error('Field name is required');\n        }\n\n        if (context.fields.has(params.name)) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          context.fields.get(params.name)!.feedback = params.feedback;\n        }\n\n        return context.fields;\n      },\n    }),\n  },\n  types: {} as FormMachineTypes,\n}).createMachine({\n  id: 'Form',\n  context: () => ({\n    defaultValues: new Map(),\n    errors: [],\n    fields: new Map(),\n    progressive: false,\n  }),\n  on: {\n    'ERRORS.SET': {\n      actions: enqueueActions(({ enqueue, event }) => {\n        if (isKnownError(event.error)) {\n          const fields: Record<string, ClerkElementsFieldError[]> = {};\n          const globalErrors: ClerkElementsError[] = [];\n\n          for (const error of event.error.errors || [event.error]) {\n            const name = snakeToCamel(error.meta?.paramName);\n\n            if (!name) {\n              globalErrors.push(ClerkElementsError.fromAPIError(error));\n              continue;\n            } else if (!fields[name]) {\n              fields[name] = [];\n            }\n\n            fields[name]?.push(ClerkElementsFieldError.fromAPIError(error));\n          }\n\n          enqueue({\n            type: 'setGlobalErrors',\n            params: {\n              errors: globalErrors,\n            },\n          });\n\n          for (const field in fields) {\n            enqueue({\n              type: 'setFieldFeedback',\n              params: {\n                name: field,\n                feedback: {\n                  type: 'error',\n                  message: fields[field][0],\n                },\n              },\n            });\n          }\n        }\n      }),\n    },\n    'ERRORS.CLEAR': {\n      actions: assign({\n        errors: () => [],\n      }),\n    },\n    'FIELD.ADD': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n\n          event.field.value = event.field.value || context.defaultValues.get(event.field.name) || undefined;\n\n          context.fields.set(event.field.name, event.field);\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.UPDATE': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n\n          if (context.fields.has(event.field.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            context.fields.get(event.field.name)!.value = event.field.value;\n          }\n\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.REMOVE': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n\n          context.fields.delete(event.field.name);\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.FEEDBACK.SET': {\n      actions: [\n        {\n          type: 'setFieldFeedback',\n          params: ({ event }) => event.field,\n        },\n      ],\n    },\n    'FIELD.FEEDBACK.CLEAR': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n          if (context.fields.has(event.field.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            context.fields.get(event.field.name)!.feedback = undefined;\n          }\n\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.FEEDBACK.CLEAR.ALL': {\n      actions: assign({\n        fields: ({ context }) => {\n          context.fields.forEach(field => {\n            field.feedback = undefined;\n          });\n\n          return context.fields;\n        },\n      }),\n    },\n    MARK_AS_PROGRESSIVE: {\n      actions: assign(({ event }) => {\n        const missing = new Set(event.missing);\n\n        return {\n          defaultValues: event.defaultValues,\n          hidden: new Set([...event.required.filter(f => !missing.has(f)), ...event.optional]),\n          missing,\n          optional: new Set(event.optional),\n          progressive: true,\n          required: new Set(event.required),\n        };\n      }),\n    },\n    UNMARK_AS_PROGRESSIVE: {\n      actions: assign({\n        defaultValues: new Map(),\n        hidden: undefined,\n        missing: undefined,\n        optional: undefined,\n        progressive: false,\n        required: undefined,\n      }),\n    },\n  },\n});\n","import type { ClerkAPIError } from '@clerk/types';\n\nexport abstract class ClerkElementsErrorBase extends Error {\n  clerkError = true;\n  clerkElementsError = true;\n  rawMessage: string;\n\n  constructor(\n    readonly code: string,\n    message: string,\n  ) {\n    super(message);\n\n    this.name = 'ClerkElementsError';\n    this.rawMessage = message;\n  }\n\n  toString() {\n    return `[${this.name}]\\nCode: ${this.code}\\nMessage: ${this.message}`;\n  }\n}\n\nexport class ClerkElementsError extends ClerkElementsErrorBase {\n  static fromAPIError(error: ClerkAPIError) {\n    return new ClerkElementsError(error.code, error.longMessage || error.message);\n  }\n\n  constructor(code: string, message: string) {\n    super(code, message);\n    this.name = 'ClerkElementsError';\n  }\n}\n\nexport class ClerkElementsRuntimeError extends ClerkElementsErrorBase {\n  constructor(message: string) {\n    super('elements_runtime_error', message);\n    this.name = 'ClerkElementsRuntimeError';\n  }\n}\n\nexport class ClerkElementsFieldError extends ClerkElementsErrorBase {\n  static fromAPIError(error: ClerkAPIError) {\n    return new ClerkElementsFieldError(error.code, error.longMessage || error.message);\n  }\n\n  constructor(code: string, message: string) {\n    super(code, message);\n    this.name = 'ClerkElementsFieldError';\n  }\n\n  get validityState() {\n    return this.code;\n  }\n\n  get forceMatch() {\n    return true;\n  }\n\n  matchFn = () => true;\n}\n","import type { InspectionEvent, Observer } from 'xstate';\n\nimport { getInspector as getBrowserInspector } from './browser';\nimport { getInspector as getConsoleInspector } from './console';\n\nexport let inspect: Observer<InspectionEvent> | undefined;\n\nif (__DEV__) {\n  inspect = getBrowserInspector() ?? getConsoleInspector();\n}\n\nconst inspector = {\n  inspect,\n};\n\nexport default inspector;\n","import { snakeToCamel } from '@clerk/shared/underscore';\nimport type { SignUpResource } from '@clerk/types';\nimport type { DoneActorEvent } from 'xstate';\nimport { fromPromise, setup } from 'xstate';\n\nimport { SIGN_UP_DEFAULT_BASE_PATH } from '~/internals/constants';\nimport type { FormDefaultValues, FormFields } from '~/internals/machines/form';\nimport { sendToLoading } from '~/internals/machines/shared';\nimport { fieldsToSignUpParams } from '~/internals/machines/sign-up/utils';\nimport { assertActorEventError } from '~/internals/machines/utils/assert';\n\nimport type { SignUpContinueSchema } from './continue.types';\nimport type { SignInRouterMachineActorRef } from './router.types';\n\nexport type TSignUpContinueMachine = typeof SignUpContinueMachine;\n\nexport const SignUpContinueMachineId = 'SignUpContinue';\n\nexport const SignUpContinueMachine = setup({\n  actors: {\n    attempt: fromPromise<SignUpResource, { parent: SignInRouterMachineActorRef; fields: FormFields }>(\n      ({ input: { fields, parent } }) => {\n        const params = fieldsToSignUpParams(fields);\n        return parent.getSnapshot().context.clerk.client.signUp.update(params);\n      },\n    ),\n  },\n  actions: {\n    setFormErrors: ({ context, event }) => {\n      assertActorEventError(event);\n      context.formRef.send({\n        type: 'ERRORS.SET',\n        error: event.error,\n      });\n    },\n    markFormAsProgressive: ({ context }) => {\n      const signUp = context.parent.getSnapshot().context.clerk.client.signUp;\n\n      const missing = signUp.missingFields.map(snakeToCamel);\n      const optional = signUp.optionalFields.map(snakeToCamel);\n      const required = signUp.requiredFields.map(snakeToCamel);\n\n      const progressiveFieldValues: FormDefaultValues = new Map();\n\n      for (const key of required.concat(optional) as (keyof SignUpResource)[]) {\n        if (key in signUp) {\n          // @ts-expect-error - TS doesn't understand that key is a valid key of SignUpResource\n          progressiveFieldValues.set(key, signUp[key]);\n        }\n      }\n\n      context.formRef.send({\n        type: 'MARK_AS_PROGRESSIVE',\n        missing,\n        optional,\n        required,\n        defaultValues: progressiveFieldValues,\n      });\n    },\n    unmarkFormAsProgressive: ({ context }) => context.formRef.send({ type: 'UNMARK_AS_PROGRESSIVE' }),\n    sendToNext: ({ context, event }) =>\n      context.parent.send({ type: 'NEXT', resource: (event as unknown as DoneActorEvent<SignUpResource>).output }),\n    sendToLoading,\n  },\n  types: {} as SignUpContinueSchema,\n}).createMachine({\n  id: SignUpContinueMachineId,\n  context: ({ input }) => ({\n    basePath: input.basePath || SIGN_UP_DEFAULT_BASE_PATH,\n    formRef: input.formRef,\n    parent: input.parent,\n    loadingStep: 'continue',\n  }),\n  entry: 'markFormAsProgressive',\n  onDone: {\n    actions: 'unmarkFormAsProgressive',\n  },\n  initial: 'Pending',\n  states: {\n    Pending: {\n      tags: ['state:pending'],\n      description: 'Waiting for user input',\n      on: {\n        SUBMIT: {\n          target: 'Attempting',\n          reenter: true,\n        },\n      },\n    },\n    Attempting: {\n      tags: ['state:attempting', 'state:loading'],\n      entry: 'sendToLoading',\n      invoke: {\n        id: 'attempt',\n        src: 'attempt',\n        input: ({ context }) => ({\n          parent: context.parent,\n          fields: context.formRef.getSnapshot().context.fields,\n        }),\n        onDone: {\n          actions: ['sendToNext', 'sendToLoading'],\n        },\n        onError: {\n          actions: ['setFormErrors', 'sendToLoading'],\n          target: 'Pending',\n        },\n      },\n    },\n  },\n});\n","import type { SignInStrategy } from '@clerk/types';\n\nimport type {\n  SignInResetPasswordContext,\n  SignInResetPasswordEvents,\n  SignInStartContext,\n  SignInStartEvents,\n  SignInVerificationContext,\n  SignInVerificationEvents,\n} from '~/internals/machines/sign-in';\nimport type {\n  SignUpContinueContext,\n  SignUpContinueEvents,\n  SignUpStartContext,\n  SignUpStartRedirectEvent,\n  SignUpVerificationContext,\n  SignUpVerificationEvents,\n} from '~/internals/machines/sign-up';\nimport type { ThirdPartyMachineContext, ThirdPartyMachineEvent } from '~/internals/machines/third-party';\nimport type { BaseRouterLoadingStep } from '~/internals/machines/types';\n\ntype SendToLoadingProps = {\n  context:\n    | SignInStartContext\n    | SignInVerificationContext\n    | SignInResetPasswordContext\n    | ThirdPartyMachineContext\n    | SignUpStartContext\n    | SignUpContinueContext\n    | SignUpVerificationContext;\n  event:\n    | SignInStartEvents\n    | SignInVerificationEvents\n    | SignInResetPasswordEvents\n    | ThirdPartyMachineEvent\n    | SignUpStartRedirectEvent\n    | SignUpContinueEvents\n    | SignUpVerificationEvents;\n};\n\nexport function sendToLoading({ context, event }: SendToLoadingProps): void {\n  // Unrelated to the `context` of each machine, the step passed to the loading event must use BaseRouterLoadingStep\n  let step: BaseRouterLoadingStep | undefined;\n  let strategy: SignInStrategy | undefined;\n\n  // By default the loading state is set to `true` when this function is called\n  // Only if these events are received, the loading state is set to `false`\n  // Early return here to avoid unnecessary checks\n  if (event.type.startsWith('xstate.done.') || event.type.startsWith('xstate.error.')) {\n    return context.parent.send({\n      type: 'LOADING',\n      isLoading: false,\n      step: undefined,\n      strategy: undefined,\n    });\n  }\n\n  // `context.loadingStep: \"strategy\"` is not a valid BaseRouterLoadingStep (on purpose) so needs to be handled here. This context should be used when `step` should be undefined and `strategy` be defined instead\n  if (context.loadingStep === 'strategy') {\n    step = undefined;\n\n    // Third-party machine handling\n    if (event.type === 'REDIRECT') {\n      strategy = event.params.strategy;\n    }\n\n    return context.parent.send({\n      type: 'LOADING',\n      isLoading: true,\n      step,\n      strategy,\n    });\n  } else if (context.loadingStep === 'continue') {\n    step = 'continue';\n    strategy = undefined;\n\n    return context.parent.send({\n      type: 'LOADING',\n      isLoading: true,\n      step,\n      strategy,\n    });\n  } else if (context.loadingStep === 'reset-password') {\n    step = 'reset-password';\n    strategy = undefined;\n\n    return context.parent.send({\n      type: 'LOADING',\n      isLoading: true,\n      step,\n      strategy,\n    });\n  } else {\n    step = context.loadingStep;\n    strategy = undefined;\n\n    return context.parent.send({\n      type: 'LOADING',\n      isLoading: true,\n      step,\n      strategy,\n    });\n  }\n}\n","import type { SignUpCreateParams, SignUpUpdateParams } from '@clerk/types';\n\nimport type { FormFields } from '~/internals/machines/form';\n\nconst SignUpAdditionalKeys = ['firstName', 'lastName', 'emailAddress', 'username', 'password', 'phoneNumber'] as const;\n\ntype SignUpAdditionalKeys = (typeof SignUpAdditionalKeys)[number];\n\nconst signUpKeys = new Set<SignUpAdditionalKeys>(SignUpAdditionalKeys);\n\nfunction isSignUpParam<T extends SignUpAdditionalKeys>(key: string): key is T {\n  return signUpKeys.has(key as T);\n}\n\nexport function fieldsToSignUpParams<T extends SignUpCreateParams | SignUpUpdateParams>(\n  fields: FormFields,\n): Pick<T, SignUpAdditionalKeys> {\n  const params: SignUpUpdateParams = {};\n\n  fields.forEach(({ value }, key) => {\n    if (isSignUpParam(key) && value !== undefined) {\n      params[key] = value as string;\n    }\n  });\n\n  return params;\n}\n","import type { DoneActorEvent, ErrorActorEvent, EventObject } from 'xstate';\n\nexport function assertIsDefined<T>(value: T, label?: string): asserts value is NonNullable<T> {\n  if (value === undefined || value === null) {\n    throw new Error(`${label || value} is not defined`);\n  }\n}\n\nexport function assertActorEventDone<T>(event: EventObject): asserts event is DoneActorEvent<T> {\n  if ('output' in event === false) {\n    throw new Error(`Expected a done event, got \"${event.type}\"`);\n  }\n}\n\nexport function assertActorEventError<T = Error>(event: EventObject): asserts event is ErrorActorEvent<T> {\n  if ('error' in event === false) {\n    throw new Error(`Expected an error event, got \"${event.type}\"`);\n  }\n}\n","import { joinURL } from '@clerk/shared/url';\nimport type { SignUpStatus, VerificationStatus } from '@clerk/types';\nimport type { NonReducibleUnknown } from 'xstate';\nimport { and, assign, enqueueActions, log, not, or, raise, sendTo, setup } from 'xstate';\n\nimport {\n  ERROR_CODES,\n  ROUTING,\n  SEARCH_PARAMS,\n  SIGN_IN_DEFAULT_BASE_PATH,\n  SIGN_UP_DEFAULT_BASE_PATH,\n  SSO_CALLBACK_PATH_ROUTE,\n} from '~/internals/constants';\nimport { ClerkElementsError, ClerkElementsRuntimeError } from '~/internals/errors';\nimport { ThirdPartyMachine, ThirdPartyMachineId } from '~/internals/machines/third-party';\nimport { shouldUseVirtualRouting } from '~/internals/machines/utils/next';\n\nimport { SignUpContinueMachine } from './continue.machine';\nimport type {\n  SignUpRouterContext,\n  SignUpRouterEvents,\n  SignUpRouterNextEvent,\n  SignUpRouterSchema,\n} from './router.types';\nimport { SignUpStartMachine } from './start.machine';\nimport { SignUpVerificationMachine } from './verification.machine';\n\nexport const SignUpRouterMachineId = 'SignUpRouter';\nexport type TSignUpRouterMachine = typeof SignUpRouterMachine;\n\nconst isCurrentPath =\n  (path: `/${string}`) =>\n  ({ context }: { context: SignUpRouterContext }, _params?: NonReducibleUnknown) =>\n    context.router?.match(path) ?? false;\n\nconst needsStatus =\n  (status: SignUpStatus) =>\n  ({ context, event }: { context: SignUpRouterContext; event?: SignUpRouterEvents }, _?: NonReducibleUnknown) =>\n    (event as SignUpRouterNextEvent)?.resource?.status === status || context.clerk?.client?.signUp?.status === status;\n\nexport const SignUpRouterMachine = setup({\n  actors: {\n    continueMachine: SignUpContinueMachine,\n    startMachine: SignUpStartMachine,\n    thirdPartyMachine: ThirdPartyMachine,\n    verificationMachine: SignUpVerificationMachine,\n  },\n  actions: {\n    clearFormErrors: sendTo(({ context }) => context.formRef, { type: 'ERRORS.CLEAR' }),\n    logUnknownError: snapshot => console.error('Unknown error:', snapshot),\n    navigateInternal: ({ context }, { path, force = false }: { path: string; force?: boolean }) => {\n      if (!context.router) {\n        return;\n      }\n      if (!force && shouldUseVirtualRouting()) {\n        return;\n      }\n      if (context.exampleMode) {\n        return;\n      }\n\n      const resolvedPath = joinURL(context.router.basePath, path);\n      if (resolvedPath === context.router.pathname()) {\n        return;\n      }\n\n      context.router.shallowPush(resolvedPath);\n    },\n    navigateExternal: ({ context }, { path }: { path: string }) => context.router?.push(path),\n    raiseNext: raise({ type: 'NEXT' }),\n    setActive: ({ context, event }, params?: { sessionId?: string; useLastActiveSession?: boolean }) => {\n      if (context.exampleMode) {\n        return;\n      }\n\n      const session =\n        params?.sessionId ||\n        (params?.useLastActiveSession && context.clerk.client.lastActiveSessionId) ||\n        ((event as SignUpRouterNextEvent)?.resource || context.clerk.client.signUp).createdSessionId;\n\n      const beforeEmit = () => context.router?.push(context.clerk.buildAfterSignUpUrl());\n      void context.clerk.setActive({ session, beforeEmit });\n    },\n    delayedReset: raise({ type: 'RESET' }, { delay: 3000 }), // Reset machine after 3s delay.\n    setError: assign({\n      error: (_, { error }: { error?: ClerkElementsError }) => {\n        if (error) {\n          return error;\n        }\n        return new ClerkElementsRuntimeError('Unknown error');\n      },\n    }),\n    setFormOAuthErrors: ({ context }) => {\n      const errorOrig = context.clerk.client.signIn.firstFactorVerification.error;\n\n      if (!errorOrig) {\n        return;\n      }\n\n      let error: ClerkElementsError;\n\n      switch (errorOrig.code) {\n        case ERROR_CODES.NOT_ALLOWED_TO_SIGN_UP:\n        case ERROR_CODES.OAUTH_ACCESS_DENIED:\n        case ERROR_CODES.NOT_ALLOWED_ACCESS:\n        case ERROR_CODES.SAML_USER_ATTRIBUTE_MISSING:\n        case ERROR_CODES.OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML:\n        case ERROR_CODES.USER_LOCKED:\n          error = new ClerkElementsError(errorOrig.code, errorOrig.longMessage!);\n          break;\n        default:\n          error = new ClerkElementsError(\n            'unable_to_complete',\n            'Unable to complete action at this time. If the problem persists please contact support.',\n          );\n      }\n\n      context.formRef.send({\n        type: 'ERRORS.SET',\n        error,\n      });\n    },\n    transfer: ({ context }) => context.router?.push(context.clerk.buildSignInUrl()),\n  },\n  guards: {\n    areFieldsMissing: ({ context }) => context.clerk?.client?.signUp?.missingFields?.length > 0,\n    areFieldsUnverified: ({ context }) => context.clerk?.client?.signUp?.unverifiedFields?.length > 0,\n\n    hasAuthenticatedViaClerkJS: ({ context }) =>\n      Boolean(context.clerk.client.signUp.status === null && context.clerk.client.lastActiveSessionId),\n    hasCreatedSession: ({ context }) => Boolean(context.router?.searchParams().get(SEARCH_PARAMS.createdSession)),\n    hasClerkStatus: ({ context }, params?: { status: VerificationStatus }) => {\n      const value = context.router?.searchParams().get(SEARCH_PARAMS.status);\n      if (!params) {\n        return Boolean(value);\n      }\n      return value === params.status;\n    },\n    hasClerkTransfer: ({ context }) => Boolean(context.router?.searchParams().get(SEARCH_PARAMS.transfer)),\n    hasResource: ({ context }) => Boolean(context.clerk.client.signUp),\n\n    isStatusAbandoned: needsStatus('abandoned'),\n    isStatusComplete: ({ context, event }) => {\n      const resource = (event as SignUpRouterNextEvent)?.resource;\n      const signUp = context.clerk?.client?.signUp;\n\n      return (\n        (resource?.status === 'complete' && Boolean(resource?.createdSessionId)) ||\n        (signUp?.status === 'complete' && Boolean(signUp?.createdSessionId))\n      );\n    },\n    isStatusMissingRequirements: needsStatus('missing_requirements'),\n\n    isLoggedIn: or(['isStatusComplete', ({ context }) => Boolean(context.clerk.user)]),\n    isExampleMode: ({ context }) => Boolean(context.exampleMode),\n    isMissingRequiredFields: and(['isStatusMissingRequirements', 'areFieldsMissing']),\n    isMissingRequiredUnverifiedFields: and(['isStatusMissingRequirements', 'areFieldsUnverified']),\n\n    needsIdentifier: or(['statusNeedsIdentifier', isCurrentPath('/')]),\n    needsContinue: and(['statusNeedsContinue', isCurrentPath('/continue')]),\n    needsVerification: and(['statusNeedsVerification', isCurrentPath('/verify')]),\n    needsCallback: isCurrentPath(SSO_CALLBACK_PATH_ROUTE),\n\n    statusNeedsIdentifier: or([not('hasResource'), 'isStatusAbandoned']),\n    statusNeedsContinue: or(['isMissingRequiredFields']),\n    statusNeedsVerification: or(['isMissingRequiredUnverifiedFields', and(['areFieldsMissing', 'hasClerkStatus'])]),\n  },\n  delays: {\n    'TIMEOUT.POLLING': 300_000, // 5 minutes\n  },\n  types: {} as SignUpRouterSchema,\n}).createMachine({\n  id: SignUpRouterMachineId,\n  // @ts-expect-error - Set in INIT event\n  context: {},\n  initial: 'Idle',\n  on: {\n    'AUTHENTICATE.OAUTH': {\n      actions: sendTo(ThirdPartyMachineId, ({ context, event }) => ({\n        type: 'REDIRECT',\n        params: {\n          strategy: event.strategy,\n          redirectUrl: `${\n            context.router?.mode === ROUTING.virtual\n              ? context.clerk.__unstable__environment?.displayConfig.signUpUrl\n              : context.router?.basePath\n          }${SSO_CALLBACK_PATH_ROUTE}`,\n          redirectUrlComplete: context.clerk.buildAfterSignUpUrl(),\n        },\n      })),\n    },\n    'AUTHENTICATE.SAML': {\n      actions: sendTo(ThirdPartyMachineId, {\n        type: 'REDIRECT',\n        params: { strategy: 'saml' },\n      }),\n    },\n    'FORM.ATTACH': {\n      description: 'Attach/re-attach the form to the router.',\n      actions: enqueueActions(({ enqueue, event }) => {\n        enqueue.assign({\n          formRef: event.formRef,\n        });\n\n        // Reset the current step, to reset the form reference.\n        enqueue.raise({ type: 'RESET.STEP' });\n      }),\n    },\n    'NAVIGATE.PREVIOUS': '.Hist',\n    'NAVIGATE.START': '.Start',\n    LOADING: {\n      actions: assign(({ event }) => ({\n        loading: {\n          isLoading: event.isLoading,\n          step: event.step,\n          strategy: event.strategy,\n        },\n      })),\n    },\n    RESET: '.Idle',\n  },\n  states: {\n    Idle: {\n      on: {\n        INIT: {\n          actions: assign(({ event }) => ({\n            clerk: event.clerk,\n            router: event.router,\n            signInPath: event.signInPath || SIGN_IN_DEFAULT_BASE_PATH,\n            loading: {\n              isLoading: false,\n            },\n            exampleMode: event.exampleMode || false,\n            formRef: event.formRef,\n          })),\n          target: 'Init',\n        },\n      },\n    },\n    Init: {\n      entry: enqueueActions(({ context, enqueue, self }) => {\n        if (!self.getSnapshot().children[ThirdPartyMachineId]) {\n          enqueue.spawnChild('thirdPartyMachine', {\n            id: ThirdPartyMachineId,\n            systemId: ThirdPartyMachineId,\n            input: {\n              basePath: context.router?.basePath ?? SIGN_UP_DEFAULT_BASE_PATH,\n              flow: 'signUp',\n              formRef: context.formRef,\n              parent: self,\n            },\n          });\n        }\n      }),\n      always: [\n        {\n          guard: and(['isLoggedIn', not('isExampleMode')]),\n          actions: [\n            log('Already logged in'),\n            {\n              type: 'navigateExternal',\n              params: ({ context }) => ({ path: context.clerk.buildAfterSignUpUrl() }),\n            },\n          ],\n        },\n        {\n          guard: 'needsCallback',\n          target: 'Callback',\n        },\n        {\n          guard: 'needsVerification',\n          actions: { type: 'navigateInternal', params: { force: true, path: '/verify' } },\n          target: 'Verification',\n        },\n        {\n          guard: or(['needsContinue', 'hasClerkTransfer']),\n          actions: { type: 'navigateInternal', params: { force: true, path: '/continue' } },\n          target: 'Continue',\n        },\n        {\n          actions: { type: 'navigateInternal', params: { force: true, path: '/' } },\n          target: 'Start',\n        },\n      ],\n    },\n    Start: {\n      tags: 'route:start',\n      exit: 'clearFormErrors',\n      invoke: {\n        id: 'start',\n        src: 'startMachine',\n        input: ({ context, self }) => ({\n          basePath: context.router?.basePath,\n          formRef: context.formRef,\n          parent: self,\n        }),\n        onDone: {\n          actions: 'raiseNext',\n        },\n      },\n      on: {\n        'RESET.STEP': {\n          target: 'Start',\n          reenter: true,\n        },\n        NEXT: [\n          {\n            guard: 'isStatusComplete',\n            actions: ['setActive', 'delayedReset'],\n          },\n          {\n            guard: 'statusNeedsVerification',\n            target: 'Verification',\n            actions: { type: 'navigateInternal', params: { path: '/verify' } },\n          },\n          {\n            guard: 'statusNeedsContinue',\n            actions: { type: 'navigateInternal', params: { path: '/continue' } },\n            target: 'Continue',\n          },\n        ],\n      },\n    },\n    Continue: {\n      tags: 'route:continue',\n      invoke: {\n        id: 'continue',\n        src: 'continueMachine',\n        input: ({ context, self }) => ({\n          basePath: context.router?.basePath,\n          formRef: context.formRef,\n          parent: self,\n        }),\n        onDone: {\n          actions: 'raiseNext',\n        },\n      },\n      on: {\n        'RESET.STEP': {\n          target: 'Continue',\n          reenter: true,\n        },\n        NEXT: [\n          {\n            guard: 'isStatusComplete',\n            actions: ['setActive', 'delayedReset'],\n          },\n          {\n            guard: 'statusNeedsVerification',\n            target: 'Verification',\n            actions: { type: 'navigateInternal', params: { path: '/verify' } },\n          },\n        ],\n      },\n    },\n    Verification: {\n      tags: 'route:verification',\n      invoke: {\n        id: 'verification',\n        src: 'verificationMachine',\n        input: ({ context, self }) => ({\n          basePath: context.router?.basePath,\n          formRef: context.formRef,\n          parent: self,\n        }),\n        onDone: {\n          actions: 'raiseNext',\n        },\n      },\n      always: [\n        {\n          guard: 'hasCreatedSession',\n          actions: [\n            ({ context }) => ({\n              type: 'setActive',\n              params: { sessionId: context.router?.searchParams().get(SEARCH_PARAMS.createdSession) },\n            }),\n            'delayedReset',\n          ],\n        },\n        {\n          guard: { type: 'hasClerkStatus', params: { status: 'verified' } },\n          actions: { type: 'navigateInternal', params: { force: true, path: '/continue' } },\n        },\n        {\n          guard: { type: 'hasClerkStatus', params: { status: 'expired' } },\n          actions: { type: 'navigateInternal', params: { force: true, path: '/' } },\n        },\n      ],\n      on: {\n        'RESET.STEP': {\n          target: 'Verification',\n          reenter: true,\n        },\n        NEXT: [\n          {\n            guard: 'isStatusComplete',\n            actions: ['setActive', 'delayedReset'],\n          },\n          {\n            guard: 'statusNeedsContinue',\n            actions: { type: 'navigateInternal', params: { path: '/continue' } },\n            target: 'Continue',\n          },\n        ],\n      },\n    },\n    Callback: {\n      tags: 'route:callback',\n      entry: sendTo(ThirdPartyMachineId, { type: 'CALLBACK' }),\n      on: {\n        NEXT: [\n          {\n            guard: 'isStatusComplete',\n            actions: ['setActive', 'delayedReset'],\n          },\n          {\n            description: 'Handle a case where the user has already been authenticated via ClerkJS',\n            guard: 'hasAuthenticatedViaClerkJS',\n            actions: [{ type: 'setActive', params: { useLastActiveSession: true } }, 'delayedReset'],\n          },\n          {\n            guard: 'statusNeedsVerification',\n            actions: { type: 'navigateInternal', params: { path: '/verify' } },\n            target: 'Verification',\n          },\n          {\n            guard: 'statusNeedsContinue',\n            actions: { type: 'navigateInternal', params: { path: '/continue' } },\n            target: 'Continue',\n          },\n          {\n            actions: { type: 'navigateInternal', params: { path: '/' } },\n            target: 'Start',\n          },\n        ],\n      },\n    },\n    Error: {\n      tags: 'route:error',\n      on: {\n        NEXT: {\n          target: 'Start',\n          actions: 'clearFormErrors',\n        },\n      },\n    },\n    Hist: {\n      type: 'history',\n      exit: 'clearFormErrors',\n    },\n  },\n});\n","import type {\n  AuthenticateWithRedirectParams,\n  HandleOAuthCallbackParams,\n  HandleSamlCallbackParams,\n  LoadedClerk,\n} from '@clerk/types';\nimport type { SetOptional } from 'type-fest';\nimport type { AnyActorRef, AnyEventObject } from 'xstate';\nimport { fromCallback, fromPromise } from 'xstate';\n\nimport { ClerkElementsRuntimeError } from '~/internals/errors';\nimport type { WithParams, WithUnsafeMetadata } from '~/internals/machines/shared';\nimport { ClerkJSNavigationEvent, isClerkJSNavigationEvent } from '~/internals/machines/utils/clerkjs';\n\ntype OptionalRedirectParams = 'redirectUrl' | 'redirectUrlComplete';\n\nexport type AuthenticateWithRedirectSignInParams = SetOptional<AuthenticateWithRedirectParams, OptionalRedirectParams>;\nexport type AuthenticateWithRedirectSignUpParams = SetOptional<\n  WithUnsafeMetadata<AuthenticateWithRedirectParams>,\n  OptionalRedirectParams\n>;\n\nexport type AuthenticateWithRedirectInput = (\n  | (WithParams<AuthenticateWithRedirectSignInParams> & { flow: 'signIn' })\n  | (WithParams<AuthenticateWithRedirectSignUpParams> & { flow: 'signUp' })\n) & { basePath: string; parent: AnyActorRef }; // TODO: Fix circular dependency\n\nexport const redirect = fromPromise<void, AuthenticateWithRedirectInput>(\n  async ({ input: { flow, params, parent } }) => {\n    const clerk: LoadedClerk = parent.getSnapshot().context.clerk;\n\n    return clerk.client[flow].authenticateWithRedirect({\n      redirectUrl: clerk.buildUrlWithAuth(params.redirectUrl || '/'),\n      redirectUrlComplete: clerk.buildUrlWithAuth(params.redirectUrlComplete || '/'),\n      ...params,\n    });\n  },\n);\n\nexport type HandleRedirectCallbackParams<T = Required<HandleOAuthCallbackParams | HandleSamlCallbackParams>> = {\n  [K in keyof T]: NonNullable<T[K]>;\n};\n\nexport type HandleRedirectCallbackInput = AnyActorRef;\n\n/**\n * This function hijacks handleRedirectCallback from ClerkJS to handle navigation events\n * from the state machine.\n */\nexport const handleRedirectCallback = fromCallback<AnyEventObject, HandleRedirectCallbackInput>(\n  ({ sendBack, input: parent }) => {\n    const clerk: LoadedClerk = parent.getSnapshot().context.clerk;\n    const displayConfig = clerk.__unstable__environment?.displayConfig;\n\n    const customNavigate = (toEvt: string) => {\n      const to = toEvt.split('/').slice(-1)[0];\n\n      if (isClerkJSNavigationEvent(to)) {\n        // Handle known redefined navigation events\n        sendBack({ type: to });\n      } else if (to === displayConfig?.signInUrl) {\n        // Handle known non-redefined sign-in navigation events\n        sendBack({ type: ClerkJSNavigationEvent.signIn });\n      } else if (to === displayConfig?.signUpUrl) {\n        // Handle known non-redefined sign-up navigation events\n        sendBack({ type: ClerkJSNavigationEvent.signUp });\n      } else {\n        // Handle unknown navigation events\n        sendBack({ type: 'FAILURE', error: new ClerkElementsRuntimeError(`Unknown navigation event: ${to}`) });\n      }\n\n      return Promise.resolve();\n    };\n\n    // @ts-expect-error - Clerk types are incomplete\n    // TODO: Update local Clerk types\n    const loadedClerk = clerk.clerkjs as LoadedClerk;\n\n    void loadedClerk.handleRedirectCallback(\n      {\n        signInForceRedirectUrl: ClerkJSNavigationEvent.complete,\n        signInFallbackRedirectUrl: ClerkJSNavigationEvent.complete,\n        signUpForceRedirectUrl: ClerkJSNavigationEvent.signUp,\n        signUpFallbackRedirectUrl: ClerkJSNavigationEvent.signUp,\n        continueSignUpUrl: ClerkJSNavigationEvent.continue,\n        firstFactorUrl: ClerkJSNavigationEvent.signIn,\n        resetPasswordUrl: ClerkJSNavigationEvent.resetPassword,\n        secondFactorUrl: ClerkJSNavigationEvent.signIn,\n        verifyEmailAddressUrl: ClerkJSNavigationEvent.verification,\n        verifyPhoneNumberUrl: ClerkJSNavigationEvent.verification,\n        signUpUrl: ClerkJSNavigationEvent.signUp,\n        signInUrl: ClerkJSNavigationEvent.signIn,\n      } satisfies HandleOAuthCallbackParams,\n      customNavigate,\n    );\n\n    return () => void 0;\n  },\n);\n","import type { Simplify } from 'type-fest';\n\n// ================= Types ================= //\n\nexport type ClerkJSEventCategory = 'NAVIGATE';\nexport type ClerkJSEvent<T extends ClerkJSEventCategory = ClerkJSEventCategory> = `CLERKJS.${T}.${string}`;\nexport type ClerkJSEventObject<T extends ClerkJSEventCategory = ClerkJSEventCategory> = Simplify<\n  Record<string, ClerkJSEvent<T>>\n>;\nexport type ClerkJSEventExtractCategory<S extends string> = S extends `CLERKJS.${infer T}.${string}` ? T : never;\n\n// ================= Type Narrowing ================= //\n\nexport function isClerkJSEvent<T extends ClerkJSEventObject<ClerkJSEventExtractCategory<E>>, E extends ClerkJSEvent>(\n  eventObj: T,\n  event: E,\n): event is typeof event {\n  return Object.values(eventObj).includes(event as any);\n}\n\n// ================= ClerkJSNavigationEvent ================= //\n\nexport type ClerkJSNavigationEvent = (typeof ClerkJSNavigationEvent)[keyof typeof ClerkJSNavigationEvent];\nexport const ClerkJSNavigationEvent: ClerkJSEventObject<'NAVIGATE'> = {\n  complete: 'CLERKJS.NAVIGATE.COMPLETE',\n  signUp: 'CLERKJS.NAVIGATE.SIGN_UP',\n  continue: 'CLERKJS.NAVIGATE.CONTINUE',\n  generic: 'CLERKJS.NAVIGATE.GENERIC',\n  resetPassword: 'CLERKJS.NAVIGATE.RESET_PASSWORD',\n  signIn: 'CLERKJS.NAVIGATE.SIGN_IN',\n  verification: 'CLERKJS.NAVIGATE.VERIFICATION',\n} as const;\n\nexport function isClerkJSNavigationEvent(event: unknown): event is ClerkJSNavigationEvent {\n  return isClerkJSEvent(ClerkJSNavigationEvent, event as ClerkJSEvent<'NAVIGATE'>);\n}\n","import { assertEvent, assign, log, not, sendTo, setup } from 'xstate';\n\nimport { sendToLoading } from '~/internals/machines/shared';\nimport { assertActorEventError } from '~/internals/machines/utils/assert';\n\nimport { handleRedirectCallback, redirect } from './third-party.actors';\nimport type { ThirdPartyMachineSchema } from './third-party.types';\n\nexport const ThirdPartyMachineId = 'ThirdParty';\n\nexport type TThirdPartyMachine = typeof ThirdPartyMachine;\n\nexport const ThirdPartyMachine = setup({\n  actors: {\n    handleRedirectCallback,\n    redirect,\n  },\n  actions: {\n    logError: log(({ event }) => `Error: ${event.type}`),\n    assignActiveStrategy: assign({\n      activeStrategy: ({ event }) => {\n        assertEvent(event, 'REDIRECT');\n        return event.params.strategy;\n      },\n    }),\n    unassignActiveStrategy: assign({\n      activeStrategy: null,\n    }),\n    sendToNext: ({ context }) => context.parent.send({ type: 'NEXT' }),\n    sendToLoading,\n    setFormErrors: sendTo(\n      ({ context }) => context.formRef,\n      ({ event }) => {\n        assertActorEventError(event);\n        return {\n          type: 'ERRORS.SET',\n          error: event.error,\n        };\n      },\n    ),\n  },\n  guards: {\n    isExampleMode: ({ context }) => Boolean(context.parent.getSnapshot().context.exampleMode),\n  },\n  types: {} as ThirdPartyMachineSchema,\n}).createMachine({\n  id: ThirdPartyMachineId,\n  context: ({ input }) => ({\n    activeStrategy: null,\n    basePath: input.basePath,\n    formRef: input.formRef,\n    flow: input.flow,\n    parent: input.parent,\n    loadingStep: 'strategy',\n  }),\n  initial: 'Idle',\n  states: {\n    Idle: {\n      description: 'Sets third-party providers if not already set, and waits for a redirect or callback event',\n      on: {\n        CALLBACK: 'HandlingCallback',\n        REDIRECT: {\n          guard: not('isExampleMode'),\n          target: 'Redirecting',\n          reenter: true,\n        },\n      },\n    },\n    Redirecting: {\n      description: 'Redirects to the third-party provider for authentication',\n      tags: ['state:redirect', 'state:loading'],\n      entry: ['assignActiveStrategy', 'sendToLoading'],\n      exit: ['unassignActiveStrategy', 'sendToLoading'],\n      invoke: {\n        id: 'redirect',\n        src: 'redirect',\n        input: ({ context, event }) => {\n          assertEvent(event, 'REDIRECT');\n\n          return {\n            basePath: context.basePath,\n            flow: context.flow,\n            params: event.params,\n            parent: context.parent,\n          };\n        },\n        onError: {\n          actions: 'setFormErrors',\n          target: 'Idle',\n        },\n      },\n    },\n    HandlingCallback: {\n      description: 'Handles the callback from the third-party provider',\n      tags: ['state:callback', 'state:loading'],\n      invoke: {\n        id: 'handleRedirectCallback',\n        src: 'handleRedirectCallback',\n        input: ({ context }) => context.parent,\n        onError: {\n          actions: ['logError', 'setFormErrors'],\n          target: 'Idle',\n        },\n      },\n      on: {\n        'CLERKJS.NAVIGATE.*': {\n          actions: 'sendToNext',\n          target: 'Idle',\n        },\n      },\n    },\n  },\n});\n","import { NEXT_WINDOW_HISTORY_SUPPORT_VERSION } from '~/internals/constants';\n\nexport function shouldUseVirtualRouting() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  if (!window.next) {\n    return false;\n  }\n\n  return window.next.version < NEXT_WINDOW_HISTORY_SUPPORT_VERSION;\n}\n","import type { SignUpResource } from '@clerk/types';\nimport { fromPromise, not, sendTo, setup } from 'xstate';\n\nimport { SIGN_UP_DEFAULT_BASE_PATH } from '~/internals/constants';\nimport type { FormFields } from '~/internals/machines/form';\nimport { sendToLoading } from '~/internals/machines/shared';\nimport { fieldsToSignUpParams } from '~/internals/machines/sign-up/utils';\nimport { ThirdPartyMachine } from '~/internals/machines/third-party';\nimport { assertActorEventError } from '~/internals/machines/utils/assert';\n\nimport type { SignInRouterMachineActorRef } from './router.types';\nimport type { SignUpStartSchema } from './start.types';\n\nexport type TSignUpStartMachine = typeof SignUpStartMachine;\n\nexport const SignUpStartMachineId = 'SignUpStart';\n\nexport const SignUpStartMachine = setup({\n  actors: {\n    attempt: fromPromise<SignUpResource, { parent: SignInRouterMachineActorRef; fields: FormFields }>(\n      ({ input: { fields, parent } }) => {\n        const params = fieldsToSignUpParams(fields);\n        return parent.getSnapshot().context.clerk.client.signUp.create(params);\n      },\n    ),\n    thirdParty: ThirdPartyMachine,\n  },\n  actions: {\n    sendToNext: ({ context }) => context.parent.send({ type: 'NEXT' }),\n    sendToLoading,\n    setFormErrors: sendTo(\n      ({ context }) => context.formRef,\n      ({ event }) => {\n        assertActorEventError(event);\n        return {\n          type: 'ERRORS.SET',\n          error: event.error,\n        };\n      },\n    ),\n  },\n  guards: {\n    isExampleMode: ({ context }) => Boolean(context.parent.getSnapshot().context.exampleMode),\n  },\n  types: {} as SignUpStartSchema,\n}).createMachine({\n  id: SignUpStartMachineId,\n  context: ({ input }) => ({\n    basePath: input.basePath || SIGN_UP_DEFAULT_BASE_PATH,\n    formRef: input.formRef,\n    parent: input.parent,\n    loadingStep: 'start',\n  }),\n  initial: 'Pending',\n  states: {\n    Pending: {\n      tags: ['state:pending'],\n      description: 'Waiting for user input',\n      on: {\n        SUBMIT: {\n          guard: not('isExampleMode'),\n          target: 'Attempting',\n          reenter: true,\n        },\n      },\n    },\n    Attempting: {\n      tags: ['state:attempting', 'state:loading'],\n      entry: 'sendToLoading',\n      invoke: {\n        id: 'attemptCreate',\n        src: 'attempt',\n        input: ({ context }) => ({\n          parent: context.parent,\n          fields: context.formRef.getSnapshot().context.fields,\n        }),\n        onDone: {\n          actions: ['sendToNext', 'sendToLoading'],\n        },\n        onError: {\n          actions: ['setFormErrors', 'sendToLoading'],\n          target: 'Pending',\n        },\n      },\n    },\n  },\n});\n","import { Poller } from '@clerk/shared/poller';\nimport type {\n  AttemptVerificationParams,\n  Attribute,\n  PrepareVerificationParams,\n  SignUpResource,\n  SignUpVerifiableField,\n  SignUpVerificationsResource,\n  VerificationStrategy,\n} from '@clerk/types';\nimport type { Writable } from 'type-fest';\nimport { and, assign, enqueueActions, fromCallback, fromPromise, log, raise, sendParent, sendTo, setup } from 'xstate';\n\nimport {\n  MAGIC_LINK_VERIFY_PATH_ROUTE,\n  RESENDABLE_COUNTDOWN_DEFAULT,\n  SIGN_UP_DEFAULT_BASE_PATH,\n} from '~/internals/constants';\nimport { ClerkElementsError, ClerkElementsRuntimeError } from '~/internals/errors';\nimport type { WithParams } from '~/internals/machines/shared';\nimport { sendToLoading } from '~/internals/machines/shared';\nimport { assertActorEventError } from '~/internals/machines/utils/assert';\n\nimport type { SignInRouterMachineActorRef } from './router.types';\nimport {\n  type SignUpVerificationContext,\n  SignUpVerificationDelays,\n  type SignUpVerificationEmailLinkFailedEvent,\n  type SignUpVerificationEvents,\n  type SignUpVerificationSchema,\n} from './verification.types';\n\nexport type SignUpVerificationsResourceKey = keyof SignUpVerificationsResource;\nexport type TSignUpVerificationMachine = typeof SignUpVerificationMachine;\n\nexport type StartSignUpEmailLinkFlowEvents = { type: 'STOP' };\nexport type StartSignUpEmailLinkFlowInput = {\n  parent: SignInRouterMachineActorRef;\n};\n\nexport const SignUpVerificationMachineId = 'SignUpVerification';\n\nconst shouldVerify = (field: SignUpVerifiableField, strategy?: VerificationStrategy) => {\n  const guards: Writable<Parameters<typeof and<SignUpVerificationContext, SignUpVerificationEvents, any>>[0]> = [\n    {\n      type: 'isFieldUnverified',\n      params: {\n        field,\n      },\n    },\n  ];\n\n  if (strategy) {\n    guards.push({\n      type: 'isStrategyEnabled',\n      params: {\n        attribute: field,\n        strategy,\n      },\n    });\n  }\n\n  return and(guards);\n};\n\nexport type PrepareVerificationInput = {\n  parent: SignInRouterMachineActorRef;\n} & WithParams<PrepareVerificationParams>;\nexport type AttemptVerificationInput = {\n  parent: SignInRouterMachineActorRef;\n} & WithParams<AttemptVerificationParams>;\n\nexport const SignUpVerificationMachine = setup({\n  actors: {\n    prepare: fromPromise<SignUpResource, PrepareVerificationInput>(({ input: { params, parent } }) =>\n      parent.getSnapshot().context.clerk.client.signUp.prepareVerification(params),\n    ),\n    attempt: fromPromise<SignUpResource, AttemptVerificationInput>(async ({ input: { params, parent } }) =>\n      parent.getSnapshot().context.clerk.client.signUp.attemptVerification(params),\n    ),\n    attemptEmailLinkVerification: fromCallback<StartSignUpEmailLinkFlowEvents, StartSignUpEmailLinkFlowInput>(\n      ({ receive, sendBack, input: { parent } }) => {\n        const { run, stop } = Poller();\n\n        const clerk = parent.getSnapshot().context.clerk;\n\n        void run(async () =>\n          clerk.client.signUp\n            .reload()\n            .then(resource => {\n              const signInStatus = resource.status;\n              const verificationStatus = resource.verifications.emailAddress.status;\n\n              // Short-circuit if the sign-up resource is already complete\n              if (signInStatus === 'complete') {\n                return sendBack({ type: `EMAIL_LINK.VERIFIED`, resource });\n              }\n\n              switch (verificationStatus) {\n                case 'verified':\n                case 'transferable':\n                case 'expired': {\n                  sendBack({ type: `EMAIL_LINK.${verificationStatus.toUpperCase()}`, resource });\n                  break;\n                }\n                case 'failed': {\n                  sendBack({\n                    type: `EMAIL_LINK.FAILED`,\n                    error: new ClerkElementsError('email-link-verification-failed', 'Email verification failed'),\n                    resource,\n                  });\n                  break;\n                }\n                case 'unverified':\n                default:\n                  return;\n              }\n\n              stop();\n            })\n            .catch(error => {\n              stop();\n              new ClerkElementsRuntimeError(error);\n            }),\n        );\n\n        receive(event => {\n          if (event.type === 'STOP') {\n            stop();\n          }\n        });\n\n        return () => stop();\n      },\n    ),\n  },\n  actions: {\n    resendableTick: assign(({ context }) => ({\n      resendable: context.resendableAfter === 1,\n      resendableAfter: context.resendableAfter > 1 ? context.resendableAfter - 1 : context.resendableAfter,\n    })),\n    resendableReset: assign({\n      resendable: false,\n      resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT,\n    }),\n    sendToLoading,\n    setFormErrors: sendTo(\n      ({ context }) => context.formRef,\n      ({ event }) => {\n        assertActorEventError(event);\n        return {\n          type: 'ERRORS.SET',\n          error: event.error,\n        };\n      },\n    ),\n  },\n  guards: {\n    isComplete: ({ context }) => context.resource.status === 'complete',\n    isFieldUnverified: ({ context, event }, { field }: { field: SignUpVerifiableField }) => {\n      let resource = context.resource;\n\n      if (event?.type === 'NEXT' && event.resource) {\n        resource = event.resource;\n      }\n\n      return resource.unverifiedFields.includes(field);\n    },\n    isResendable: ({ context }) => context.resendable || context.resendableAfter === 0,\n    isStrategyEnabled: (\n      { context },\n      { attribute, strategy }: { attribute: Attribute; strategy: VerificationStrategy },\n    ) =>\n      Boolean(\n        context.parent\n          .getSnapshot()\n          .context.clerk.__unstable__environment?.userSettings.attributes[attribute].verifications.includes(strategy),\n      ),\n    shouldVerifyPhoneCode: shouldVerify('phone_number'),\n    shouldVerifyEmailLink: shouldVerify('email_address', 'email_link'),\n    shouldVerifyEmailCode: shouldVerify('email_address', 'email_code'),\n  },\n  delays: SignUpVerificationDelays,\n  types: {} as SignUpVerificationSchema,\n}).createMachine({\n  id: SignUpVerificationMachineId,\n  initial: 'Init',\n  context: ({ input }) => ({\n    basePath: input.basePath || SIGN_UP_DEFAULT_BASE_PATH,\n    loadingStep: 'verifications',\n    formRef: input.formRef,\n    parent: input.parent,\n    resendable: false,\n    resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT,\n    resource: input.parent.getSnapshot().context.clerk.client.signUp,\n  }),\n  on: {\n    NEXT: [\n      {\n        guard: 'isComplete',\n        actions: sendParent(({ event }) => ({ type: 'NEXT', resource: event.resource })),\n      },\n      {\n        description: 'Validate via phone number',\n        guard: 'shouldVerifyPhoneCode',\n        target: '.PhoneCode',\n      },\n      {\n        description: 'Validate via email link',\n        guard: 'shouldVerifyEmailLink',\n        target: '.EmailLink',\n      },\n      {\n        description: 'Verify via email code',\n        guard: 'shouldVerifyEmailCode',\n        target: '.EmailCode',\n      },\n      {\n        actions: sendParent(({ event }) => ({ type: 'NEXT', resource: event.resource })),\n      },\n    ],\n  },\n  states: {\n    Init: {\n      always: [\n        {\n          description: 'Validate via phone number',\n          guard: 'shouldVerifyPhoneCode',\n          target: 'PhoneCode',\n        },\n        {\n          description: 'Validate via email link',\n          guard: 'shouldVerifyEmailLink',\n          target: 'EmailLink',\n        },\n        {\n          description: 'Verify via email code',\n          guard: 'shouldVerifyEmailCode',\n          target: 'EmailCode',\n        },\n        {\n          actions: sendParent(({ context }) => ({ type: 'NEXT', resource: context.resource })),\n        },\n      ],\n    },\n    EmailLink: {\n      tags: ['verification:method:email', 'verification:category:link', 'verification:email_link'],\n      initial: 'Preparing',\n      on: {\n        'EMAIL_LINK.RESTART': {\n          target: '.Attempting',\n          reenter: true,\n        },\n        'EMAIL_LINK.FAILED': {\n          actions: [\n            {\n              type: 'setFormErrors',\n              params: ({ event }: { event: SignUpVerificationEmailLinkFailedEvent }) => ({ error: event.error }),\n            },\n            assign({ resource: ({ event }) => event.resource }),\n          ],\n          target: '.Pending',\n        },\n        'EMAIL_LINK.*': {\n          actions: enqueueActions(({ enqueue, event }) => {\n            if (event.type === 'EMAIL_LINK.RESTART') {\n              return;\n            }\n\n            enqueue.assign({ resource: event.resource });\n            enqueue.raise({ type: 'NEXT', resource: event.resource });\n          }),\n        },\n      },\n      states: {\n        Preparing: {\n          tags: ['state:preparing', 'state:loading'],\n          invoke: {\n            id: 'prepareEmailLinkVerification',\n            src: 'prepare',\n            input: ({ context }) => ({\n              parent: context.parent,\n              params: {\n                strategy: 'email_link',\n                redirectUrl: context.parent\n                  .getSnapshot()\n                  .context.clerk.buildUrlWithAuth(`${context.basePath}${MAGIC_LINK_VERIFY_PATH_ROUTE}`),\n              },\n            }),\n            onDone: {\n              target: 'Attempting',\n              actions: assign({ resource: ({ event }) => event.output }),\n            },\n            onError: {\n              actions: 'setFormErrors',\n              target: 'Pending',\n            },\n          },\n        },\n        Pending: {\n          description: 'Placeholder for allowing resending of email link',\n          tags: ['state:pending'],\n          on: {\n            NEXT: 'Preparing',\n            RETRY: 'Preparing',\n          },\n        },\n        Attempting: {\n          tags: ['state:attempting'],\n          invoke: {\n            id: 'attemptEmailLinkVerification',\n            src: 'attemptEmailLinkVerification',\n            input: ({ context }) => ({\n              parent: context.parent,\n            }),\n          },\n          after: {\n            emailLinkTimeout: {\n              description: 'Timeout after 5 minutes',\n              target: 'Pending',\n              actions: sendTo(({ context }) => context.formRef, {\n                type: 'ERRORS.SET',\n                error: new ClerkElementsError('verify-email-link-timeout', 'Email link verification timed out'),\n              }),\n            },\n          },\n          initial: 'NotResendable',\n          states: {\n            Resendable: {\n              description: 'Waiting for user to retry',\n            },\n            NotResendable: {\n              description: 'Handle countdowns',\n              on: {\n                RETRY: {\n                  actions: log(({ context }) => `Not retriable; Try again in ${context.resendableAfter}s`),\n                },\n              },\n              after: {\n                resendableTimeout: [\n                  {\n                    description: 'Set as retriable if countdown is 0',\n                    guard: 'isResendable',\n                    actions: 'resendableTick',\n                    target: 'Resendable',\n                  },\n                  {\n                    description: 'Continue countdown if not retriable',\n                    actions: 'resendableTick',\n                    target: 'NotResendable',\n                    reenter: true,\n                  },\n                ],\n              },\n            },\n          },\n        },\n      },\n    },\n    EmailCode: {\n      tags: ['verification:method:email', 'verification:category:code', 'verification:email_code'],\n      initial: 'Preparing',\n      states: {\n        Preparing: {\n          tags: ['state:preparing', 'state:loading'],\n          invoke: {\n            id: 'prepareEmailAddressCodeVerification',\n            src: 'prepare',\n            input: ({ context }) => ({\n              parent: context.parent,\n              params: {\n                strategy: 'email_code',\n              },\n            }),\n            onDone: [\n              {\n                guard: 'shouldVerifyEmailCode',\n                target: 'Pending',\n              },\n              {\n                actions: [\n                  assign({ resource: ({ event }) => event.output }),\n                  raise(({ event }) => ({ type: 'NEXT', resource: event.output })),\n                ],\n              },\n            ],\n          },\n        },\n        Pending: {\n          tags: ['state:pending'],\n          on: {\n            RETRY: 'Preparing',\n            SUBMIT: {\n              target: 'Attempting',\n              reenter: true,\n            },\n          },\n          initial: 'NotResendable',\n          states: {\n            Resendable: {\n              description: 'Waiting for user to retry',\n            },\n            NotResendable: {\n              description: 'Handle countdowns',\n              on: {\n                RETRY: {\n                  actions: log(({ context }) => `Not retriable; Try again in ${context.resendableAfter}s`),\n                },\n              },\n              after: {\n                resendableTimeout: [\n                  {\n                    description: 'Set as retriable if countdown is 0',\n                    guard: 'isResendable',\n                    actions: 'resendableTick',\n                    target: 'Resendable',\n                  },\n                  {\n                    description: 'Continue countdown if not retriable',\n                    actions: 'resendableTick',\n                    target: 'NotResendable',\n                    reenter: true,\n                  },\n                ],\n              },\n            },\n          },\n        },\n        Attempting: {\n          tags: ['state:attempting', 'state:loading'],\n          entry: 'sendToLoading',\n          invoke: {\n            id: 'attemptEmailAddressCodeVerification',\n            src: 'attempt',\n            input: ({ context }) => ({\n              parent: context.parent,\n              params: {\n                strategy: 'email_code',\n                code: (context.formRef.getSnapshot().context.fields.get('code')?.value as string) || '',\n              },\n            }),\n            onDone: {\n              actions: [raise(({ event }) => ({ type: 'NEXT', resource: event.output })), 'sendToLoading'],\n            },\n            onError: {\n              actions: ['setFormErrors', 'sendToLoading'],\n              target: 'Pending',\n            },\n          },\n        },\n      },\n    },\n    PhoneCode: {\n      tags: ['verification:method:phone', 'verification:category:code', 'verification:phone_code'],\n      initial: 'Preparing',\n      states: {\n        Preparing: {\n          tags: ['state:preparing', 'state:loading'],\n          invoke: {\n            id: 'preparePhoneCodeVerification',\n            src: 'prepare',\n            input: ({ context }) => ({\n              parent: context.parent,\n              params: {\n                strategy: 'phone_code',\n              },\n            }),\n            onDone: [\n              {\n                guard: 'shouldVerifyPhoneCode',\n                target: 'Pending',\n                actions: assign({ resource: ({ event }) => event.output }),\n              },\n              {\n                actions: [\n                  assign({ resource: ({ event }) => event.output }),\n                  raise(({ event }) => ({ type: 'NEXT', resource: event.output })),\n                ],\n              },\n            ],\n            onError: {\n              actions: 'setFormErrors',\n              target: 'Pending',\n            },\n          },\n        },\n        Pending: {\n          tags: ['state:pending'],\n          on: {\n            RETRY: 'Preparing',\n            SUBMIT: {\n              target: 'Attempting',\n              reenter: true,\n            },\n          },\n          initial: 'NotResendable',\n          states: {\n            Resendable: {\n              description: 'Waiting for user to retry',\n            },\n            NotResendable: {\n              description: 'Handle countdowns',\n              on: {\n                RETRY: {\n                  actions: log(({ context }) => `Not retriable; Try again in ${context.resendableAfter}s`),\n                },\n              },\n              after: {\n                resendableTimeout: [\n                  {\n                    description: 'Set as retriable if countdown is 0',\n                    guard: 'isResendable',\n                    actions: 'resendableTick',\n                    target: 'Resendable',\n                  },\n                  {\n                    description: 'Continue countdown if not retriable',\n                    actions: 'resendableTick',\n                    target: 'NotResendable',\n                    reenter: true,\n                  },\n                ],\n              },\n            },\n          },\n        },\n        Attempting: {\n          tags: ['state:attempting', 'state:loading'],\n          entry: 'sendToLoading',\n          invoke: {\n            id: 'attemptPhoneNumberVerification',\n            src: 'attempt',\n            input: ({ context }) => ({\n              parent: context.parent,\n              params: {\n                strategy: 'phone_code',\n                code: (context.formRef.getSnapshot().context.fields.get('code')?.value as string) || '',\n              },\n            }),\n            onDone: {\n              actions: [raise(({ event }) => ({ type: 'NEXT', resource: event.output })), 'sendToLoading'],\n            },\n            onError: {\n              actions: ['setFormErrors', 'sendToLoading'],\n              target: 'Pending',\n            },\n          },\n        },\n      },\n    },\n  },\n});\n","import type { ClerkAPIResponseError } from '@clerk/shared/error';\nimport type { SignUpResource } from '@clerk/types';\nimport type { ActorRefFrom, DoneActorEvent, ErrorActorEvent } from 'xstate';\n\nimport type { FormMachine } from '~/internals/machines/form';\n\nimport type { SignInRouterMachineActorRef } from './router.types';\n\n// ---------------------------------- Tags ---------------------------------- //\n\nexport type SignUpVerificationStateTags = 'state:preparing' | 'state:pending' | 'state:attempting' | 'state:loading';\n\nexport type SignUpVerificationVerificationCategoryTags = 'verification:category:code' | 'verification:category:link';\nexport type SignUpVerificationVerificationMethodTags = 'verification:method:email' | 'verification:method:phone';\nexport type SignUpVerificationVerificationTypeTags =\n  | 'verification:email_link'\n  | 'verification:email_code'\n  | 'verification:phone_code';\n\nexport type SignUpVerificationVerificationTags =\n  | SignUpVerificationVerificationCategoryTags\n  | SignUpVerificationVerificationMethodTags\n  | SignUpVerificationVerificationTypeTags;\n\nexport type SignUpVerificationTags = SignUpVerificationStateTags | SignUpVerificationVerificationTags;\nexport type SignUpVerificationFriendlyTags = 'code' | 'email_link' | 'email_code' | 'phone_code';\n\n// ---------------------------------- Events ---------------------------------- //\n\nexport type SignUpVerificationSubmitEvent = { type: 'SUBMIT' };\nexport type SignUpVerificationNextEvent = { type: 'NEXT'; resource?: SignUpResource };\nexport type SignUpVerificationRetryEvent = { type: 'RETRY' };\n\nexport type SignUpVerificationEmailLinkVerifiedEvent = { type: 'EMAIL_LINK.VERIFIED'; resource: SignUpResource };\nexport type SignUpVerificationEmailLinkUnverifiedEvent = { type: 'EMAIL_LINK.UNVERIFIED'; resource: SignUpResource };\nexport type SignUpVerificationEmailLinkExpiredEvent = { type: 'EMAIL_LINK.EXPIRED'; resource: SignUpResource };\nexport type SignUpVerificationEmailLinkTransferrableEvent = {\n  type: 'EMAIL_LINK.TRANSFERRABLE';\n  resource: SignUpResource;\n};\nexport type SignUpVerificationEmailLinkRestartEvent = { type: 'EMAIL_LINK.RESTART' };\nexport type SignUpVerificationEmailLinkFailedEvent = {\n  type: 'EMAIL_LINK.FAILED';\n  resource: SignUpResource;\n  error: Error;\n};\n\nexport type SignUpVerificationEmailLinkEvent =\n  | SignUpVerificationEmailLinkVerifiedEvent\n  | SignUpVerificationEmailLinkUnverifiedEvent\n  | SignUpVerificationEmailLinkExpiredEvent\n  | SignUpVerificationEmailLinkRestartEvent\n  | SignUpVerificationEmailLinkFailedEvent;\n\nexport type SignUpVerificationEvents =\n  | DoneActorEvent\n  | ErrorActorEvent\n  | SignUpVerificationRetryEvent\n  | SignUpVerificationSubmitEvent\n  | SignUpVerificationNextEvent\n  | SignUpVerificationEmailLinkEvent;\n\n// ---------------------------------- Input ---------------------------------- //\n\nexport type SignUpVerificationInput = {\n  basePath?: string;\n  formRef: ActorRefFrom<typeof FormMachine>;\n  parent: SignInRouterMachineActorRef;\n};\n\n// ---------------------------------- Delays ---------------------------------- //\n\nexport const SignUpVerificationDelays = {\n  emailLinkTimeout: 300_000, // 5 minutes\n  resendableTimeout: 1_000, // 1 second\n} as const;\n\nexport type SignUpVerificationDelays = keyof typeof SignUpVerificationDelays;\n\n// ---------------------------------- Context ---------------------------------- //\n\nexport interface SignUpVerificationContext {\n  basePath: string;\n  resource: SignUpResource;\n  error?: Error | ClerkAPIResponseError;\n  formRef: ActorRefFrom<typeof FormMachine>;\n  parent: SignInRouterMachineActorRef;\n  loadingStep: 'verifications';\n  resendable: boolean;\n  resendableAfter: number;\n}\n\n// ---------------------------------- Schema ---------------------------------- //\n\nexport interface SignUpVerificationSchema {\n  context: SignUpVerificationContext;\n  delays: SignUpVerificationDelays;\n  input: SignUpVerificationInput;\n  events: SignUpVerificationEvents;\n  tags: SignUpVerificationTags;\n}\n","import { usePathname, useRouter, useSearchParams } from 'next/navigation';\n\nimport { NEXT_WINDOW_HISTORY_SUPPORT_VERSION } from '~/internals/constants';\n\nimport type { ClerkHostRouter } from './router';\n\n/**\n * Clerk router integration with Next.js's router.\n */\nexport const useNextRouter = (): ClerkHostRouter => {\n  const router = useRouter();\n  const pathname = usePathname();\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- The order doesn't differ between renders as we're checking the execution environment.\n  const searchParams = typeof window === 'undefined' ? new URLSearchParams() : useSearchParams();\n\n  // The window.history APIs seem to prevent Next.js from triggering a full page re-render, allowing us to\n  // preserve internal state between steps.\n  const canUseWindowHistoryAPIs =\n    typeof window !== 'undefined' && window.next && window.next.version >= NEXT_WINDOW_HISTORY_SUPPORT_VERSION;\n\n  return {\n    mode: 'path',\n    name: 'NextRouter',\n    push: (path: string) => router.push(path),\n    replace: (path: string) =>\n      canUseWindowHistoryAPIs ? window.history.replaceState(null, '', path) : router.replace(path),\n    shallowPush(path: string) {\n      canUseWindowHistoryAPIs ? window.history.pushState(null, '', path) : router.push(path, {});\n    },\n    pathname: () => pathname,\n    searchParams: () => searchParams,\n  };\n};\n","import { createContext, useContext } from 'react';\n\nimport type { ClerkHostRouter, ClerkRouter } from './router';\nimport { createClerkRouter } from './router';\n\nexport const ClerkRouterContext = createContext<ClerkRouter | null>(null);\n\nexport function useClerkRouter() {\n  const ctx = useContext(ClerkRouterContext);\n\n  if (!ctx) {\n    throw new Error('clerk: Unable to locate ClerkRouter, make sure this is rendered within `<Router>`.');\n  }\n\n  return ctx;\n}\n\nexport function Router({\n  basePath,\n  children,\n  router,\n}: {\n  children: React.ReactNode;\n  basePath?: string;\n  router: ClerkHostRouter;\n}) {\n  const clerkRouter = createClerkRouter(router, basePath);\n\n  return <ClerkRouterContext.Provider value={clerkRouter}>{children}</ClerkRouterContext.Provider>;\n}\n\ntype RouteProps = { path?: string; index?: boolean };\n\nexport function Route({ path, children, index }: RouteProps & { children: React.ReactNode }) {\n  // check for parent router, if exists, create child router, otherwise create one\n  const parentRouter = useClerkRouter();\n\n  if (!path && !index) {\n    return children;\n  }\n\n  if (!parentRouter?.match(path, index)) {\n    return null;\n  }\n\n  return children;\n}\n","import { withLeadingSlash, withoutTrailingSlash } from '@clerk/shared/url';\n\nimport type { ROUTING } from '~/internals/constants';\n\nexport const PRESERVED_QUERYSTRING_PARAMS = ['after_sign_in_url', 'after_sign_up_url', 'redirect_url'];\n\n/**\n * This type represents a generic router interface that Clerk relies on to interact with the host router.\n */\nexport type ClerkHostRouter = {\n  readonly mode: ROUTING;\n  readonly name: string;\n  pathname: () => string;\n  push: (path: string) => void;\n  replace: (path: string) => void;\n  searchParams: () => URLSearchParams;\n  shallowPush: (path: string) => void;\n};\n\n/**\n * Internal Clerk router, used by Clerk components to interact with the host's router.\n */\nexport type ClerkRouter = {\n  /**\n   * The basePath the router is currently mounted on.\n   */\n  basePath: string;\n  /**\n   * Creates a child router instance scoped to the provided base path.\n   */\n  child: (childBasePath: string) => ClerkRouter;\n  /**\n   * Matches the provided path against the router's current path. If index is provided, matches against the root route of the router.\n   */\n  match: (path?: string, index?: boolean) => boolean;\n\n  /**\n   * Mode of the router instance, path-based or virtual\n   */\n  readonly mode: ROUTING;\n\n  /**\n   * Name of the router instance\n   */\n  readonly name: string;\n\n  /**\n   * Navigates to the provided path via a history push\n   */\n  push: ClerkHostRouter['push'];\n  /**\n   * Navigates to the provided path via a history replace\n   */\n  replace: ClerkHostRouter['replace'];\n  /**\n   * If supported by the host router, navigates to the provided path without triggering a full navigation\n   */\n  shallowPush: ClerkHostRouter['shallowPush'];\n  /**\n   * Returns the current pathname (including the base path)\n   */\n  pathname: ClerkHostRouter['pathname'];\n  /**\n   * Returns the current search params\n   */\n  searchParams: ClerkHostRouter['searchParams'];\n};\n\n/**\n * Ensures the provided path has a leading slash and no trailing slash\n */\nfunction normalizePath(path: string) {\n  return withoutTrailingSlash(withLeadingSlash(path));\n}\n\n/**\n * Factory function to create an instance of ClerkRouter with the provided host router.\n *\n * @param router host router instance to be used by the router\n * @param basePath base path of the router, navigation and matching will be scoped to this path\n * @returns A ClerkRouter instance\n */\nexport function createClerkRouter(router: ClerkHostRouter, basePath: string = '/'): ClerkRouter {\n  const normalizedBasePath = normalizePath(basePath);\n\n  /**\n   * Certain query parameters need to be preserved when navigating internally. These query parameters are ultimately used by Clerk to dictate behavior, so we keep them around.\n   */\n  function makeDestinationUrlWithPreservedQueryParameters(path: string) {\n    const destinationUrl = new URL(path, window.location.origin);\n    const currentSearchParams = router.searchParams();\n\n    PRESERVED_QUERYSTRING_PARAMS.forEach(key => {\n      const maybeValue = currentSearchParams.get(key);\n      if (maybeValue) {\n        destinationUrl.searchParams.set(key, maybeValue);\n      }\n    });\n\n    return `${destinationUrl.pathname}${destinationUrl.search}`;\n  }\n\n  function match(path?: string, index?: boolean) {\n    const pathToMatch = path ?? (index && '/');\n\n    if (!pathToMatch) {\n      throw new Error('[clerk] router.match() requires either a path to match, or the index flag must be set to true.');\n    }\n\n    const normalizedPath = normalizePath(pathToMatch);\n\n    return normalizePath(`${normalizedBasePath}${normalizedPath}`) === normalizePath(router.pathname());\n  }\n\n  function child(childBasePath: string) {\n    return createClerkRouter(router, `${normalizedBasePath}${normalizePath(childBasePath)}`);\n  }\n\n  function push(path: string) {\n    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);\n    return router.push(destinationUrl);\n  }\n\n  function replace(path: string) {\n    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);\n    return router.replace(destinationUrl);\n  }\n\n  function shallowPush(path: string) {\n    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);\n    return router.shallowPush(destinationUrl);\n  }\n\n  return {\n    child,\n    match,\n    mode: router.mode,\n    name: router.name,\n    push,\n    replace,\n    shallowPush,\n    pathname: router.pathname,\n    searchParams: router.searchParams,\n    basePath: normalizedBasePath,\n  };\n}\n","'use client';\n\nimport { useSyncExternalStore } from 'react';\n\nimport type { ClerkHostRouter } from './router';\n\nconst DUMMY_ORIGIN = 'https://clerk.dummy';\n\n// TODO: introduce history stack?\nclass VirtualRouter implements ClerkHostRouter {\n  readonly name = 'VirtualRouter';\n  readonly mode = 'virtual';\n\n  #url: URL;\n  #listeners: Set<(url: URL) => void> = new Set();\n\n  constructor(path?: string) {\n    const origin = typeof window === 'undefined' ? DUMMY_ORIGIN : window.location.origin;\n\n    this.#url = new URL(path ?? '/', origin);\n  }\n\n  push(path: string) {\n    const newUrl = new URL(this.#url.toString());\n    newUrl.pathname = path;\n\n    this.#url = newUrl;\n    this.emit();\n  }\n\n  replace(path: string) {\n    this.push(path);\n  }\n\n  shallowPush(path: string) {\n    this.push(path);\n  }\n\n  pathname() {\n    return this.#url.pathname;\n  }\n\n  searchParams() {\n    return this.#url.searchParams;\n  }\n\n  subscribe(listener: () => void) {\n    this.#listeners.add(listener);\n\n    return () => this.#listeners.delete(listener);\n  }\n\n  emit() {\n    this.#listeners.forEach(listener => listener(this.#url));\n  }\n\n  getSnapshot() {\n    return this.#url;\n  }\n}\n\nconst virtualRouter = new VirtualRouter('/');\n\nexport const useVirtualRouter = (): ClerkHostRouter => {\n  const url = useSyncExternalStore(\n    virtualRouter.subscribe.bind(virtualRouter),\n    virtualRouter.getSnapshot.bind(virtualRouter),\n  );\n\n  return {\n    mode: virtualRouter.mode,\n    name: virtualRouter.name,\n    pathname: () => url.pathname,\n    push: virtualRouter.push.bind(virtualRouter),\n    replace: virtualRouter.replace.bind(virtualRouter),\n    searchParams: () => url.searchParams,\n    shallowPush: virtualRouter.shallowPush.bind(virtualRouter),\n  };\n};\n","import { useSelector as useSelectorUnbound } from '@xstate/react';\nimport * as React from 'react';\nimport type { ActorRefFrom, AnyActorRef, AnyStateMachine, SnapshotFrom } from 'xstate';\n\n/**\n * Creates a context and hooks for a given actor ref.\n\n * @example\n * const SignInRouterCtx = createContextFromActorRef<typeof SignInRouterMachine>('SignInRouterCtx')\n *\n * const Parent = () => {\n *   const ref = useActorRef(SignInRouterMachine, { input: { basePath: '/sign-in' } });\n *\n *   return (\n *     <SignInRouterCtx.Provider ref={ref}>\n *       <Child />\n *     </SignInRouterCtx>\n *   )\n * }\n *\n * const Child = () => {\n *   const ref = SignInRouterCtx.useActorRef();\n *   const status = SignInRouterCtx.useSelector(state => state.context.clerk);\n\n *   const handleClick = useCallback(() => ref.send({ type: 'NEXT' }), [ref]);\n *\n *   return <button onClick={handleClick}>;\n * }\n */\n\nexport function createContextFromActorRef<TMachine extends AnyStateMachine, TRef = ActorRefFrom<TMachine>>(\n  displayName: string,\n) {\n  const ReactContext = React.createContext<TRef | null>(null);\n  const OriginalProvider = ReactContext.Provider;\n\n  function Provider({ children, actorRef }: { children: React.ReactNode; actorRef: TRef }) {\n    return React.createElement(\n      OriginalProvider,\n      {\n        value: actorRef,\n      },\n      children,\n    );\n  }\n\n  Provider.displayName = displayName;\n\n  function useContext(allowMissingActor?: false | undefined): TRef;\n  function useContext(allowMissingActor: true): TRef | null;\n  function useContext(allowMissingActor: boolean = false): TRef | null {\n    const actorRef = React.useContext(ReactContext);\n\n    if (!allowMissingActor && !actorRef) {\n      throw new Error(\n        `You used a hook from \"${Provider.displayName}\" but it's not inside a <${Provider.displayName}.Provider> component.`,\n      );\n    }\n\n    return actorRef;\n  }\n\n  function useSelector<T>(selector: (snapshot: SnapshotFrom<TRef>) => T, compare?: (a: T, b: T) => boolean): T {\n    const actor = useContext();\n    return useSelectorUnbound(actor as AnyActorRef, selector, compare);\n  }\n\n  return {\n    Provider,\n    useActorRef: useContext,\n    useSelector,\n  };\n}\n","import type { ActorRefFrom, AnyActorRef, AnyStateMachine, SnapshotFrom } from 'xstate';\n\nimport type {\n  TSignUpContinueMachine,\n  TSignUpRouterMachine,\n  TSignUpStartMachine,\n  TSignUpVerificationMachine,\n} from '~/internals/machines/sign-up';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SnapshotState = SnapshotFrom<TSignUpRouterMachine>;\n\nexport const SignUpRouterCtx = createContextFromActorRef<TSignUpRouterMachine>('SignUpRouterCtx');\n\nfunction useSignUpStep<M extends AnyStateMachine, T = ActorRefFrom<M>>(name: string) {\n  return SignUpRouterCtx.useSelector(state => state.children[name] as AnyActorRef) as T;\n}\n\nexport const useSignUpStartStep = () => useSignUpStep<TSignUpStartMachine>('start');\nexport const useSignUpContinueStep = () => useSignUpStep<TSignUpContinueMachine>('continue');\nexport const useSignUpVerificationStep = () => useSignUpStep<TSignUpVerificationMachine>('verification');\n","import { useClerk } from '@clerk/clerk-react';\nimport { logger } from '@clerk/shared/logger';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\nimport type { Autocomplete } from '@clerk/types';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport type {\n  FormControlProps,\n  FormControlProps as RadixFormControlProps,\n  FormFieldProps as RadixFormFieldProps,\n  FormMessageProps as RadixFormMessageProps,\n  FormProps as RadixFormProps,\n  FormSubmitProps as RadixFormSubmitProps,\n} from '@radix-ui/react-form';\nimport {\n  Control as RadixControl,\n  Field as RadixField,\n  Form as RadixForm,\n  FormMessage as RadixFormMessage,\n  Label as RadixLabel,\n  Submit as RadixSubmit,\n} from '@radix-ui/react-form';\nimport { Slot } from '@radix-ui/react-slot';\nimport * as React from 'react';\nimport type { SetRequired } from 'type-fest';\nimport type { BaseActorRef } from 'xstate';\n\nimport type { ClerkElementsError } from '~/internals/errors';\nimport { ClerkElementsFieldError, ClerkElementsRuntimeError } from '~/internals/errors';\nimport type { FieldDetails } from '~/internals/machines/form';\nimport {\n  fieldFeedbackSelector,\n  fieldHasValueSelector,\n  fieldValueSelector,\n  globalErrorsSelector,\n  useFormSelector,\n  useFormStore,\n} from '~/internals/machines/form/form.context';\nimport { usePassword } from '~/react/hooks/use-password.hook';\nimport { SignInRouterCtx } from '~/react/sign-in/context';\nimport { useSignInPasskeyAutofill } from '~/react/sign-in/context/router.context';\nimport type { ErrorMessagesKey } from '~/react/utils/generate-password-error-text';\nimport { isReactFragment } from '~/react/utils/is-react-fragment';\n\nimport type { OTPInputProps } from './otp';\nimport { OTP_LENGTH_DEFAULT, OTPInput } from './otp';\nimport { type ClerkFieldId, FIELD_STATES, FIELD_VALIDITY, type FieldStates } from './types';\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\nconst FieldContext = React.createContext<Pick<FieldDetails, 'name'> | null>(null);\nconst useFieldContext = () => React.useContext(FieldContext);\n\n/* -------------------------------------------------------------------------------------------------\n * Hooks\n * -----------------------------------------------------------------------------------------------*/\n\nconst useGlobalErrors = () => {\n  const errors = useFormSelector(globalErrorsSelector);\n\n  return {\n    errors,\n  };\n};\n\nconst useFieldFeedback = ({ name }: Partial<Pick<FieldDetails, 'name'>>) => {\n  const feedback = useFormSelector(fieldFeedbackSelector(name));\n\n  return {\n    feedback,\n  };\n};\n\nconst determineInputTypeFromName = (name: FormFieldProps['name']) => {\n  if (name === 'password' || name === 'confirmPassword' || name === 'currentPassword' || name === 'newPassword') {\n    return 'password' as const;\n  }\n  if (name === 'emailAddress') {\n    return 'email' as const;\n  }\n  if (name === 'phoneNumber') {\n    return 'tel' as const;\n  }\n  if (name === 'code') {\n    return 'otp' as const;\n  }\n\n  return 'text' as const;\n};\n\n/**\n * Given a field name, determine the current state of the field\n */\nconst useFieldState = ({ name }: Partial<Pick<FieldDetails, 'name'>>) => {\n  const { feedback } = useFieldFeedback({ name });\n  const hasValue = useFormSelector(fieldHasValueSelector(name));\n\n  /**\n   * If hasValue is false, the state should be idle\n   * The rest depends on the feedback type\n   */\n  let state: FieldStates = FIELD_STATES.idle;\n\n  if (!hasValue) {\n    state = FIELD_STATES.idle;\n  }\n\n  switch (feedback?.type) {\n    case 'error':\n      state = FIELD_STATES.error;\n      break;\n    case 'warning':\n      state = FIELD_STATES.warning;\n      break;\n    case 'info':\n      state = FIELD_STATES.info;\n      break;\n    case 'success':\n      state = FIELD_STATES.success;\n      break;\n    default:\n      break;\n  }\n\n  return {\n    state,\n  };\n};\n\n/**\n * Provides the form submission handler along with the form's validity via a data attribute\n */\nconst useForm = ({ flowActor }: { flowActor?: BaseActorRef<{ type: 'SUBMIT' }> }) => {\n  const { errors } = useGlobalErrors();\n  const validity = errors.length > 0 ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;\n\n  // Register the onSubmit handler for form submission\n  // TODO: merge user-provided submit handler\n  const onSubmit = React.useCallback(\n    (event: React.FormEvent<Element>) => {\n      event.preventDefault();\n      if (flowActor) {\n        flowActor.send({ type: 'SUBMIT' });\n      }\n    },\n    [flowActor],\n  );\n\n  return {\n    props: {\n      [`data-${validity}`]: true,\n      onSubmit,\n    },\n  };\n};\n\nconst useField = ({ name }: Partial<Pick<FieldDetails, 'name'>>) => {\n  const hasValue = useFormSelector(fieldHasValueSelector(name));\n  const { feedback } = useFieldFeedback({ name });\n\n  const shouldBeHidden = false; // TODO: Implement clerk-js utils\n  const hasError = feedback ? feedback.type === 'error' : false;\n  const validity = hasError ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;\n\n  return {\n    hasValue,\n    props: {\n      [`data-${validity}`]: true,\n      'data-hidden': shouldBeHidden ? true : undefined,\n      serverInvalid: hasError,\n    },\n  };\n};\n\nconst useInput = ({\n  name: inputName,\n  value: initialValue,\n  type: inputType,\n  onChange: onChangeProp,\n  onBlur: onBlurProp,\n  onFocus: onFocusProp,\n  ...passthroughProps\n}: FormInputProps) => {\n  // Inputs can be used outside a <Field> wrapper if desired, so safely destructure here\n  const fieldContext = useFieldContext();\n  const name = inputName || fieldContext?.name;\n  const { state: fieldState } = useFieldState({ name });\n\n  if (!name) {\n    throw new Error('Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.');\n  }\n\n  const ref = useFormStore();\n  const [hasPassedValiation, setHasPassedValidation] = React.useState(false);\n\n  const { validatePassword } = usePassword({\n    onValidationComplexity: hasPassed => setHasPassedValidation(hasPassed),\n    onValidationSuccess: () => {\n      ref.send({\n        type: 'FIELD.FEEDBACK.SET',\n        field: { name, feedback: { type: 'success', message: 'Your password meets all the necessary requirements.' } },\n      });\n    },\n    onValidationError: (error, keys) => {\n      if (error) {\n        ref.send({\n          type: 'FIELD.FEEDBACK.SET',\n          field: {\n            name,\n            feedback: {\n              type: 'error',\n              message: new ClerkElementsFieldError('password-validation-error', error),\n              codes: keys,\n            },\n          },\n        });\n      }\n    },\n    onValidationWarning: (warning, keys) =>\n      ref.send({\n        type: 'FIELD.FEEDBACK.SET',\n        field: { name, feedback: { type: 'warning', message: warning, codes: keys } },\n      }),\n    onValidationInfo: (info, keys) => {\n      // TODO: If input is not focused, make this info an error\n      ref.send({\n        type: 'FIELD.FEEDBACK.SET',\n        field: { name, feedback: { type: 'info', message: info, codes: keys } },\n      });\n    },\n  });\n  const value = useFormSelector(fieldValueSelector(name));\n  const hasValue = Boolean(value);\n  const type = inputType ?? determineInputTypeFromName(name);\n  let shouldValidatePassword = false;\n\n  if (type === 'password' || type === 'text') {\n    shouldValidatePassword = Boolean((passthroughProps as PasswordInputProps).validatePassword);\n  }\n\n  // Register the field in the machine context\n  React.useEffect(() => {\n    if (!name || ref.getSnapshot().context.fields.get(name)) {\n      return;\n    }\n\n    ref.send({ type: 'FIELD.ADD', field: { name, value: initialValue } });\n\n    return () => ref.send({ type: 'FIELD.REMOVE', field: { name } });\n  }, [ref]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Register the onChange handler for field updates to persist to the machine context\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChangeProp?.(event);\n      if (!name || initialValue) {\n        return;\n      }\n      ref.send({ type: 'FIELD.UPDATE', field: { name, value: event.target.value } });\n      if (shouldValidatePassword) {\n        validatePassword(event.target.value);\n      }\n    },\n    [ref, name, onChangeProp, initialValue, shouldValidatePassword, validatePassword],\n  );\n\n  const onBlur = React.useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onBlurProp?.(event);\n      if (shouldValidatePassword) {\n        validatePassword(event.target.value);\n      }\n    },\n    [onBlurProp, shouldValidatePassword, validatePassword],\n  );\n\n  const onFocus = React.useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocusProp?.(event);\n      if (shouldValidatePassword) {\n        validatePassword(event.target.value);\n      }\n    },\n    [onFocusProp, shouldValidatePassword, validatePassword],\n  );\n\n  React.useEffect(() => {\n    if (!initialValue || !name) {\n      return;\n    }\n    ref.send({ type: 'FIELD.UPDATE', field: { name, value: initialValue } });\n  }, [name, ref, initialValue]);\n\n  if (!name) {\n    throw new Error('Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.');\n  }\n\n  // TODO: Implement clerk-js utils\n  const shouldBeHidden = false;\n\n  const Element = type === 'otp' ? OTPInput : RadixControl;\n\n  let props = {};\n  if (type === 'otp') {\n    const p = passthroughProps as Omit<OTPInputProps, 'name' | 'value' | 'type'>;\n    const length = p.length || OTP_LENGTH_DEFAULT;\n\n    props = {\n      'data-otp-input': true,\n      autoComplete: 'one-time-code',\n      inputMode: 'numeric',\n      pattern: `[0-9]{${length}}`,\n      minLength: length,\n      maxLength: length,\n      onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n        // Only accept numbers\n        event.currentTarget.value = event.currentTarget.value.replace(/\\D+/g, '');\n        onChange(event);\n      },\n      type: 'text',\n      spellCheck: false,\n    };\n  }\n  if (type === 'password' && shouldValidatePassword) {\n    props = {\n      'data-has-passed-validation': hasPassedValiation ? true : undefined,\n    };\n  }\n\n  // Filter out invalid props that should not be passed through\n  // @ts-expect-error - Doesn't know about type narrowing by type here\n  const { validatePassword: _1, ...rest } = passthroughProps;\n\n  return {\n    Element,\n    props: {\n      type,\n      value: value ?? '',\n      onChange,\n      onBlur,\n      onFocus,\n      'data-hidden': shouldBeHidden ? true : undefined,\n      'data-has-value': hasValue ? true : undefined,\n      'data-state': fieldState,\n      ...props,\n      ...rest,\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nconst FORM_NAME = 'ClerkElementsForm';\n\ntype FormElement = React.ElementRef<typeof RadixForm>;\ntype FormProps = SetRequired<RadixFormProps, 'children'> & {\n  flowActor?: BaseActorRef<{ type: 'SUBMIT' }>;\n};\n\nconst Form = React.forwardRef<FormElement, FormProps>(({ flowActor, onSubmit, ...rest }, forwardedRef) => {\n  const form = useForm({ flowActor: flowActor });\n\n  const { onSubmit: internalOnSubmit, ...internalFormProps } = form.props;\n\n  return (\n    <RadixForm\n      {...internalFormProps}\n      {...rest}\n      onSubmit={composeEventHandlers(internalOnSubmit, onSubmit)}\n      ref={forwardedRef}\n    />\n  );\n});\n\nForm.displayName = FORM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_NAME = 'ClerkElementsField';\nconst FIELD_INNER_NAME = 'ClerkElementsFieldInner';\nconst FIELD_STATE_NAME = 'ClerkElementsFieldState';\n\ntype FormFieldElement = React.ElementRef<typeof RadixField>;\ntype FormFieldProps = Omit<RadixFormFieldProps, 'children'> & {\n  name: Autocomplete<ClerkFieldId>;\n  alwaysShow?: boolean;\n  children: React.ReactNode | ((state: FieldStates) => React.ReactNode);\n};\n\n/**\n * Field is used to associate its child elements with a specific input. It automatically handles unique ID generation and associating the contained label and input elements.\n *\n * @param name - Give your `<Field>` a unique name inside the current form. If you choose one of the following names Clerk Elements will automatically set the correct type on the `<input />` element: `emailAddress`, `password`, `phoneNumber`, and `code`.\n * @param alwaysShow - Optional. When `true`, the field will always be rendered, regardless of its state. By default, a field is hidden if it's optional or if it's a filled-out required field.\n * @param {Function} children - A function that receives `state` as an argument. `state` is a union of `\"success\" | \"error\" | \"idle\" | \"warning\" | \"info\"`.\n *\n * @example\n * <Clerk.Field name=\"emailAddress\">\n *   <Clerk.Label>Email</Clerk.Label>\n *   <Clerk.Input />\n * </Clerk.Field>\n *\n * @example\n * <Clerk.Field name=\"emailAddress\">\n *  {(fieldState) => (\n *    <Clerk.Label>Email</Clerk.Label>\n *    <Clerk.Input className={`text-${fieldState}`} />\n *  )}\n * </Clerk.Field>\n */\nconst Field = React.forwardRef<FormFieldElement, FormFieldProps>(({ alwaysShow, ...rest }, forwardedRef) => {\n  const formRef = useFormStore();\n  const formCtx = formRef.getSnapshot().context;\n  // A field is marked as hidden if it's optional OR if it's a filled-out required field\n  const isHiddenField = formCtx.progressive && Boolean(formCtx.hidden?.has(rest.name));\n\n  // Only alwaysShow={true} should force behavior to render the field, on `undefined` or alwaysShow={false} the isHiddenField logic should take over\n  const shouldHide = alwaysShow ? false : isHiddenField;\n\n  return shouldHide ? null : (\n    <FieldContext.Provider value={{ name: rest.name }}>\n      <FieldInner\n        {...rest}\n        ref={forwardedRef}\n      />\n    </FieldContext.Provider>\n  );\n});\n\nconst FieldInner = React.forwardRef<FormFieldElement, FormFieldProps>((props, forwardedRef) => {\n  const { children, ...rest } = props;\n  const field = useField({ name: rest.name });\n  const { state: fieldState } = useFieldState({ name: rest.name });\n\n  return (\n    <RadixField\n      {...field.props}\n      {...rest}\n      ref={forwardedRef}\n    >\n      {typeof children === 'function' ? children(fieldState) : children}\n    </RadixField>\n  );\n});\n\nField.displayName = FIELD_NAME;\nFieldInner.displayName = FIELD_INNER_NAME;\n\ntype FieldStateRenderFn = {\n  children: (state: {\n    state: FieldStates;\n    message: string | undefined;\n    codes: ErrorMessagesKey[] | undefined;\n  }) => React.ReactNode;\n};\n\n/**\n * Programmatically access the state of the wrapping `<Field>`. Useful for implementing animations when direct access to the state value is necessary.\n *\n * @param {Function} children - A function that receives `state`, `message`, and `codes` as an argument. `state` will is a union of `\"success\" | \"error\" | \"idle\" | \"warning\" | \"info\"`. `message` will be the corresponding message, e.g. error message. `codes` will be an array of keys that were used to generate the password validation messages. This prop is only available when the field is of type `password` and has `validatePassword` set to `true`.\n *\n * @example\n *\n * <Clerk.Field name=\"email\">\n *  <Clerk.Label>Email</Clerk.Label>\n *  <Clerk.FieldState>\n *    {({ state }) => (\n *      <Clerk.Input className={`text-${state}`} />\n *    )}\n *  </Clerk.FieldState>\n * </Clerk.Field>\n *\n * @example\n * <Clerk.Field name=\"password\">\n *  <Clerk.Label>Password</Clerk.Label>\n *  <Clerk.Input validatePassword />\n *  <Clerk.FieldState>\n *    {({ state, message, codes }) => (\n *      <pre>Field state: {state}</pre>\n *      <pre>Field msg: {message}</pre>\n *      <pre>Pwd keys: {codes.join(', ')}</pre>\n *    )}\n *  </Clerk.FieldState>\n * </Clerk.Field>\n */\nfunction FieldState({ children }: FieldStateRenderFn) {\n  const field = useFieldContext();\n  const { feedback } = useFieldFeedback({ name: field?.name });\n  const { state } = useFieldState({ name: field?.name });\n\n  const message = feedback?.message instanceof ClerkElementsFieldError ? feedback.message.message : feedback?.message;\n  const codes = feedback?.codes;\n\n  const fieldState = { state, message, codes };\n\n  return children(fieldState);\n}\n\nFieldState.displayName = FIELD_STATE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Input\n * -----------------------------------------------------------------------------------------------*/\n\nconst INPUT_NAME = 'ClerkElementsInput';\n\ntype PasswordInputProps = Exclude<FormControlProps, 'type'> & {\n  validatePassword?: boolean;\n};\n\ntype FormInputProps =\n  | RadixFormControlProps\n  | ({ type: 'otp'; render: OTPInputProps['render'] } & Omit<OTPInputProps, 'asChild'>)\n  | ({ type: 'otp'; render?: undefined } & OTPInputProps)\n  // Usecase: Toggle the visibility of the password input, therefore 'password' and 'text' are allowed\n  | ({ type: 'password' | 'text' } & PasswordInputProps);\n\n/**\n * Handles rendering of `<input>` elements within Clerk's flows. Supports special `type` prop values to render input types that are unique to authentication and user management flows. Additional props will be passed through to the `<input>` element.\n *\n * @param {boolean} [asChild] - If true, `<Input />` will render as its child element, passing along any necessary props.\n * @param {string} [name] - Used to target a specific field by name when rendering outside of a `<Field>` component.\n *\n * @example\n * <Clerk.Field name=\"identifier\">\n *   <Clerk.Label>Email</Clerk.Label>\n *   <Clerk.Input type=\"email\" autoComplete=\"email\" className=\"emailInput\" />\n * </Clerk.Field>\n *\n * @param {Number} [length] - The length of the OTP input. Defaults to 6.\n * @param {Number} [passwordManagerOffset] - Password managers place their icon inside an `<input />`. This default behaviour is not desirable when you use the render prop to display N distinct element. With this prop you can increase the width of the `<input />` so that the icon is rendered outside the OTP inputs.\n * @param {string} [type] - Type of control to render. Supports a special `'otp'` type for one-time password inputs. If the wrapping `<Field>` component has `name='code'`, the type will default to `'otp'`. With the `'otp'` type, the input will have a pattern and length set to 6 by default and render a single `<input />` element.\n *\n * @example\n * <Clerk.Field name=\"code\">\n *   <Clerk.Label>Email code</Clerk.Label>\n *   <Clerk.Input type=\"otp\" />\n * </Clerk.Field>\n *\n * @param {Function} [render] - Optionally, you can use a render prop that controls how each individual character is rendered. If no `render` prop is provided, a single text `<input />` will be rendered.\n *\n * @example\n * <Clerk.Field name=\"code\">\n *   <Clerk.Label>Email code</Clerk.Label>\n *   <Clerk.Input\n *     type=\"otp\"\n *     render={({ value, status }) => <span data-status={status}>{value}</span>}\n *   />\n * </Clerk.Field>\n */\nconst Input = React.forwardRef<React.ElementRef<typeof RadixControl>, FormInputProps>(\n  (props: FormInputProps, forwardedRef) => {\n    const clerk = useClerk();\n    const field = useInput(props);\n\n    const hasPasskeyAutofillProp = Boolean(field.props.autoComplete?.includes('webauthn'));\n    const allowedTypeForPasskey = (['text', 'email', 'tel'] as FormInputProps['type'][]).includes(field.props.type);\n    const signInRouterRef = SignInRouterCtx.useActorRef(true);\n\n    clerk.telemetry?.record(\n      eventComponentMounted('Elements_Input', {\n        type: props.type ?? false,\n        // @ts-expect-error - Depending on type the props can be different\n        render: Boolean(props?.render),\n        // @ts-expect-error - Depending on type the props can be different\n        asChild: Boolean(props?.asChild),\n        // @ts-expect-error - Depending on type the props can be different\n        validatePassword: Boolean(props?.validatePassword),\n      }),\n    );\n\n    if (signInRouterRef && hasPasskeyAutofillProp && allowedTypeForPasskey) {\n      return (\n        <InputWithPasskeyAutofill\n          ref={forwardedRef}\n          {...props}\n        />\n      );\n    }\n\n    if (hasPasskeyAutofillProp && !allowedTypeForPasskey) {\n      logger.warnOnce(\n        `<Input autoComplete=\"webauthn\"> can only be used with <Input type=\"text\"> or <Input type=\"email\">`,\n      );\n    } else if (hasPasskeyAutofillProp) {\n      logger.warnOnce(\n        `<Input autoComplete=\"webauthn\"> can only be used inside <SignIn> in order to trigger a sign-in attempt, otherwise it will be ignored.`,\n      );\n    }\n\n    return (\n      <field.Element\n        ref={forwardedRef}\n        {...field.props}\n      />\n    );\n  },\n);\n\nInput.displayName = INPUT_NAME;\n\nconst InputWithPasskeyAutofill = React.forwardRef<React.ElementRef<typeof RadixControl>, FormInputProps>(\n  (props: FormInputProps, forwardedRef) => {\n    const signInRouterRef = SignInRouterCtx.useActorRef(true);\n    const passkeyAutofillSupported = useSignInPasskeyAutofill();\n\n    React.useEffect(() => {\n      if (passkeyAutofillSupported) {\n        signInRouterRef?.send({ type: 'AUTHENTICATE.PASSKEY.AUTOFILL' });\n      }\n    }, [passkeyAutofillSupported, signInRouterRef]);\n\n    const field = useInput(props);\n    return (\n      <field.Element\n        ref={forwardedRef}\n        {...field.props}\n      />\n    );\n  },\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'ClerkElementsLabel';\n\n/**\n * Renders a `<label>` element that is automatically associated with its sibling `<Input />` inside of a `<Field>`. Additional props will be passed through to the `<label>` element.\n *\n * @param {boolean} [asChild] - If true, `<Label />` will render as its child element, passing along any necessary props.\n *\n * @example\n * <Clerk.Field name=\"email\">\n *   <Clerk.Label>Email</Clerk.Label>\n *   <Clerk.Input />\n * </Clerk.Field>\n */\nconst Label = RadixLabel;\n\nLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Submit\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUBMIT_NAME = 'ClerkElementsSubmit';\n\ntype FormSubmitProps = SetRequired<RadixFormSubmitProps, 'children'>;\ntype FormSubmitComponent = React.ForwardRefExoticComponent<FormSubmitProps & React.RefAttributes<HTMLButtonElement>>;\n\n/**\n * A `<button type=\"submit\">` element.\n *\n * @param {boolean} [asChild] - When `true`, the component will render its child and passes all props to it.\n */\nconst Submit = RadixSubmit as FormSubmitComponent;\n\nSubmit.displayName = SUBMIT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * GlobalError & FieldError\n * -----------------------------------------------------------------------------------------------*/\n\nconst GLOBAL_ERROR_NAME = 'ClerkElementsGlobalError';\nconst FIELD_ERROR_NAME = 'ClerkElementsFieldError';\n\ntype FormErrorRenderProps = Pick<ClerkElementsError, 'code' | 'message'>;\n\ntype FormErrorPropsAsChild = {\n  asChild?: true | never;\n  children?: React.ReactElement | ((error: FormErrorRenderProps) => React.ReactNode);\n  code?: string;\n};\n\ntype FormErrorPropsStd = {\n  asChild?: false;\n  children: React.ReactNode;\n  code: string;\n};\n\ntype FormErrorProps<T> = Omit<T, 'asChild' | 'children'> & (FormErrorPropsStd | FormErrorPropsAsChild);\n\ntype FormGlobalErrorElement = React.ElementRef<'div'>;\ntype FormGlobalErrorProps = FormErrorProps<React.ComponentPropsWithoutRef<'div'>>;\ntype FormFieldErrorElement = React.ElementRef<typeof RadixFormMessage>;\ntype FormFieldErrorProps = FormErrorProps<RadixFormMessageProps & { name?: string }>;\n\n/**\n * Used to render errors that are returned from Clerk's API, but that are not associated with a specific form field. By default, will render the error's message wrapped in a `<div>`. Optionally, the `children` prop accepts a function to completely customize rendering. Must be placed **inside** components like `<SignIn>`/`<SignUp>` to have access to the underlying form state.\n *\n * @param {string} [code] - Forces the message with the matching code to be shown. This is useful when using server-side validation.\n * @param {Function} [children] - A function that receives `message` and `code` as arguments.\n * @param {boolean} [asChild] - If `true`, `<GlobalError>` will render as its child element, passing along any necessary props.\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.GlobalError />\n * </SignIn.Root>\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.GlobalError code=\"user_locked\">Your custom error message.</Clerk.GlobalError>\n * </SignIn.Root>\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.GlobalError>\n *     {({ message, code }) => (\n *       <span data-error-code={code}>{message}</span>\n *     )}\n *   </Clerk.GlobalError>\n * </SignIn.Root>\n */\nconst GlobalError = React.forwardRef<FormGlobalErrorElement, FormGlobalErrorProps>(\n  ({ asChild = false, children, code, ...rest }, forwardedRef) => {\n    const { errors } = useGlobalErrors();\n\n    const error = errors?.[0];\n\n    if (!error || (code && error.code !== code)) {\n      return null;\n    }\n\n    const Comp = asChild ? Slot : 'div';\n    const child = typeof children === 'function' ? children(error) : children;\n\n    if (isReactFragment(child)) {\n      throw new ClerkElementsRuntimeError('<GlobalError /> cannot render a Fragment as a child.');\n    }\n\n    return (\n      <Comp\n        role='alert'\n        {...rest}\n        ref={forwardedRef}\n      >\n        {child || error.message}\n      </Comp>\n    );\n  },\n);\n\n/**\n * FieldError renders error messages associated with a specific field. By default, the error's message will be rendered in an unstyled `<span>`. Optionally, the `children` prop accepts a function to completely customize rendering.\n *\n * @param {string} [name] - Used to target a specific field by name when rendering outside of a `<Field>` component.\n * @param {Function} [children] - A function that receives `message` and `code` as arguments.\n *\n * @example\n * <Clerk.Field name=\"email\">\n *   <Clerk.FieldError />\n * </Clerk.Field>\n *\n * @example\n * <Clerk.Field name=\"email\">\n *   <Clerk.FieldError>\n *     {({ message, code }) => (\n *       <span data-error-code={code}>{message}</span>\n *     )}\n *   </Clerk.FieldError>\n * </Clerk.Field>\n */\nconst FieldError = React.forwardRef<FormFieldErrorElement, FormFieldErrorProps>(\n  ({ asChild = false, children, code, name, ...rest }, forwardedRef) => {\n    const fieldContext = useFieldContext();\n    const fieldName = fieldContext?.name || name;\n    const { feedback } = useFieldFeedback({ name: fieldName });\n\n    if (!(feedback?.type === 'error')) {\n      return null;\n    }\n\n    const error = feedback.message;\n\n    if (!error) {\n      return null;\n    }\n\n    const Comp = asChild ? Slot : 'span';\n    const child = typeof children === 'function' ? children(error) : children;\n\n    // const forceMatch = code ? error.code === code : undefined; // TODO: Re-add when Radix Form is updated\n\n    if (isReactFragment(child)) {\n      throw new ClerkElementsRuntimeError('<FieldError /> cannot render a Fragment as a child.');\n    }\n\n    return (\n      <RadixFormMessage\n        data-error-code={error.code}\n        // forceMatch={forceMatch}\n        {...rest}\n        ref={forwardedRef}\n        asChild\n      >\n        <Comp>{child || error.message}</Comp>\n      </RadixFormMessage>\n    );\n  },\n);\n\nGlobalError.displayName = GLOBAL_ERROR_NAME;\nFieldError.displayName = FIELD_ERROR_NAME;\n\nexport { Field, FieldError, FieldState, Form, GlobalError, Input, Label, Submit };\nexport type {\n  RadixFormControlProps as FormControlProps,\n  FormErrorProps,\n  FormErrorRenderProps,\n  FormFieldErrorProps,\n  FormFieldProps,\n  FormGlobalErrorProps,\n  FormInputProps,\n  FormProps,\n  FormSubmitProps,\n};\n","export { composeEventHandlers } from './primitive';\n","function composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {}\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (checkForDefaultPrevented === false || !((event as unknown) as Event).defaultPrevented) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\nexport { composeEventHandlers };\n","import { useClerk } from '@clerk/clerk-react';\nimport { noop } from '@clerk/shared';\nimport type { PasswordSettingsData, PasswordValidation } from '@clerk/types';\nimport * as React from 'react';\n\nimport type { ErrorMessagesKey } from '../utils/generate-password-error-text';\nimport { generatePasswordErrorText } from '../utils/generate-password-error-text';\n\n// This hook should mimic the already existing usePassword hook in the clerk-js package\n// @see packages/clerk-js/src/ui/hooks/usePassword.ts\n\ntype UsePasswordCallbacks = {\n  onValidationError?: (error: string | undefined, keys: ErrorMessagesKey[]) => void;\n  onValidationSuccess?: () => void;\n  onValidationWarning?: (warning: string, keys: string[]) => void;\n  onValidationInfo?: (info: string, keys: ErrorMessagesKey[]) => void;\n  onValidationComplexity?: (b: boolean) => void;\n};\n\nexport const usePassword = (callbacks?: UsePasswordCallbacks) => {\n  const clerk = useClerk();\n  const passwordSettings = clerk.__unstable__environment?.userSettings.passwordSettings as PasswordSettingsData;\n  const { disable_hibp, min_zxcvbn_strength, show_zxcvbn, ...config } = passwordSettings || {};\n\n  const {\n    onValidationError = noop,\n    onValidationSuccess = noop,\n    onValidationWarning = noop,\n    onValidationInfo = noop,\n    onValidationComplexity,\n  } = callbacks || {};\n\n  const onValidate = React.useCallback(\n    (res: PasswordValidation) => {\n      /**\n       * Failed complexity rules always have priority\n       */\n      if (res.complexity) {\n        if (Object.values(res?.complexity).length > 0) {\n          const { message, keys } = generatePasswordErrorText({\n            config,\n            failedValidations: res.complexity,\n          });\n\n          if (res.complexity?.min_length) {\n            return onValidationInfo(message, keys);\n          }\n\n          return onValidationError(message, keys);\n        }\n      }\n\n      /**\n       * Failed strength\n       */\n      if (res?.strength?.state === 'fail') {\n        const keys = res.strength.keys;\n        const error = keys.map(key => get(zxcvbnKeys, key)).join(' ');\n        return onValidationError(error, keys);\n      }\n\n      /**\n       * Password meets all criteria but could be stronger\n       */\n      if (res?.strength?.state === 'pass') {\n        const keys = res.strength.keys;\n        const error = keys.map(key => get(zxcvbnKeys, key)).join(' ');\n        return onValidationWarning(error, keys);\n      }\n\n      /**\n       * Password meets all criteria and is strong\n       */\n      return onValidationSuccess();\n    },\n    [callbacks],\n  );\n\n  const validatePassword = React.useMemo(() => {\n    return (password: string) => {\n      return clerk.client.signUp.validatePassword(password, {\n        onValidation: onValidate,\n        onValidationComplexity,\n      });\n    };\n  }, [onValidate]);\n\n  return {\n    validatePassword,\n  };\n};\n\nconst get = (t: Record<string, any>, path: string) => path.split('.').reduce((r, k) => r?.[k], t);\n\nconst zxcvbnKeys = {\n  unstable__errors: {\n    zxcvbn: {\n      couldBeStronger: 'Your password works, but could be stronger. Try adding more characters.',\n      goodPassword: 'Your password meets all the necessary requirements.',\n      notEnough: 'Your password is not strong enough.',\n      suggestions: {\n        allUppercase: 'Capitalize some, but not all letters.',\n        anotherWord: 'Add more words that are less common.',\n        associatedYears: 'Avoid years that are associated with you.',\n        capitalization: 'Capitalize more than the first letter.',\n        dates: 'Avoid dates and years that are associated with you.',\n        l33t: \"Avoid predictable letter substitutions like '@' for 'a'.\",\n        longerKeyboardPattern: 'Use longer keyboard patterns and change typing direction multiple times.',\n        noNeed: 'You can create strong passwords without using symbols, numbers, or uppercase letters.',\n        pwned: 'If you use this password elsewhere, you should change it.',\n        recentYears: 'Avoid recent years.',\n        repeated: 'Avoid repeated words and characters.',\n        reverseWords: 'Avoid reversed spellings of common words.',\n        sequences: 'Avoid common character sequences.',\n        useWords: 'Use multiple words, but avoid common phrases.',\n      },\n      warnings: {\n        common: 'This is a commonly used password.',\n        commonNames: 'Common names and surnames are easy to guess.',\n        dates: 'Dates are easy to guess.',\n        extendedRepeat: 'Repeated character patterns like \"abcabcabc\" are easy to guess.',\n        keyPattern: 'Short keyboard patterns are easy to guess.',\n        namesByThemselves: 'Single names or surnames are easy to guess.',\n        pwned: 'Your password was exposed by a data breach on the Internet.',\n        recentYears: 'Recent years are easy to guess.',\n        sequences: 'Common character sequences like \"abc\" are easy to guess.',\n        similarToCommon: 'This is similar to a commonly used password.',\n        simpleRepeat: 'Repeated characters like \"aaa\" are easy to guess.',\n        straightRow: 'Straight rows of keys on your keyboard are easy to guess.',\n        topHundred: 'This is a frequently used password.',\n        topTen: 'This is a heavily used password.',\n        userInputs: 'There should not be any personal or page related data.',\n        wordByItself: 'Single words are easy to guess.',\n      },\n    },\n  },\n};\n","import type { Autocomplete, PasswordSettingsData } from '@clerk/types';\n\n// Copied from packages/clerk-js/src/ui/hooks/usePasswordComplexity.ts\n\ntype ComplexityErrors = {\n  [key in keyof Partial<Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>>]?: boolean;\n};\n\nexport type ComplexityConfig = Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>;\n\nconst errorMessages: Record<keyof Omit<ComplexityErrors, 'allowed_special_characters'>, [string, string] | string> = {\n  max_length: ['less than %length% characters', 'length'],\n  min_length: ['%length% or more characters', 'length'],\n  require_numbers: 'a number',\n  require_lowercase: 'a lowercase letter',\n  require_uppercase: 'an uppercase letter',\n  require_special_char: 'a special character',\n};\n\nexport type ErrorMessagesKey = Autocomplete<keyof typeof errorMessages>;\n\nconst createListFormat = (message: string[]) => {\n  let messageWithPrefix: string;\n  if ('ListFormat' in Intl) {\n    const formatter = new Intl.ListFormat('en', { style: 'long', type: 'conjunction' });\n    messageWithPrefix = formatter.format(message);\n  } else {\n    messageWithPrefix = message.join(', ');\n  }\n\n  return messageWithPrefix;\n};\n\ntype GeneratePasswordErrorTextProps = {\n  config: ComplexityConfig;\n  failedValidations: ComplexityErrors | undefined;\n};\n\nexport const generatePasswordErrorText = ({ config, failedValidations }: GeneratePasswordErrorTextProps) => {\n  const keys: ErrorMessagesKey[] = [];\n\n  if (!failedValidations || Object.keys(failedValidations).length === 0) {\n    return {\n      keys,\n      message: '',\n    };\n  }\n\n  // show min length error first by itself\n  const hasMinLengthError = failedValidations?.min_length || false;\n\n  const messages = Object.entries(failedValidations)\n    .filter(k => (hasMinLengthError ? k[0] === 'min_length' : true))\n    .filter(([, v]) => !!v)\n    .map(([k]) => {\n      const entry = k as keyof typeof errorMessages;\n      keys.push(entry);\n      const errorKey = errorMessages[entry];\n\n      if (Array.isArray(errorKey)) {\n        const [msg, replaceValue] = errorKey;\n        return msg.replace(`%${replaceValue}%`, config[k as keyof ComplexityConfig] as string);\n      }\n      return errorKey;\n    });\n\n  const messageWithPrefix = createListFormat(messages);\n\n  return {\n    keys,\n    message: `Your password must contain ${messageWithPrefix}.`,\n  };\n};\n","import type { ActorRefFrom, AnyActorRef, AnyStateMachine, SnapshotFrom } from 'xstate';\n\nimport type {\n  TSignInFirstFactorMachine,\n  TSignInResetPasswordMachine,\n  TSignInRouterMachine,\n  TSignInSecondFactorMachine,\n  TSignInStartMachine,\n} from '~/internals/machines/sign-in';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SnapshotState = SnapshotFrom<TSignInRouterMachine>;\n\nexport const SignInRouterCtx = createContextFromActorRef<TSignInRouterMachine>('SignInRouterCtx');\n\nfunction useSignInStep<M extends AnyStateMachine, T = ActorRefFrom<M>>(name: string) {\n  return SignInRouterCtx.useSelector(state => state.children[name] as AnyActorRef) as T;\n}\n\nexport const useSignInStartStep = () => useSignInStep<TSignInStartMachine>('start');\nexport const useSignInFirstFactorStep = () => useSignInStep<TSignInFirstFactorMachine>('firstFactor');\nexport const useSignInSecondFactorStep = () => useSignInStep<TSignInSecondFactorMachine>('secondFactor');\nexport const useSignInResetPasswordStep = () => useSignInStep<TSignInResetPasswordMachine>('resetPassword');\n\nexport const useSignInPasskeyAutofill = () =>\n  SignInRouterCtx.useSelector(state => state.context.webAuthnAutofillSupport);\n","import * as React from 'react';\n\nexport function isReactFragment(node: React.ReactNode) {\n  return React.isValidElement(node) && node.type === React.Fragment;\n}\n","import { Control as RadixControl } from '@radix-ui/react-form';\nimport * as React from 'react';\n\nimport type { FormControlProps } from '~/react/common/form';\n\nexport type OTPInputProps = Exclude<\n  FormControlProps,\n  'type' | 'autoComplete' | 'minLength' | 'maxLength' | 'inputMode' | 'pattern' | 'spellCheck'\n> & {\n  render?: (props: { value: string; status: OTPInputSegmentStatus; index: number }) => React.ReactNode;\n  length?: number;\n  autoSubmit?: boolean;\n  passwordManagerOffset?: number;\n};\n\ntype SelectionRange = readonly [start: number | null, end: number | null];\nconst ZERO: SelectionRange = [0, 0];\nconst OUTSIDE: SelectionRange = [-1, -1];\n\nexport const OTP_LENGTH_DEFAULT = 6;\nconst PASSWORD_MANAGER_OFFSET_DEFAULT = 40;\n\n/**\n * The status of a single segment element in the OTP input\n */\nexport type OTPInputSegmentStatus = 'none' | 'cursor' | 'selected' | 'hovered';\n\n/**\n * If the render prop is provided, a custom segmented input will be rendered. Otherwise a standard input will be rendered.\n */\nexport const OTPInput = React.forwardRef<HTMLInputElement, OTPInputProps>(function OTPInput(props, ref) {\n  const { render, length, autoSubmit, ...rest } = props;\n  const hasRenderProp = typeof render !== 'undefined';\n\n  if (hasRenderProp) {\n    return (\n      <OTPInputSegmented\n        {...rest}\n        ref={ref}\n        render={render}\n        length={length}\n        autoSubmit={autoSubmit}\n      />\n    );\n  }\n\n  return (\n    <OTPInputStandard\n      {...rest}\n      ref={ref}\n      length={length}\n      autoSubmit={autoSubmit}\n    />\n  );\n});\n\n/**\n * Standard `<input />` element that receives the same props as the OTPInput component except for the render prop.\n */\nconst OTPInputStandard = React.forwardRef<HTMLInputElement, Omit<OTPInputProps, 'render'>>(\n  function OTPInput(props, ref) {\n    const { length = OTP_LENGTH_DEFAULT, autoSubmit = false, ...rest } = props;\n\n    const innerRef = React.useRef<HTMLInputElement>(null);\n    // This ensures we can access innerRef internally while still exposing it via the ref prop\n    React.useImperativeHandle(ref, () => innerRef.current as HTMLInputElement, []);\n\n    // Fire the requestSubmit callback when the input has the required length and autoSubmit is enabled\n    React.useEffect(() => {\n      if (String(props.value).length === length && autoSubmit) {\n        innerRef.current?.form?.requestSubmit();\n      }\n    }, [props.value, length, autoSubmit]);\n\n    return (\n      <RadixControl\n        ref={innerRef}\n        {...rest}\n        data-otp-input-standard\n      />\n    );\n  },\n);\n\n/**\n * A custom input component to handle accepting OTP codes. An invisible input element is used to capture input and handle native input\n * interactions, while the provided render prop is used to visually render the input's contents.\n */\nconst OTPInputSegmented = React.forwardRef<HTMLInputElement, Required<Pick<OTPInputProps, 'render'>> & OTPInputProps>(\n  function OTPInput(props, ref) {\n    const {\n      className: userProvidedClassName,\n      render,\n      length = OTP_LENGTH_DEFAULT,\n      autoSubmit = false,\n      passwordManagerOffset = PASSWORD_MANAGER_OFFSET_DEFAULT,\n      ...rest\n    } = props;\n\n    const innerRef = React.useRef<HTMLInputElement>(null);\n    const [selectionRange, setSelectionRange] = React.useState<SelectionRange>(props.autoFocus ? ZERO : OUTSIDE);\n    const [isHovering, setIsHovering] = React.useState(false);\n\n    const isFocused = () => document.activeElement === innerRef.current;\n\n    // This ensures we can access innerRef internally while still exposing it via the ref prop\n    React.useImperativeHandle(ref, () => innerRef.current as HTMLInputElement, []);\n\n    /**\n     * A layout effect is used here to avoid any perceived visual lag when changing the selection\n     * This effect ensures that when deleting characters from the input the selection is updated\n     */\n    React.useLayoutEffect(() => {\n      if (document.activeElement !== innerRef.current) {\n        return;\n      }\n      setSelectionRange(cur => selectionRangeUpdater(cur, innerRef));\n    }, [props.value]);\n\n    /**\n     * Attach a selectionchange handler on the document during the capture phase to the selection range is updated\n     * immediately.\n     *\n     * One concrete example, if using onSelect on the input, the handler wouldn't fire when pressing cmd + left/right arrow.\n     */\n    React.useEffect(() => {\n      function onSelectionChange() {\n        if (!isFocused()) {\n          return;\n        }\n        setSelectionRange(cur => selectionRangeUpdater(cur, innerRef));\n      }\n\n      document.addEventListener('selectionchange', onSelectionChange, { capture: true });\n      return () => document.removeEventListener('selectionchange', onSelectionChange);\n    }, []);\n\n    // Fire the requestSubmit callback when the input has the required length and autoSubmit is enabled\n    React.useEffect(() => {\n      if (String(props.value).length === length && autoSubmit) {\n        innerRef.current?.form?.requestSubmit();\n      }\n    }, [props.value, length, autoSubmit]);\n\n    return (\n      <div\n        data-otp-input-wrapper\n        style={wrapperStyle}\n      >\n        {/* We can't target pseudo-elements with the style prop, so we inject a tag here */}\n        <style>{`\n      input[data-otp-input-segmented]::selection {\n        color: transparent;\n        background-color: transparent;\n      }\n      `}</style>\n        <RadixControl\n          data-otp-input-segmented\n          ref={innerRef}\n          {...rest}\n          onFocus={event => {\n            // Place the caret at the end of the current value\n            if (innerRef.current) {\n              const start = Math.min(innerRef.current.value.length, length - 1);\n              const end = innerRef.current.value.length;\n              innerRef.current.setSelectionRange(start, end);\n              setSelectionRange([start, end]);\n            }\n            rest?.onFocus?.(event);\n          }}\n          onBlur={event => {\n            setSelectionRange([-1, -1]);\n            rest?.onBlur?.(event);\n          }}\n          onMouseOver={event => {\n            if (!isFocused()) {\n              setIsHovering(true);\n            }\n            props.onMouseOver?.(event);\n          }}\n          onMouseLeave={event => {\n            setIsHovering(false);\n            props.onMouseLeave?.(event);\n          }}\n          style={{\n            ...inputStyle,\n            clipPath: `inset(0 calc(1ch + ${passwordManagerOffset}px) 0 0)`,\n            width: `calc(100% + 1ch + ${passwordManagerOffset}px)`,\n          }}\n        />\n        <div\n          className={userProvidedClassName}\n          aria-hidden\n          style={segmentWrapperStyle}\n        >\n          {Array.from({ length }).map((_, i) => {\n            const isHovered = isHovering && !isFocused();\n            const isCursor = selectionRange[0] === selectionRange[1] && selectionRange[0] === i;\n            const isSelected = (selectionRange[0] ?? -1) <= i && (selectionRange[1] ?? -1) > i;\n\n            return (\n              <React.Fragment key={`otp-segment-${i}`}>\n                {render({\n                  value: String(props.value)[i] || '',\n                  status: isHovered ? 'hovered' : isCursor ? 'cursor' : isSelected ? 'selected' : 'none',\n                  index: i,\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\n\n/**\n * Handle updating the input selection range to ensure a single character is selected when moving the cursor, or if the input value changes.\n */\nfunction selectionRangeUpdater(cur: SelectionRange, inputRef: React.RefObject<HTMLInputElement>) {\n  let updated: [number, number, HTMLInputElement['selectionDirection']] = [\n    inputRef.current?.selectionStart ?? 0,\n    inputRef.current?.selectionEnd ?? 0,\n    inputRef.current?.selectionDirection ?? null,\n  ];\n\n  // Abort unnecessary updates\n  if (cur[0] === updated[0] && cur[1] === updated[1]) {\n    return cur;\n  }\n\n  // ensures that forward selection works properly when landing on the first character\n  if (updated[0] === 0 && updated[1] === 1) {\n    updated[2] = 'forward';\n  }\n\n  // When moving the selection, we want to select either the previous or next character instead of only moving the cursor.\n  // If the start and end indices are the same, it means only the cursor has moved and we need to make a decision on which character to select.\n  if (updated[0] === updated[1]) {\n    if (updated[0] > 0 && cur[0] === updated[0] && cur[1] === updated[0] + 1) {\n      updated = [updated[0] - 1, updated[1], 'backward'];\n    } else if (typeof inputRef.current?.value[updated[0]] !== 'undefined') {\n      updated = [updated[0], updated[1] + 1, 'backward'];\n    } else if (updated[0] >= OTP_LENGTH_DEFAULT) {\n      updated = [updated[0] - 1, updated[1], 'backward'];\n    }\n  }\n\n  inputRef.current?.setSelectionRange(updated[0], updated[1], updated[2] ?? undefined);\n\n  return [updated[0], updated[1]] satisfies SelectionRange;\n}\n\nconst wrapperStyle = {\n  position: 'relative',\n  userSelect: 'none',\n} satisfies React.CSSProperties;\n\nconst inputStyle = {\n  display: 'block',\n  background: 'transparent',\n  opacity: 1,\n  outline: 'transparent solid 0px',\n  appearance: 'none',\n  color: 'transparent',\n  position: 'absolute',\n  inset: 0,\n  caretColor: 'transparent',\n  border: '0 px solid transparent',\n  // width is handled inline\n  height: '100%',\n  letterSpacing: '-1rem',\n} satisfies React.CSSProperties;\n\nconst segmentWrapperStyle = {\n  zIndex: 1,\n  pointerEvents: 'none',\n} satisfies React.CSSProperties;\n","import type { HTMLInputTypeAttribute } from 'react';\n\n/** Extracted relevant fields from @clerk/types  */\nexport type ClerkFieldId =\n  | 'code'\n  | 'confirmPassword'\n  | 'currentPassword'\n  | 'emailAddress'\n  | 'firstName'\n  | 'identifier'\n  | 'lastName'\n  | 'name'\n  | 'newPassword'\n  | 'password'\n  | 'phoneNumber'\n  | 'username';\n\n/**\n * Possible types for the Clerk input element, several 'special' input types are included.\n */\nexport type ClerkInputType = HTMLInputTypeAttribute | 'otp';\n\nexport const FIELD_STATES = {\n  success: 'success',\n  error: 'error',\n  idle: 'idle',\n  warning: 'warning',\n  info: 'info',\n} as const;\n\nexport type FieldStates = (typeof FIELD_STATES)[keyof typeof FIELD_STATES];\n\nexport const FIELD_VALIDITY = {\n  valid: 'valid',\n  invalid: 'invalid',\n} as const;\n\nexport type FieldValidity = (typeof FIELD_VALIDITY)[keyof typeof FIELD_VALIDITY];\n","import { useRouter } from 'next/compat/router';\nimport { useParams, usePathname } from 'next/navigation';\nimport React from 'react';\n\nimport { removeOptionalCatchAllSegment } from './utils';\n\n// Adapted from packages/nextjs/src/client-boundary/hooks/usePathnameWithoutCatchAll.tsx\n\n/**\n * This hook grabs the current pathname (both in pages and app router) and removes any (optional) catch all segments.\n * @example\n * 1. /user/[id]/profile/[[...rest]]/page.tsx\n * 2. /user/123/profile/security\n * 3. /user/123/profile\n * @returns The pathname without any catch all segments\n */\nexport const usePathnameWithoutCatchAll = () => {\n  const pathRef = React.useRef<string>();\n\n  /**\n   * The compat version of useRouter returns null instead of throwing an error when used inside App router.\n   * Use it to detect if the component is used inside pages or app router\n   */\n  const pagesRouter = useRouter();\n\n  if (pagesRouter) {\n    if (pathRef.current) {\n      return pathRef.current;\n    } else {\n      // The optional catch all route is included in the pathname in pages router. It starts with [[... and we can just remove it\n      pathRef.current = removeOptionalCatchAllSegment(pagesRouter.pathname);\n      return pathRef.current;\n    }\n  }\n\n  /**\n   * Get the pathname that includes any named or catch all params.\n   * @example\n   * /user/[id]/profile/[[...rest]]/page.tsx\n   *\n   * This filesystem route could give us the following pathname:\n   * /user/123/profile/security\n   * if the user navigates to the security section of the user profile\n   */\n  const pathname = usePathname() || '';\n  const pathParts = pathname.split('/').filter(Boolean);\n  /**\n   * For /user/[id]/profile/[[...rest]]/page.tsx useParams will return { id: '123', rest: ['security'] }.\n   * So catch all params are always arrays\n   */\n  const catchAllParams = Object.values(useParams() || {})\n    .filter(v => Array.isArray(v))\n    .flat(Infinity);\n  if (pathRef.current) {\n    return pathRef.current;\n  } else {\n    // /user/123/profile/security should be transformed to /user/123/profile\n    pathRef.current = `/${pathParts.slice(0, pathParts.length - catchAllParams.length).join('/')}`;\n    return pathRef.current;\n  }\n};\n","export function removeOptionalCatchAllSegment(pathname: string) {\n  return pathname.replace(/\\/\\[\\[\\.\\.\\..*/, '');\n}\n","import { useClerk } from '@clerk/clerk-react';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\n\nimport { ClerkElementsRuntimeError } from '~/internals/errors';\n\nimport type { SignUpContinueProps } from './continue';\nimport { SignUpContinue } from './continue';\nimport type { SignUpStartProps } from './start';\nimport { SignUpStart } from './start';\nimport type { SignUpVerificationsProps } from './verifications';\nimport { SignUpVerifications } from './verifications';\n\nexport const SIGN_UP_STEPS = {\n  start: 'start',\n  continue: 'continue',\n  verifications: 'verifications',\n} as const;\n\nexport type TSignUpStep = (typeof SIGN_UP_STEPS)[keyof typeof SIGN_UP_STEPS];\ntype StepWithProps<N extends TSignUpStep, T> = { name: N } & T;\n\nexport type SignUpStepProps =\n  | StepWithProps<'start', SignUpStartProps>\n  | StepWithProps<'continue', SignUpContinueProps>\n  | StepWithProps<'verifications', SignUpVerificationsProps>;\n\n/**\n * Render different steps of the sign-up flow. Initially the `'start'` step is rendered. Optionally, you can render additional fields in the `'continue'` step. Once a sign-up attempt has been created, `'verifications'` will be displayed.\n *\n * You typically want to place fields like username, password, or social providers in the `'start'` step. The `'continue'` step can hold inputs for username, first name/last name or other metadata. The `'verifications'` step is used to verify the user's information like an email verification. Once the user has been verified, the sign-up attempt will be completed.\n *\n * @param {string} name - Step name. Use `'start'`, `'continue'`, or `'verifications'`.\n *\n * @example\n * <SignUp.Root>\n *  <SignUp.Step name='start' />\n *  <SignUp.Step name='continue' />\n *  <SignUp.Step name='verifications' />\n * </SignUp.Root>\n */\nexport function SignUpStep(props: SignUpStepProps) {\n  const clerk = useClerk();\n\n  clerk.telemetry?.record(eventComponentMounted('Elements_SignUpStep', { name: props.name }));\n\n  switch (props.name) {\n    case SIGN_UP_STEPS.start:\n      return <SignUpStart {...props} />;\n    case SIGN_UP_STEPS.continue:\n      return <SignUpContinue {...props} />;\n    case SIGN_UP_STEPS.verifications:\n      return <SignUpVerifications {...props} />;\n    default:\n      throw new ClerkElementsRuntimeError(`Invalid step name. Use 'start', 'continue', or 'verifications'.`);\n  }\n}\n","import { useSelector } from '@xstate/react';\nimport type { ActorRef, AnyActorRef, AnyMachineSnapshot, MachineSnapshot } from 'xstate';\n\ntype TaggedActor<TActor extends AnyActorRef> =\n  TActor extends ActorRef<MachineSnapshot<any, any, any, any, infer TTags, any, any>, any> ? TTags : never;\n\nexport const ActiveTagsMode = {\n  any: 'any',\n  all: 'all',\n} as const;\n\nexport type UseActiveTagsMode = (typeof ActiveTagsMode)[keyof typeof ActiveTagsMode];\nexport type UseActiveTagsSingleReturn = boolean;\nexport type UseActiveTagsMultiAnyReturn<TTag> = { active: boolean; activeTags: Set<TTag> };\nexport type UseActiveTagsReturn<TTag> = UseActiveTagsSingleReturn | UseActiveTagsMultiAnyReturn<TTag>;\n\n/**\n * Generic hook to check if a tag is active.\n *\n * @example\n * const ref = SignUpCtx.useActorRef();\n *\n * useActiveTags(ref, 'external');\n * useActiveTags(ref, ['external', 'email_code']);\n * useActiveTags(ref, ['external', 'email_code'], 'all');\n *\n * @param actor {ActorRef} Machine actor reference\n * @param tag {(string | string[])} The tag(s) to check\n * @param mode {UseActiveTagsMode} Whether to match all tags or any tag\n *\n * @returns {(boolean|UseActiveTagsReturn)} Whether the tag(s) are active\n */\nexport function useActiveTags<TActor extends AnyActorRef, TTag extends TaggedActor<TActor>>(\n  actor: TActor,\n  tag: TTag,\n): boolean;\nexport function useActiveTags<TActor extends AnyActorRef, TTag extends TaggedActor<TActor>>(\n  actor: TActor,\n  tags: TTag[],\n  mode: 'all',\n): boolean;\nexport function useActiveTags<TActor extends AnyActorRef, TTag extends TaggedActor<TActor>>(\n  actor: TActor,\n  tags: TTag[],\n  mode?: 'any',\n): UseActiveTagsMultiAnyReturn<TTag>;\nexport function useActiveTags<TActor extends AnyActorRef, TTag extends TaggedActor<TActor>>(\n  actor: TActor,\n  tags: TTag | TTag[],\n  mode: UseActiveTagsMode = ActiveTagsMode.any,\n): UseActiveTagsReturn<TTag> {\n  const state = useSelector<TActor, AnyMachineSnapshot>(\n    actor,\n    s => s,\n    (prev, next) => prev.tags === next.tags,\n  );\n\n  if (typeof tags === 'string') {\n    return state.hasTag(tags);\n  }\n\n  if (!Array.isArray(tags)) {\n    throw new Error('Invalid tags parameter provided to useActiveTags');\n  }\n\n  switch (mode) {\n    case ActiveTagsMode.any: {\n      const matching = new Set(tags.filter(tag => state.hasTag(tag)));\n      return { active: matching.size > 0, activeTags: matching };\n    }\n    case ActiveTagsMode.all:\n      return tags.length === state.tags.size ? tags.every(tag => state.hasTag(tag)) : false;\n    default:\n      return false;\n  }\n}\n","import type { TSignUpContinueMachine } from '~/internals/machines/sign-up';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignUpRouterCtx, useSignUpContinueStep } from '~/react/sign-up/context';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SignUpContinueProps = FormProps;\n\nexport const SignUpContinueCtx = createContextFromActorRef<TSignUpContinueMachine>('SignUpContinueCtx');\n\nexport function SignUpContinue(props: SignUpContinueProps) {\n  const routerRef = SignUpRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:continue');\n\n  return activeState ? <SignUpContinueInner {...props} /> : null;\n}\n\nfunction SignUpContinueInner(props: SignUpContinueProps) {\n  const ref = useSignUpContinueStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignUpContinueCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignUpContinueCtx.Provider>\n  );\n}\n","import type { TSignUpStartMachine } from '~/internals/machines/sign-up';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignUpRouterCtx, useSignUpStartStep } from '~/react/sign-up/context';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SignUpStartProps = FormProps;\n\nexport const SignUpStartCtx = createContextFromActorRef<TSignUpStartMachine>('SignUpStartCtx');\n\nexport function SignUpStart(props: SignUpStartProps) {\n  const routerRef = SignUpRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:start');\n\n  return activeState ? <SignUpStartInner {...props} /> : null;\n}\n\nfunction SignUpStartInner(props: SignUpStartProps) {\n  const ref = useSignUpStartStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignUpStartCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignUpStartCtx.Provider>\n  );\n}\n","import type {\n  SignUpVerificationFriendlyTags,\n  SignUpVerificationTags,\n  TSignUpVerificationMachine,\n} from '~/internals/machines/sign-up';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignUpRouterCtx, useSignUpVerificationStep } from '~/react/sign-up/context';\n\nimport { createContextFromActorRef } from '../utils/create-context-from-actor-ref';\n\nexport type SignUpVerificationsProps = FormProps;\n\nexport const SignUpVerificationCtx = createContextFromActorRef<TSignUpVerificationMachine>('SignUpVerificationCtx');\n\n/**\n * Renders its children when the user is in the verification step of the sign-up flow. This happens after the user has signed up but before their account is active & verified.\n * @example\n * import { SignUp, Step, Strategy } from \"@clerk/elements/sign-up\"\n *\n * export default SignUpPage = () => (\n *  <SignUp>\n *    <Step name=\"verifications\">\n *      <Strategy name=\"email_link\">\n *        Please check your email for a verification link.\n *      </Strategy>\n *    </Step>\n *  </SignUp>\n * )\n */\nexport function SignUpVerifications(props: SignUpVerificationsProps) {\n  const ref = SignUpRouterCtx.useActorRef();\n  const activeState = useActiveTags(ref, 'route:verification');\n\n  return activeState ? <SignUpVerifyInner {...props} /> : null;\n}\n\nfunction SignUpVerifyInner(props: SignUpVerificationsProps) {\n  const ref = useSignUpVerificationStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignUpVerificationCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignUpVerificationCtx.Provider>\n  );\n}\n\nexport type SignUpStrategyProps = { name: SignUpVerificationFriendlyTags; children: React.ReactNode };\n\n/**\n * Conditionally render its children depending on the authentication strategy that needs to be verified. Does not render any markup on its own.\n *\n * @param {string} name - The name of the strategy for which its children will be rendered.\n *\n * @example\n * <SignUp.Strategy name=\"email_code\">\n *  <Clerk.Field name=\"code\">\n *    <Clerk.Label>Code</Clerk.Label>\n *    <Clerk.Input />\n *    <Clerk.FieldError />\n *  </Clerk.Field>\n *  <SignUp.Action submit>Verify</SignUp.Action>\n * </SignUp.Strategy>\n */\nexport function SignUpStrategy({ children, name: tag }: SignUpStrategyProps) {\n  const ref = SignUpVerificationCtx.useActorRef(true);\n\n  if (!ref) {\n    throw new Error(\n      '<Strategy> used outside of <SignUp>. Did you mean to `import { Strategy } from \"@clerk/elements/sign-in\"` instead?',\n    );\n  }\n\n  const { active } = useActiveTags(ref, [\n    `verification:${tag}`,\n    `verification:category:${tag}`,\n  ] as unknown as SignUpVerificationTags[]);\n\n  return active ? <>{children}</> : null;\n}\n","import * as React from 'react';\n\nimport type { FormSubmitProps } from '~/react/common';\nimport { Submit } from '~/react/common';\n\nimport type { SignUpNavigateProps } from './navigate';\nimport { SignUpNavigate } from './navigate';\nimport type { SignUpResendProps } from './resend';\nimport { SignUpResend } from './resend';\n\nexport type SignUpActionProps = { asChild?: boolean } & FormSubmitProps &\n  (\n    | ({\n        navigate: SignUpNavigateProps['to'];\n        resend?: never;\n        submit?: never;\n      } & Omit<SignUpNavigateProps, 'to'>)\n    | { navigate?: never; resend?: never; submit: true }\n    | ({ navigate?: never; resend: true; submit?: never } & SignUpResendProps)\n  );\n\n/**\n * Perform various actions during the sign-in process. This component is used to navigate between steps, submit the form, or resend a verification codes.\n *\n * @param {boolean} [submit] - If `true`, the action will submit the form.\n * @param {string} [navigate] - The name of the step to navigate to.\n * @param {boolean} [resend] - If `true`, the action will resend the verification code for the currently active strategy, if applicable.\n * @param {Function} [fallback] - Only used when `resend` is `true`. If provided, the fallback markup will be rendered before the resend delay has expired.\n *\n * @example\n * <SignUp.Action navigate=\"start\">Go Back</SignUp.Action>\n *\n * @example\n * <SignUp.Action submit>Sign Up</SignUp.Action>\n *\n * @example\n * <SignUp.Action resend>Resend</SignUp.Action>\n */\n\nexport const SignUpAction = React.forwardRef<React.ElementRef<'button'>, SignUpActionProps>((props, forwardedRef) => {\n  const { submit, navigate, resend, ...rest } = props;\n  let Comp: React.ForwardRefExoticComponent<any> | undefined;\n\n  if (submit) {\n    Comp = Submit;\n  } else if (navigate) {\n    Comp = SignUpNavigate;\n  } else if (resend) {\n    Comp = SignUpResend;\n  }\n\n  return Comp ? (\n    <Comp\n      to={navigate}\n      {...rest}\n      ref={forwardedRef}\n    />\n  ) : null;\n});\n\nSignUpAction.displayName = 'SignUpAction';\n","// Mark as a client-only package. This will error if you try to import it in a React Server Component.\nimport 'client-only';\n\nexport { Field, FieldError, FieldState, GlobalError, Input, Label, Submit } from '~/react/common/form';\nexport { Connection, Icon } from '~/react/common/connections';\nexport { Loading } from '~/react/common/loading';\n\nexport type {\n  FormFieldErrorProps,\n  FormErrorProps,\n  FormErrorRenderProps,\n  FormFieldProps,\n  FormGlobalErrorProps,\n  FormInputProps,\n  FormProps,\n  FormSubmitProps,\n} from '~/react/common/form';\nexport type { ConnectionProps, IconProps } from '~/react/common/connections';\nexport type { OTPInputSegmentStatus } from '~/react/common/form/otp';\n","import { Slot } from '@radix-ui/react-slot';\nimport * as React from 'react';\n\nimport { SignUpRouterCtx } from '~/react/sign-up/context';\n\nconst SIGN_UP_NAVIGATE_NAME = 'SignInNavigate';\nconst SignUpNavigationEventMap = {\n  start: `NAVIGATE.START`,\n  previous: `NAVIGATE.PREVIOUS`,\n} as const;\n\nexport type SignUpNavigateElementKey = keyof typeof SignUpNavigationEventMap;\n\nexport type SignUpNavigateElement = React.ElementRef<'button'>;\nexport type SignUpNavigateProps = {\n  asChild?: boolean;\n  to: SignUpNavigateElementKey;\n  children: React.ReactNode;\n};\n\n/**\n * Renders a button which will navigate to a different step in the sign-up flow.\n *\n * @param {SignUpNavigateElementKey} to - The step to navigate to.\n * @param {boolean} [asChild] - When `true`, the component will render its child and passes all props to it.\n *\n * @example\n * <Navigate to=\"start\">\n *    Start over...\n * </Navigate>\n */\nexport const SignUpNavigate = React.forwardRef<SignUpNavigateElement, SignUpNavigateProps>(\n  ({ asChild, to, ...rest }, forwardedRef) => {\n    const actorRef = SignUpRouterCtx.useActorRef();\n\n    const Comp = asChild ? Slot : 'button';\n    const defaultProps = asChild ? {} : { type: 'button' as const };\n\n    const sendEvent = React.useCallback(() => {\n      const type = SignUpNavigationEventMap[to];\n\n      if (actorRef.getSnapshot().can({ type })) {\n        actorRef.send({ type });\n      } else {\n        console.warn('Invalid navigation event.'); // TODO: Add better handling\n      }\n    }, [actorRef, to]);\n\n    return (\n      <Comp\n        {...defaultProps}\n        {...rest}\n        onClick={sendEvent}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nSignUpNavigate.displayName = SIGN_UP_NAVIGATE_NAME;\n","import { Slot } from '@radix-ui/react-slot';\nimport { useSelector } from '@xstate/react';\nimport * as React from 'react';\n\nimport { SignUpVerificationCtx } from '../verifications';\n\nexport type SignUpResendElement = React.ElementRef<'button'>;\nexport type SignUpResendFallbackProps = {\n  resendable: boolean;\n  resendableAfter: number;\n};\nexport type SignUpResendProps = {\n  asChild?: boolean;\n  children: React.ReactNode;\n  /**\n   * A fallback component to render when the resend action is not available.\n   * This can be a React element or a function that receives the `resendableAfter` prop.\n   */\n  fallback?: React.ReactNode | ((props: SignUpResendFallbackProps) => React.ReactNode);\n};\n\nconst SIGN_UP_RESEND_NAME = 'SignUpResend';\n\n/**\n * Resend verification codes during the sign-in process.\n * This component must be used within the <Step name=\"verifications\">.\n *\n * @note This component is not intended to be used directly. Instead, use the <Action resend> component.\n *\n * @example\n * import { Action } from '@clerk/elements/sign-in';\n * <Action resend fallback={({ resendableAfter }) => <p>Resendable in: {resendableAfter}s</p>}>Resend</Action>;\n */\nexport const SignUpResend = React.forwardRef<SignUpResendElement, SignUpResendProps>(\n  ({ asChild, fallback, ...rest }, forwardedRef) => {\n    const ref = SignUpVerificationCtx.useActorRef(true);\n\n    if (!ref) {\n      throw new Error('The resend action must be used within <SignUp.Step name=\"verifications\">.');\n    }\n\n    const fallbackProps: SignUpResendFallbackProps = useSelector(\n      ref,\n      state => ({\n        resendable: state.context.resendable,\n        resendableAfter: state.context.resendableAfter,\n      }),\n      (a, b) => a.resendableAfter === b.resendableAfter && a.resendable === b.resendable,\n    );\n\n    if (fallback && !fallbackProps.resendable) {\n      return typeof fallback === 'function' ? fallback(fallbackProps) : fallback;\n    }\n\n    const Comp = asChild ? Slot : 'button';\n    const defaultProps = asChild ? {} : { type: 'button' as const };\n\n    return (\n      <Comp\n        {...defaultProps}\n        {...rest}\n        disabled={!fallbackProps.resendable}\n        onClick={() => ref.send({ type: 'RETRY' })}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n\nSignUpResend.displayName = SIGN_UP_RESEND_NAME;\n","import { Slot } from '@radix-ui/react-slot';\nimport * as React from 'react';\n\nimport { CAPTCHA_ELEMENT_ID } from '~/internals/constants';\nimport { ClerkElementsRuntimeError } from '~/internals/errors';\n\nimport { SignUpStartCtx } from './start';\n\nexport type SignUpCaptchaElement = React.ElementRef<'div'>;\n\ntype CaptchaElementProps = Omit<\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\n  'id' | 'children'\n>;\n\nexport type SignUpCaptchaProps =\n  | ({\n      asChild: true;\n      /* Must only be a self-closing element/component */\n      children: React.ReactElement;\n    } & CaptchaElementProps)\n  | ({ asChild?: false; children?: undefined } & CaptchaElementProps);\n\n/**\n * The `<SignUp.Captcha>` component is used to render the Cloudflare Turnstile widget. It must be used within the `<SignUp.Step name=\"start\">` component.\n *\n * If utilizing the `asChild` prop, the component must be a self-closing element or component. Any children passed to the immediate child component of <SignUp.Captcha> will be ignored.\n *\n * @param {boolean} [asChild] - If true, `<Captcha />` will render as its child element, passing along any necessary props.\n *\n * @example\n * <SignUp.Root>\n *   <SignUp.Step name=\"start\">\n *     <SignUp.Captcha />\n *     <Clerk.Action submit>Sign Up</Clerk.Action>\n *   </SignUp.Step>\n * </SignUp.Root>\n *\n * @example\n * <SignUp.Root>\n *   <SignUp.Step name=\"start\">\n *     <SignUp.Captcha asChild>\n *       <aside/>\n *     </SignUp.Captcha>\n *     <Clerk.Action submit>Sign Up</Clerk.Action>\n *   </SignUp.Step>\n * </SignUp.Root>\n */\n\nexport const SignUpCaptcha = React.forwardRef<SignUpCaptchaElement, SignUpCaptchaProps>(\n  ({ asChild, children, ...rest }, forwardedRef) => {\n    const ref = SignUpStartCtx.useActorRef(true);\n\n    if (!ref) {\n      throw new ClerkElementsRuntimeError('<Captcha> must be used within the <SignUp.Step name=\"start\"> component.');\n    }\n\n    const Comp = asChild ? Slot : 'div';\n\n    return (\n      <Comp\n        id={CAPTCHA_ELEMENT_ID}\n        {...rest}\n        ref={forwardedRef}\n      />\n    );\n  },\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,sBAAO;;;ACDP,IAAAC,sBAAoD;AACpD,IAAAC,oBAAsC;AACtC,IAAAC,gBAA4B;AAC5B,IAAAA,gBAA0B;AAC1B,IAAAC,iBAA4B;;;ACJrB,IAAM,0BAA0B;AAChC,IAAM,+BAA+B;AAD5C;AAGO,IAAM,6BACX,mBAAQ,IAAI,sBAAZ,YAAiC,QAAQ,IAAI,kCAA7C,YAA8E;AAJhF,IAAAC,KAAAC;AAKO,IAAM,6BACXA,OAAAD,MAAA,QAAQ,IAAI,sBAAZ,OAAAA,MAAiC,QAAQ,IAAI,kCAA7C,OAAAC,MAA8E;AAIzE,IAAM,sCAAsC;AAE5C,IAAM,gBAAgB;AAAA,EAC3B,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,UAAU;AACZ;AAEO,IAAM,+BAA+B;AAErC,IAAM,qBAAqB;AAG3B,IAAM,cAAc;AAAA,EACzB,2BAA2B;AAAA,EAC3B,yBAAyB;AAAA,EACzB,2BAA2B;AAAA,EAC3B,wBAAwB;AAAA,EACxB,qBAAqB;AAAA,EACrB,qCAAqC;AAAA,EACrC,oBAAoB;AAAA,EACpB,6BAA6B;AAAA,EAC7B,aAAa;AACf;AAEO,IAAM,UAAU;AAAA,EACrB,MAAM;AAAA,EACN,SAAS;AACX;;;AC7CA,mBAAmC;;;ACAnC,mBAA6B;AAC7B,wBAA6B;AAE7B,oBAA8C;;;ACDvC,IAAe,yBAAf,cAA8C,MAAM;AAAA,EAKzD,YACW,MACT,SACA;AACA,UAAM,OAAO;AAHJ;AALX,sBAAa;AACb,8BAAqB;AASnB,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,WAAW;AACT,WAAO,IAAI,KAAK,IAAI;AAAA,QAAY,KAAK,IAAI;AAAA,WAAc,KAAK,OAAO;AAAA,EACrE;AACF;AAEO,IAAM,qBAAN,MAAM,4BAA2B,uBAAuB;AAAA,EAC7D,OAAO,aAAa,OAAsB;AACxC,WAAO,IAAI,oBAAmB,MAAM,MAAM,MAAM,eAAe,MAAM,OAAO;AAAA,EAC9E;AAAA,EAEA,YAAY,MAAc,SAAiB;AACzC,UAAM,MAAM,OAAO;AACnB,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,4BAAN,cAAwC,uBAAuB;AAAA,EACpE,YAAY,SAAiB;AAC3B,UAAM,0BAA0B,OAAO;AACvC,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,0BAAN,MAAM,iCAAgC,uBAAuB;AAAA,EAKlE,YAAY,MAAc,SAAiB;AACzC,UAAM,MAAM,OAAO;AAYrB,mBAAU,MAAM;AAXd,SAAK,OAAO;AAAA,EACd;AAAA,EAPA,OAAO,aAAa,OAAsB;AACxC,WAAO,IAAI,yBAAwB,MAAM,MAAM,MAAM,eAAe,MAAM,OAAO;AAAA,EACnF;AAAA,EAOA,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,aAAa;AACf,WAAO;AAAA,EACT;AAGF;;;ADDO,IAAM,kBAAc,qBAAM;AAAA,EAC/B,SAAS;AAAA,IACP,qBAAiB,sBAAO;AAAA,MACtB,QAAQ,CAAC,GAAG,WAA6C,CAAC,GAAG,OAAO,MAAM;AAAA,IAC5E,CAAC;AAAA,IACD,sBAAkB,sBAAO;AAAA,MACvB,QAAQ,CAAC,EAAE,QAAQ,GAAG,WAAoD;AACxE,YAAI,CAAC,OAAO,MAAM;AAChB,gBAAM,IAAI,MAAM,wBAAwB;AAAA,QAC1C;AAEA,YAAI,QAAQ,OAAO,IAAI,OAAO,IAAI,GAAG;AAEnC,kBAAQ,OAAO,IAAI,OAAO,IAAI,EAAG,WAAW,OAAO;AAAA,QACrD;AAEA,eAAO,QAAQ;AAAA,MACjB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO,CAAC;AACV,CAAC,EAAE,cAAc;AAAA,EACf,IAAI;AAAA,EACJ,SAAS,OAAO;AAAA,IACd,eAAe,oBAAI,IAAI;AAAA,IACvB,QAAQ,CAAC;AAAA,IACT,QAAQ,oBAAI,IAAI;AAAA,IAChB,aAAa;AAAA,EACf;AAAA,EACA,IAAI;AAAA,IACF,cAAc;AAAA,MACZ,aAAS,8BAAe,CAAC,EAAE,SAAS,MAAM,MAAM;AAzFtD,YAAAC,KAAAC;AA0FQ,gBAAI,2BAAa,MAAM,KAAK,GAAG;AAC7B,gBAAM,SAAoD,CAAC;AAC3D,gBAAM,eAAqC,CAAC;AAE5C,qBAAW,SAAS,MAAM,MAAM,UAAU,CAAC,MAAM,KAAK,GAAG;AACvD,kBAAM,WAAO,iCAAaD,MAAA,MAAM,SAAN,gBAAAA,IAAY,SAAS;AAE/C,gBAAI,CAAC,MAAM;AACT,2BAAa,KAAK,mBAAmB,aAAa,KAAK,CAAC;AACxD;AAAA,YACF,WAAW,CAAC,OAAO,IAAI,GAAG;AACxB,qBAAO,IAAI,IAAI,CAAC;AAAA,YAClB;AAEA,aAAAC,MAAA,OAAO,IAAI,MAAX,gBAAAA,IAAc,KAAK,wBAAwB,aAAa,KAAK;AAAA,UAC/D;AAEA,kBAAQ;AAAA,YACN,MAAM;AAAA,YACN,QAAQ;AAAA,cACN,QAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAED,qBAAW,SAAS,QAAQ;AAC1B,oBAAQ;AAAA,cACN,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,UAAU;AAAA,kBACR,MAAM;AAAA,kBACN,SAAS,OAAO,KAAK,EAAE,CAAC;AAAA,gBAC1B;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,gBAAgB;AAAA,MACd,aAAS,sBAAO;AAAA,QACd,QAAQ,MAAM,CAAC;AAAA,MACjB,CAAC;AAAA,IACH;AAAA,IACA,aAAa;AAAA,MACX,aAAS,sBAAO;AAAA,QACd,QAAQ,CAAC,EAAE,SAAS,MAAM,MAAM;AAC9B,cAAI,CAAC,MAAM,MAAM,MAAM;AACrB,kBAAM,IAAI,MAAM,wBAAwB;AAAA,UAC1C;AAEA,gBAAM,MAAM,QAAQ,MAAM,MAAM,SAAS,QAAQ,cAAc,IAAI,MAAM,MAAM,IAAI,KAAK;AAExF,kBAAQ,OAAO,IAAI,MAAM,MAAM,MAAM,MAAM,KAAK;AAChD,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,gBAAgB;AAAA,MACd,aAAS,sBAAO;AAAA,QACd,QAAQ,CAAC,EAAE,SAAS,MAAM,MAAM;AAC9B,cAAI,CAAC,MAAM,MAAM,MAAM;AACrB,kBAAM,IAAI,MAAM,wBAAwB;AAAA,UAC1C;AAEA,cAAI,QAAQ,OAAO,IAAI,MAAM,MAAM,IAAI,GAAG;AAExC,oBAAQ,OAAO,IAAI,MAAM,MAAM,IAAI,EAAG,QAAQ,MAAM,MAAM;AAAA,UAC5D;AAEA,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,gBAAgB;AAAA,MACd,aAAS,sBAAO;AAAA,QACd,QAAQ,CAAC,EAAE,SAAS,MAAM,MAAM;AAC9B,cAAI,CAAC,MAAM,MAAM,MAAM;AACrB,kBAAM,IAAI,MAAM,wBAAwB;AAAA,UAC1C;AAEA,kBAAQ,OAAO,OAAO,MAAM,MAAM,IAAI;AACtC,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,sBAAsB;AAAA,MACpB,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,QAAQ,CAAC,EAAE,MAAM,MAAM,MAAM;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,IACA,wBAAwB;AAAA,MACtB,aAAS,sBAAO;AAAA,QACd,QAAQ,CAAC,EAAE,SAAS,MAAM,MAAM;AAC9B,cAAI,CAAC,MAAM,MAAM,MAAM;AACrB,kBAAM,IAAI,MAAM,wBAAwB;AAAA,UAC1C;AACA,cAAI,QAAQ,OAAO,IAAI,MAAM,MAAM,IAAI,GAAG;AAExC,oBAAQ,OAAO,IAAI,MAAM,MAAM,IAAI,EAAG,WAAW;AAAA,UACnD;AAEA,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,4BAA4B;AAAA,MAC1B,aAAS,sBAAO;AAAA,QACd,QAAQ,CAAC,EAAE,QAAQ,MAAM;AACvB,kBAAQ,OAAO,QAAQ,WAAS;AAC9B,kBAAM,WAAW;AAAA,UACnB,CAAC;AAED,iBAAO,QAAQ;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,qBAAqB;AAAA,MACnB,aAAS,sBAAO,CAAC,EAAE,MAAM,MAAM;AAC7B,cAAM,UAAU,IAAI,IAAI,MAAM,OAAO;AAErC,eAAO;AAAA,UACL,eAAe,MAAM;AAAA,UACrB,QAAQ,oBAAI,IAAI,CAAC,GAAG,MAAM,SAAS,OAAO,OAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,GAAG,MAAM,QAAQ,CAAC;AAAA,UACnF;AAAA,UACA,UAAU,IAAI,IAAI,MAAM,QAAQ;AAAA,UAChC,aAAa;AAAA,UACb,UAAU,IAAI,IAAI,MAAM,QAAQ;AAAA,QAClC;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,uBAAuB;AAAA,MACrB,aAAS,sBAAO;AAAA,QACd,eAAe,oBAAI,IAAI;AAAA,QACvB,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,aAAa;AAAA,QACb,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF;AACF,CAAC;;;AEtOM,IAAI;AAEX,IAAI,OAAS;AACX,aAAU,yBAAoB,MAApB,YAAyB,oBAAoB;AACzD;;;AHDA,IAAM,yBAAqB,iCAAmB,aAAa,EAAE,QAAQ,CAAC;AAE/D,IAAM,oBAAoB,mBAAmB;AAC7C,IAAM,eAAe,mBAAmB;AACxC,IAAM,kBAAkB,mBAAmB;AAK3C,IAAM,uBAAuB,CAAC,UAAyB,MAAM,QAAQ;AAKrE,IAAM,qBAAqB,CAAC,SAA6B,CAAC,UAAsB;AAtBvF,MAAAC;AAuBE,iBAAOA,MAAA,MAAM,QAAQ,OAAO,IAAI,IAAI,MAA7B,gBAAAA,IAAgC,QAAQ;AAAA;AAK1C,IAAM,wBAAwB,CAAC,SAA6B,CAAC,UAClE,QAAQ,mBAAmB,IAAI,EAAE,KAAK,CAAC;AAKlC,IAAM,wBAAwB,CAAC,SAA6B,CAAC,UAAsB;AAlC1F,MAAAA;AAmCE,iBAAOA,MAAA,MAAM,QAAQ,OAAO,IAAI,IAAI,MAA7B,gBAAAA,IAAgC,WAAW;AAAA;;;AInCpD,IAAAC,qBAA6B;AAG7B,IAAAC,iBAAmC;;;ACqC5B,SAAS,cAAc,EAAE,SAAS,MAAM,GAA6B;AAE1E,MAAI;AACJ,MAAI;AAKJ,MAAI,MAAM,KAAK,WAAW,cAAc,KAAK,MAAM,KAAK,WAAW,eAAe,GAAG;AACnF,WAAO,QAAQ,OAAO,KAAK;AAAA,MACzB,MAAM;AAAA,MACN,WAAW;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AAGA,MAAI,QAAQ,gBAAgB,YAAY;AACtC,WAAO;AAGP,QAAI,MAAM,SAAS,YAAY;AAC7B,iBAAW,MAAM,OAAO;AAAA,IAC1B;AAEA,WAAO,QAAQ,OAAO,KAAK;AAAA,MACzB,MAAM;AAAA,MACN,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,WAAW,QAAQ,gBAAgB,YAAY;AAC7C,WAAO;AACP,eAAW;AAEX,WAAO,QAAQ,OAAO,KAAK;AAAA,MACzB,MAAM;AAAA,MACN,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,WAAW,QAAQ,gBAAgB,kBAAkB;AACnD,WAAO;AACP,eAAW;AAEX,WAAO,QAAQ,OAAO,KAAK;AAAA,MACzB,MAAM;AAAA,MACN,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,OAAO;AACL,WAAO,QAAQ;AACf,eAAW;AAEX,WAAO,QAAQ,OAAO,KAAK;AAAA,MACzB,MAAM;AAAA,MACN,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACnGA,IAAM,uBAAuB,CAAC,aAAa,YAAY,gBAAgB,YAAY,YAAY,aAAa;AAI5G,IAAM,aAAa,IAAI,IAA0B,oBAAoB;AAErE,SAAS,cAA8C,KAAuB;AAC5E,SAAO,WAAW,IAAI,GAAQ;AAChC;AAEO,SAAS,qBACd,QAC+B;AAC/B,QAAM,SAA6B,CAAC;AAEpC,SAAO,QAAQ,CAAC,EAAE,MAAM,GAAG,QAAQ;AACjC,QAAI,cAAc,GAAG,KAAK,UAAU,QAAW;AAC7C,aAAO,GAAG,IAAI;AAAA,IAChB;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;ACZO,SAAS,sBAAiC,OAAyD;AACxG,MAAI,WAAW,UAAU,OAAO;AAC9B,UAAM,IAAI,MAAM,iCAAiC,MAAM,IAAI,GAAG;AAAA,EAChE;AACF;;;AHFO,IAAM,0BAA0B;AAEhC,IAAM,4BAAwB,sBAAM;AAAA,EACzC,QAAQ;AAAA,IACN,aAAS;AAAA,MACP,CAAC,EAAE,OAAO,EAAE,QAAQ,OAAO,EAAE,MAAM;AACjC,cAAM,SAAS,qBAAqB,MAAM;AAC1C,eAAO,OAAO,YAAY,EAAE,QAAQ,MAAM,OAAO,OAAO,OAAO,MAAM;AAAA,MACvE;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,eAAe,CAAC,EAAE,SAAS,MAAM,MAAM;AACrC,4BAAsB,KAAK;AAC3B,cAAQ,QAAQ,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAAA,IACA,uBAAuB,CAAC,EAAE,QAAQ,MAAM;AACtC,YAAM,SAAS,QAAQ,OAAO,YAAY,EAAE,QAAQ,MAAM,OAAO;AAEjE,YAAM,UAAU,OAAO,cAAc,IAAI,+BAAY;AACrD,YAAM,WAAW,OAAO,eAAe,IAAI,+BAAY;AACvD,YAAM,WAAW,OAAO,eAAe,IAAI,+BAAY;AAEvD,YAAM,yBAA4C,oBAAI,IAAI;AAE1D,iBAAW,OAAO,SAAS,OAAO,QAAQ,GAA+B;AACvE,YAAI,OAAO,QAAQ;AAEjB,iCAAuB,IAAI,KAAK,OAAO,GAAG,CAAC;AAAA,QAC7C;AAAA,MACF;AAEA,cAAQ,QAAQ,KAAK;AAAA,QACnB,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,eAAe;AAAA,MACjB,CAAC;AAAA,IACH;AAAA,IACA,yBAAyB,CAAC,EAAE,QAAQ,MAAM,QAAQ,QAAQ,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAAA,IAChG,YAAY,CAAC,EAAE,SAAS,MAAM,MAC5B,QAAQ,OAAO,KAAK,EAAE,MAAM,QAAQ,UAAW,MAAoD,OAAO,CAAC;AAAA,IAC7G;AAAA,EACF;AAAA,EACA,OAAO,CAAC;AACV,CAAC,EAAE,cAAc;AAAA,EACf,IAAI;AAAA,EACJ,SAAS,CAAC,EAAE,MAAM,OAAO;AAAA,IACvB,UAAU,MAAM,YAAY;AAAA,IAC5B,SAAS,MAAM;AAAA,IACf,QAAQ,MAAM;AAAA,IACd,aAAa;AAAA,EACf;AAAA,EACA,OAAO;AAAA,EACP,QAAQ;AAAA,IACN,SAAS;AAAA,EACX;AAAA,EACA,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,SAAS;AAAA,MACP,MAAM,CAAC,eAAe;AAAA,MACtB,aAAa;AAAA,MACb,IAAI;AAAA,QACF,QAAQ;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV,MAAM,CAAC,oBAAoB,eAAe;AAAA,MAC1C,OAAO;AAAA,MACP,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,UACvB,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ,QAAQ,YAAY,EAAE,QAAQ;AAAA,QAChD;AAAA,QACA,QAAQ;AAAA,UACN,SAAS,CAAC,cAAc,eAAe;AAAA,QACzC;AAAA,QACA,SAAS;AAAA,UACP,SAAS,CAAC,iBAAiB,eAAe;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;AI7GD,iBAAwB;AAGxB,IAAAC,iBAAgF;;;ACKhF,IAAAC,iBAA0C;;;ACKnC,SAAS,eACd,UACA,OACuB;AACvB,SAAO,OAAO,OAAO,QAAQ,EAAE,SAAS,KAAY;AACtD;AAKO,IAAM,yBAAyD;AAAA,EACpE,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,SAAS;AAAA,EACT,eAAe;AAAA,EACf,QAAQ;AAAA,EACR,cAAc;AAChB;AAEO,SAAS,yBAAyB,OAAiD;AACxF,SAAO,eAAe,wBAAwB,KAAiC;AACjF;;;ADRO,IAAM,eAAW;AAAA,EACtB,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,OAAO,EAAE,MAAM;AAC7C,UAAM,QAAqB,OAAO,YAAY,EAAE,QAAQ;AAExD,WAAO,MAAM,OAAO,IAAI,EAAE,yBAAyB;AAAA,MACjD,aAAa,MAAM,iBAAiB,OAAO,eAAe,GAAG;AAAA,MAC7D,qBAAqB,MAAM,iBAAiB,OAAO,uBAAuB,GAAG;AAAA,MAC7E,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AACF;AAYO,IAAM,6BAAyB;AAAA,EACpC,CAAC,EAAE,UAAU,OAAO,OAAO,MAAM;AAlDnC,QAAAC;AAmDI,UAAM,QAAqB,OAAO,YAAY,EAAE,QAAQ;AACxD,UAAM,iBAAgBA,MAAA,MAAM,4BAAN,gBAAAA,IAA+B;AAErD,UAAM,iBAAiB,CAAC,UAAkB;AACxC,YAAM,KAAK,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC;AAEvC,UAAI,yBAAyB,EAAE,GAAG;AAEhC,iBAAS,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB,WAAW,QAAO,+CAAe,YAAW;AAE1C,iBAAS,EAAE,MAAM,uBAAuB,OAAO,CAAC;AAAA,MAClD,WAAW,QAAO,+CAAe,YAAW;AAE1C,iBAAS,EAAE,MAAM,uBAAuB,OAAO,CAAC;AAAA,MAClD,OAAO;AAEL,iBAAS,EAAE,MAAM,WAAW,OAAO,IAAI,0BAA0B,6BAA6B,EAAE,EAAE,EAAE,CAAC;AAAA,MACvG;AAEA,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAIA,UAAM,cAAc,MAAM;AAE1B,SAAK,YAAY;AAAA,MACf;AAAA,QACE,wBAAwB,uBAAuB;AAAA,QAC/C,2BAA2B,uBAAuB;AAAA,QAClD,wBAAwB,uBAAuB;AAAA,QAC/C,2BAA2B,uBAAuB;AAAA,QAClD,mBAAmB,uBAAuB;AAAA,QAC1C,gBAAgB,uBAAuB;AAAA,QACvC,kBAAkB,uBAAuB;AAAA,QACzC,iBAAiB,uBAAuB;AAAA,QACxC,uBAAuB,uBAAuB;AAAA,QAC9C,sBAAsB,uBAAuB;AAAA,QAC7C,WAAW,uBAAuB;AAAA,QAClC,WAAW,uBAAuB;AAAA,MACpC;AAAA,MACA;AAAA,IACF;AAEA,WAAO,MAAM;AAAA,EACf;AACF;;;AElGA,IAAAC,iBAA6D;AAQtD,IAAM,sBAAsB;AAI5B,IAAM,wBAAoB,sBAAM;AAAA,EACrC,QAAQ;AAAA,IACN;AAAA,IACA;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,cAAU,oBAAI,CAAC,EAAE,MAAM,MAAM,UAAU,MAAM,IAAI,EAAE;AAAA,IACnD,0BAAsB,uBAAO;AAAA,MAC3B,gBAAgB,CAAC,EAAE,MAAM,MAAM;AAC7B,wCAAY,OAAO,UAAU;AAC7B,eAAO,MAAM,OAAO;AAAA,MACtB;AAAA,IACF,CAAC;AAAA,IACD,4BAAwB,uBAAO;AAAA,MAC7B,gBAAgB;AAAA,IAClB,CAAC;AAAA,IACD,YAAY,CAAC,EAAE,QAAQ,MAAM,QAAQ,OAAO,KAAK,EAAE,MAAM,OAAO,CAAC;AAAA,IACjE;AAAA,IACA,mBAAe;AAAA,MACb,CAAC,EAAE,QAAQ,MAAM,QAAQ;AAAA,MACzB,CAAC,EAAE,MAAM,MAAM;AACb,8BAAsB,KAAK;AAC3B,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,MAAM;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,eAAe,CAAC,EAAE,QAAQ,MAAM,QAAQ,QAAQ,OAAO,YAAY,EAAE,QAAQ,WAAW;AAAA,EAC1F;AAAA,EACA,OAAO,CAAC;AACV,CAAC,EAAE,cAAc;AAAA,EACf,IAAI;AAAA,EACJ,SAAS,CAAC,EAAE,MAAM,OAAO;AAAA,IACvB,gBAAgB;AAAA,IAChB,UAAU,MAAM;AAAA,IAChB,SAAS,MAAM;AAAA,IACf,MAAM,MAAM;AAAA,IACZ,QAAQ,MAAM;AAAA,IACd,aAAa;AAAA,EACf;AAAA,EACA,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ,aAAa;AAAA,MACb,IAAI;AAAA,QACF,UAAU;AAAA,QACV,UAAU;AAAA,UACR,WAAO,oBAAI,eAAe;AAAA,UAC1B,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACA,aAAa;AAAA,MACX,aAAa;AAAA,MACb,MAAM,CAAC,kBAAkB,eAAe;AAAA,MACxC,OAAO,CAAC,wBAAwB,eAAe;AAAA,MAC/C,MAAM,CAAC,0BAA0B,eAAe;AAAA,MAChD,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,SAAS,MAAM,MAAM;AAC7B,0CAAY,OAAO,UAAU;AAE7B,iBAAO;AAAA,YACL,UAAU,QAAQ;AAAA,YAClB,MAAM,QAAQ;AAAA,YACd,QAAQ,MAAM;AAAA,YACd,QAAQ,QAAQ;AAAA,UAClB;AAAA,QACF;AAAA,QACA,SAAS;AAAA,UACP,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA,kBAAkB;AAAA,MAChB,aAAa;AAAA,MACb,MAAM,CAAC,kBAAkB,eAAe;AAAA,MACxC,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ;AAAA,QAChC,SAAS;AAAA,UACP,SAAS,CAAC,YAAY,eAAe;AAAA,UACrC,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,IAAI;AAAA,QACF,sBAAsB;AAAA,UACpB,SAAS;AAAA,UACT,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;AC9GM,SAAS,0BAA0B;AACxC,MAAI,OAAO,WAAW,aAAa;AACjC,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,OAAO,MAAM;AAChB,WAAO;AAAA,EACT;AAEA,SAAO,OAAO,KAAK,UAAU;AAC/B;;;ACXA,IAAAC,iBAAgD;AAczC,IAAM,uBAAuB;AAE7B,IAAM,yBAAqB,sBAAM;AAAA,EACtC,QAAQ;AAAA,IACN,aAAS;AAAA,MACP,CAAC,EAAE,OAAO,EAAE,QAAQ,OAAO,EAAE,MAAM;AACjC,cAAM,SAAS,qBAAqB,MAAM;AAC1C,eAAO,OAAO,YAAY,EAAE,QAAQ,MAAM,OAAO,OAAO,OAAO,MAAM;AAAA,MACvE;AAAA,IACF;AAAA,IACA,YAAY;AAAA,EACd;AAAA,EACA,SAAS;AAAA,IACP,YAAY,CAAC,EAAE,QAAQ,MAAM,QAAQ,OAAO,KAAK,EAAE,MAAM,OAAO,CAAC;AAAA,IACjE;AAAA,IACA,mBAAe;AAAA,MACb,CAAC,EAAE,QAAQ,MAAM,QAAQ;AAAA,MACzB,CAAC,EAAE,MAAM,MAAM;AACb,8BAAsB,KAAK;AAC3B,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,MAAM;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,eAAe,CAAC,EAAE,QAAQ,MAAM,QAAQ,QAAQ,OAAO,YAAY,EAAE,QAAQ,WAAW;AAAA,EAC1F;AAAA,EACA,OAAO,CAAC;AACV,CAAC,EAAE,cAAc;AAAA,EACf,IAAI;AAAA,EACJ,SAAS,CAAC,EAAE,MAAM,OAAO;AAAA,IACvB,UAAU,MAAM,YAAY;AAAA,IAC5B,SAAS,MAAM;AAAA,IACf,QAAQ,MAAM;AAAA,IACd,aAAa;AAAA,EACf;AAAA,EACA,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,SAAS;AAAA,MACP,MAAM,CAAC,eAAe;AAAA,MACtB,aAAa;AAAA,MACb,IAAI;AAAA,QACF,QAAQ;AAAA,UACN,WAAO,oBAAI,eAAe;AAAA,UAC1B,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV,MAAM,CAAC,oBAAoB,eAAe;AAAA,MAC1C,OAAO;AAAA,MACP,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,UACvB,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ,QAAQ,YAAY,EAAE,QAAQ;AAAA,QAChD;AAAA,QACA,QAAQ;AAAA,UACN,SAAS,CAAC,cAAc,eAAe;AAAA,QACzC;AAAA,QACA,SAAS;AAAA,UACP,SAAS,CAAC,iBAAiB,eAAe;AAAA,UAC1C,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;ACtFD,oBAAuB;AAWvB,IAAAC,iBAA8G;;;AC6DvG,IAAM,2BAA2B;AAAA,EACtC,kBAAkB;AAAA;AAAA,EAClB,mBAAmB;AAAA;AACrB;;;ADnCO,IAAM,8BAA8B;AAE3C,IAAM,eAAe,CAAC,OAA8B,aAAoC;AACtF,QAAM,SAAwG;AAAA,IAC5G;AAAA,MACE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,UAAU;AACZ,WAAO,KAAK;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,WAAW;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAEA,aAAO,oBAAI,MAAM;AACnB;AASO,IAAM,gCAA4B,sBAAM;AAAA,EAC7C,QAAQ;AAAA,IACN,aAAS;AAAA,MAAsD,CAAC,EAAE,OAAO,EAAE,QAAQ,OAAO,EAAE,MAC1F,OAAO,YAAY,EAAE,QAAQ,MAAM,OAAO,OAAO,oBAAoB,MAAM;AAAA,IAC7E;AAAA,IACA,aAAS;AAAA,MAAsD,OAAO,EAAE,OAAO,EAAE,QAAQ,OAAO,EAAE,MAChG,OAAO,YAAY,EAAE,QAAQ,MAAM,OAAO,OAAO,oBAAoB,MAAM;AAAA,IAC7E;AAAA,IACA,kCAA8B;AAAA,MAC5B,CAAC,EAAE,SAAS,UAAU,OAAO,EAAE,OAAO,EAAE,MAAM;AAC5C,cAAM,EAAE,KAAK,KAAK,QAAI,sBAAO;AAE7B,cAAM,QAAQ,OAAO,YAAY,EAAE,QAAQ;AAE3C,aAAK;AAAA,UAAI,YACP,MAAM,OAAO,OACV,OAAO,EACP,KAAK,cAAY;AAChB,kBAAM,eAAe,SAAS;AAC9B,kBAAM,qBAAqB,SAAS,cAAc,aAAa;AAG/D,gBAAI,iBAAiB,YAAY;AAC/B,qBAAO,SAAS,EAAE,MAAM,uBAAuB,SAAS,CAAC;AAAA,YAC3D;AAEA,oBAAQ,oBAAoB;AAAA,cAC1B,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK,WAAW;AACd,yBAAS,EAAE,MAAM,cAAc,mBAAmB,YAAY,CAAC,IAAI,SAAS,CAAC;AAC7E;AAAA,cACF;AAAA,cACA,KAAK,UAAU;AACb,yBAAS;AAAA,kBACP,MAAM;AAAA,kBACN,OAAO,IAAI,mBAAmB,kCAAkC,2BAA2B;AAAA,kBAC3F;AAAA,gBACF,CAAC;AACD;AAAA,cACF;AAAA,cACA,KAAK;AAAA,cACL;AACE;AAAA,YACJ;AAEA,iBAAK;AAAA,UACP,CAAC,EACA,MAAM,WAAS;AACd,iBAAK;AACL,gBAAI,0BAA0B,KAAK;AAAA,UACrC,CAAC;AAAA,QACL;AAEA,gBAAQ,WAAS;AACf,cAAI,MAAM,SAAS,QAAQ;AACzB,iBAAK;AAAA,UACP;AAAA,QACF,CAAC;AAED,eAAO,MAAM,KAAK;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,oBAAgB,uBAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,MACvC,YAAY,QAAQ,oBAAoB;AAAA,MACxC,iBAAiB,QAAQ,kBAAkB,IAAI,QAAQ,kBAAkB,IAAI,QAAQ;AAAA,IACvF,EAAE;AAAA,IACF,qBAAiB,uBAAO;AAAA,MACtB,YAAY;AAAA,MACZ,iBAAiB;AAAA,IACnB,CAAC;AAAA,IACD;AAAA,IACA,mBAAe;AAAA,MACb,CAAC,EAAE,QAAQ,MAAM,QAAQ;AAAA,MACzB,CAAC,EAAE,MAAM,MAAM;AACb,8BAAsB,KAAK;AAC3B,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,MAAM;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,YAAY,CAAC,EAAE,QAAQ,MAAM,QAAQ,SAAS,WAAW;AAAA,IACzD,mBAAmB,CAAC,EAAE,SAAS,MAAM,GAAG,EAAE,MAAM,MAAwC;AACtF,UAAI,WAAW,QAAQ;AAEvB,WAAI,+BAAO,UAAS,UAAU,MAAM,UAAU;AAC5C,mBAAW,MAAM;AAAA,MACnB;AAEA,aAAO,SAAS,iBAAiB,SAAS,KAAK;AAAA,IACjD;AAAA,IACA,cAAc,CAAC,EAAE,QAAQ,MAAM,QAAQ,cAAc,QAAQ,oBAAoB;AAAA,IACjF,mBAAmB,CACjB,EAAE,QAAQ,GACV,EAAE,WAAW,SAAS,MACtB;AA5KN,UAAAC;AA6KM;AAAA,SACEA,MAAA,QAAQ,OACL,YAAY,EACZ,QAAQ,MAAM,4BAFjB,gBAAAA,IAE0C,aAAa,WAAW,WAAW,cAAc,SAAS;AAAA,MACtG;AAAA;AAAA,IACF,uBAAuB,aAAa,cAAc;AAAA,IAClD,uBAAuB,aAAa,iBAAiB,YAAY;AAAA,IACjE,uBAAuB,aAAa,iBAAiB,YAAY;AAAA,EACnE;AAAA,EACA,QAAQ;AAAA,EACR,OAAO,CAAC;AACV,CAAC,EAAE,cAAc;AAAA,EACf,IAAI;AAAA,EACJ,SAAS;AAAA,EACT,SAAS,CAAC,EAAE,MAAM,OAAO;AAAA,IACvB,UAAU,MAAM,YAAY;AAAA,IAC5B,aAAa;AAAA,IACb,SAAS,MAAM;AAAA,IACf,QAAQ,MAAM;AAAA,IACd,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,UAAU,MAAM,OAAO,YAAY,EAAE,QAAQ,MAAM,OAAO;AAAA,EAC5D;AAAA,EACA,IAAI;AAAA,IACF,MAAM;AAAA,MACJ;AAAA,QACE,OAAO;AAAA,QACP,aAAS,2BAAW,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,SAAS,EAAE;AAAA,MACjF;AAAA,MACA;AAAA,QACE,aAAa;AAAA,QACb,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,aAAa;AAAA,QACb,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,aAAa;AAAA,QACb,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,aAAS,2BAAW,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,SAAS,EAAE;AAAA,MACjF;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ,QAAQ;AAAA,QACN;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,aAAS,2BAAW,CAAC,EAAE,QAAQ,OAAO,EAAE,MAAM,QAAQ,UAAU,QAAQ,SAAS,EAAE;AAAA,QACrF;AAAA,MACF;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,MAAM,CAAC,6BAA6B,8BAA8B,yBAAyB;AAAA,MAC3F,SAAS;AAAA,MACT,IAAI;AAAA,QACF,sBAAsB;AAAA,UACpB,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,qBAAqB;AAAA,UACnB,SAAS;AAAA,YACP;AAAA,cACE,MAAM;AAAA,cACN,QAAQ,CAAC,EAAE,MAAM,OAA0D,EAAE,OAAO,MAAM,MAAM;AAAA,YAClG;AAAA,gBACA,uBAAO,EAAE,UAAU,CAAC,EAAE,MAAM,MAAM,MAAM,SAAS,CAAC;AAAA,UACpD;AAAA,UACA,QAAQ;AAAA,QACV;AAAA,QACA,gBAAgB;AAAA,UACd,aAAS,+BAAe,CAAC,EAAE,SAAS,MAAM,MAAM;AAC9C,gBAAI,MAAM,SAAS,sBAAsB;AACvC;AAAA,YACF;AAEA,oBAAQ,OAAO,EAAE,UAAU,MAAM,SAAS,CAAC;AAC3C,oBAAQ,MAAM,EAAE,MAAM,QAAQ,UAAU,MAAM,SAAS,CAAC;AAAA,UAC1D,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN,WAAW;AAAA,UACT,MAAM,CAAC,mBAAmB,eAAe;AAAA,UACzC,QAAQ;AAAA,YACN,IAAI;AAAA,YACJ,KAAK;AAAA,YACL,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,cACvB,QAAQ,QAAQ;AAAA,cAChB,QAAQ;AAAA,gBACN,UAAU;AAAA,gBACV,aAAa,QAAQ,OAClB,YAAY,EACZ,QAAQ,MAAM,iBAAiB,GAAG,QAAQ,QAAQ,GAAG,4BAA4B,EAAE;AAAA,cACxF;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,QAAQ;AAAA,cACR,aAAS,uBAAO,EAAE,UAAU,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC;AAAA,YAC3D;AAAA,YACA,SAAS;AAAA,cACP,SAAS;AAAA,cACT,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAAA,QACA,SAAS;AAAA,UACP,aAAa;AAAA,UACb,MAAM,CAAC,eAAe;AAAA,UACtB,IAAI;AAAA,YACF,MAAM;AAAA,YACN,OAAO;AAAA,UACT;AAAA,QACF;AAAA,QACA,YAAY;AAAA,UACV,MAAM,CAAC,kBAAkB;AAAA,UACzB,QAAQ;AAAA,YACN,IAAI;AAAA,YACJ,KAAK;AAAA,YACL,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,cACvB,QAAQ,QAAQ;AAAA,YAClB;AAAA,UACF;AAAA,UACA,OAAO;AAAA,YACL,kBAAkB;AAAA,cAChB,aAAa;AAAA,cACb,QAAQ;AAAA,cACR,aAAS,uBAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,SAAS;AAAA,gBAChD,MAAM;AAAA,gBACN,OAAO,IAAI,mBAAmB,6BAA6B,mCAAmC;AAAA,cAChG,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UACA,SAAS;AAAA,UACT,QAAQ;AAAA,YACN,YAAY;AAAA,cACV,aAAa;AAAA,YACf;AAAA,YACA,eAAe;AAAA,cACb,aAAa;AAAA,cACb,IAAI;AAAA,gBACF,OAAO;AAAA,kBACL,aAAS,oBAAI,CAAC,EAAE,QAAQ,MAAM,+BAA+B,QAAQ,eAAe,GAAG;AAAA,gBACzF;AAAA,cACF;AAAA,cACA,OAAO;AAAA,gBACL,mBAAmB;AAAA,kBACjB;AAAA,oBACE,aAAa;AAAA,oBACb,OAAO;AAAA,oBACP,SAAS;AAAA,oBACT,QAAQ;AAAA,kBACV;AAAA,kBACA;AAAA,oBACE,aAAa;AAAA,oBACb,SAAS;AAAA,oBACT,QAAQ;AAAA,oBACR,SAAS;AAAA,kBACX;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,MAAM,CAAC,6BAA6B,8BAA8B,yBAAyB;AAAA,MAC3F,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,WAAW;AAAA,UACT,MAAM,CAAC,mBAAmB,eAAe;AAAA,UACzC,QAAQ;AAAA,YACN,IAAI;AAAA,YACJ,KAAK;AAAA,YACL,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,cACvB,QAAQ,QAAQ;AAAA,cAChB,QAAQ;AAAA,gBACN,UAAU;AAAA,cACZ;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN;AAAA,gBACE,OAAO;AAAA,gBACP,QAAQ;AAAA,cACV;AAAA,cACA;AAAA,gBACE,SAAS;AAAA,sBACP,uBAAO,EAAE,UAAU,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC;AAAA,sBAChD,sBAAM,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,OAAO,EAAE;AAAA,gBACjE;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,SAAS;AAAA,UACP,MAAM,CAAC,eAAe;AAAA,UACtB,IAAI;AAAA,YACF,OAAO;AAAA,YACP,QAAQ;AAAA,cACN,QAAQ;AAAA,cACR,SAAS;AAAA,YACX;AAAA,UACF;AAAA,UACA,SAAS;AAAA,UACT,QAAQ;AAAA,YACN,YAAY;AAAA,cACV,aAAa;AAAA,YACf;AAAA,YACA,eAAe;AAAA,cACb,aAAa;AAAA,cACb,IAAI;AAAA,gBACF,OAAO;AAAA,kBACL,aAAS,oBAAI,CAAC,EAAE,QAAQ,MAAM,+BAA+B,QAAQ,eAAe,GAAG;AAAA,gBACzF;AAAA,cACF;AAAA,cACA,OAAO;AAAA,gBACL,mBAAmB;AAAA,kBACjB;AAAA,oBACE,aAAa;AAAA,oBACb,OAAO;AAAA,oBACP,SAAS;AAAA,oBACT,QAAQ;AAAA,kBACV;AAAA,kBACA;AAAA,oBACE,aAAa;AAAA,oBACb,SAAS;AAAA,oBACT,QAAQ;AAAA,oBACR,SAAS;AAAA,kBACX;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,YAAY;AAAA,UACV,MAAM,CAAC,oBAAoB,eAAe;AAAA,UAC1C,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,IAAI;AAAA,YACJ,KAAK;AAAA,YACL,OAAO,CAAC,EAAE,QAAQ,MAAG;AAlbjC,kBAAAA;AAkbqC;AAAA,gBACvB,QAAQ,QAAQ;AAAA,gBAChB,QAAQ;AAAA,kBACN,UAAU;AAAA,kBACV,QAAOA,MAAA,QAAQ,QAAQ,YAAY,EAAE,QAAQ,OAAO,IAAI,MAAM,MAAvD,gBAAAA,IAA0D,UAAoB;AAAA,gBACvF;AAAA,cACF;AAAA;AAAA,YACA,QAAQ;AAAA,cACN,SAAS,KAAC,sBAAM,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,OAAO,EAAE,GAAG,eAAe;AAAA,YAC7F;AAAA,YACA,SAAS;AAAA,cACP,SAAS,CAAC,iBAAiB,eAAe;AAAA,cAC1C,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,MAAM,CAAC,6BAA6B,8BAA8B,yBAAyB;AAAA,MAC3F,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,WAAW;AAAA,UACT,MAAM,CAAC,mBAAmB,eAAe;AAAA,UACzC,QAAQ;AAAA,YACN,IAAI;AAAA,YACJ,KAAK;AAAA,YACL,OAAO,CAAC,EAAE,QAAQ,OAAO;AAAA,cACvB,QAAQ,QAAQ;AAAA,cAChB,QAAQ;AAAA,gBACN,UAAU;AAAA,cACZ;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN;AAAA,gBACE,OAAO;AAAA,gBACP,QAAQ;AAAA,gBACR,aAAS,uBAAO,EAAE,UAAU,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC;AAAA,cAC3D;AAAA,cACA;AAAA,gBACE,SAAS;AAAA,sBACP,uBAAO,EAAE,UAAU,CAAC,EAAE,MAAM,MAAM,MAAM,OAAO,CAAC;AAAA,sBAChD,sBAAM,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,OAAO,EAAE;AAAA,gBACjE;AAAA,cACF;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP,SAAS;AAAA,cACT,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAAA,QACA,SAAS;AAAA,UACP,MAAM,CAAC,eAAe;AAAA,UACtB,IAAI;AAAA,YACF,OAAO;AAAA,YACP,QAAQ;AAAA,cACN,QAAQ;AAAA,cACR,SAAS;AAAA,YACX;AAAA,UACF;AAAA,UACA,SAAS;AAAA,UACT,QAAQ;AAAA,YACN,YAAY;AAAA,cACV,aAAa;AAAA,YACf;AAAA,YACA,eAAe;AAAA,cACb,aAAa;AAAA,cACb,IAAI;AAAA,gBACF,OAAO;AAAA,kBACL,aAAS,oBAAI,CAAC,EAAE,QAAQ,MAAM,+BAA+B,QAAQ,eAAe,GAAG;AAAA,gBACzF;AAAA,cACF;AAAA,cACA,OAAO;AAAA,gBACL,mBAAmB;AAAA,kBACjB;AAAA,oBACE,aAAa;AAAA,oBACb,OAAO;AAAA,oBACP,SAAS;AAAA,oBACT,QAAQ;AAAA,kBACV;AAAA,kBACA;AAAA,oBACE,aAAa;AAAA,oBACb,SAAS;AAAA,oBACT,QAAQ;AAAA,oBACR,SAAS;AAAA,kBACX;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,YAAY;AAAA,UACV,MAAM,CAAC,oBAAoB,eAAe;AAAA,UAC1C,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,IAAI;AAAA,YACJ,KAAK;AAAA,YACL,OAAO,CAAC,EAAE,QAAQ,MAAG;AAphBjC,kBAAAA;AAohBqC;AAAA,gBACvB,QAAQ,QAAQ;AAAA,gBAChB,QAAQ;AAAA,kBACN,UAAU;AAAA,kBACV,QAAOA,MAAA,QAAQ,QAAQ,YAAY,EAAE,QAAQ,OAAO,IAAI,MAAM,MAAvD,gBAAAA,IAA0D,UAAoB;AAAA,gBACvF;AAAA,cACF;AAAA;AAAA,YACA,QAAQ;AAAA,cACN,SAAS,KAAC,sBAAM,CAAC,EAAE,MAAM,OAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,OAAO,EAAE,GAAG,eAAe;AAAA,YAC7F;AAAA,YACA,SAAS;AAAA,cACP,SAAS,CAAC,iBAAiB,eAAe;AAAA,cAC1C,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;AN5gBM,IAAM,wBAAwB;AAGrC,IAAM,gBACJ,CAAC,SACD,CAAC,EAAE,QAAQ,GAAqC,YAA+B;AAhCjF,MAAAC,KAAAC;AAiCI,UAAAA,OAAAD,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,MAAM,UAAtB,OAAAC,MAA+B;AAAA;AAEnC,IAAM,cACJ,CAAC,WACD,CAAC,EAAE,SAAS,MAAM,GAAiE,MAAyB;AArC9G,MAAAD,KAAAC,KAAA;AAsCK,WAAAD,MAAA,+BAAiC,aAAjC,gBAAAA,IAA2C,YAAW,YAAU,YAAAC,MAAA,QAAQ,UAAR,gBAAAA,IAAe,WAAf,mBAAuB,WAAvB,mBAA+B,YAAW;AAAA;AAExG,IAAM,0BAAsB,sBAAM;AAAA,EACvC,QAAQ;AAAA,IACN,iBAAiB;AAAA,IACjB,cAAc;AAAA,IACd,mBAAmB;AAAA,IACnB,qBAAqB;AAAA,EACvB;AAAA,EACA,SAAS;AAAA,IACP,qBAAiB,uBAAO,CAAC,EAAE,QAAQ,MAAM,QAAQ,SAAS,EAAE,MAAM,eAAe,CAAC;AAAA,IAClF,iBAAiB,cAAY,QAAQ,MAAM,kBAAkB,QAAQ;AAAA,IACrE,kBAAkB,CAAC,EAAE,QAAQ,GAAG,EAAE,MAAM,QAAQ,MAAM,MAAyC;AAC7F,UAAI,CAAC,QAAQ,QAAQ;AACnB;AAAA,MACF;AACA,UAAI,CAAC,SAAS,wBAAwB,GAAG;AACvC;AAAA,MACF;AACA,UAAI,QAAQ,aAAa;AACvB;AAAA,MACF;AAEA,YAAM,mBAAe,oBAAQ,QAAQ,OAAO,UAAU,IAAI;AAC1D,UAAI,iBAAiB,QAAQ,OAAO,SAAS,GAAG;AAC9C;AAAA,MACF;AAEA,cAAQ,OAAO,YAAY,YAAY;AAAA,IACzC;AAAA,IACA,kBAAkB,CAAC,EAAE,QAAQ,GAAG,EAAE,KAAK,MAAqB;AApEhE,UAAAD;AAoEmE,cAAAA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,KAAK;AAAA;AAAA,IACpF,eAAW,sBAAM,EAAE,MAAM,OAAO,CAAC;AAAA,IACjC,WAAW,CAAC,EAAE,SAAS,MAAM,GAAG,WAAoE;AAClG,UAAI,QAAQ,aAAa;AACvB;AAAA,MACF;AAEA,YAAM,WACJ,iCAAQ,eACP,iCAAQ,yBAAwB,QAAQ,MAAM,OAAO,yBACpD,+BAAiC,aAAY,QAAQ,MAAM,OAAO,QAAQ;AAE9E,YAAM,aAAa,MAAG;AAhF5B,YAAAA;AAgF+B,gBAAAA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,KAAK,QAAQ,MAAM,oBAAoB;AAAA;AAChF,WAAK,QAAQ,MAAM,UAAU,EAAE,SAAS,WAAW,CAAC;AAAA,IACtD;AAAA,IACA,kBAAc,sBAAM,EAAE,MAAM,QAAQ,GAAG,EAAE,OAAO,IAAK,CAAC;AAAA;AAAA,IACtD,cAAU,uBAAO;AAAA,MACf,OAAO,CAAC,GAAG,EAAE,MAAM,MAAsC;AACvD,YAAI,OAAO;AACT,iBAAO;AAAA,QACT;AACA,eAAO,IAAI,0BAA0B,eAAe;AAAA,MACtD;AAAA,IACF,CAAC;AAAA,IACD,oBAAoB,CAAC,EAAE,QAAQ,MAAM;AACnC,YAAM,YAAY,QAAQ,MAAM,OAAO,OAAO,wBAAwB;AAEtE,UAAI,CAAC,WAAW;AACd;AAAA,MACF;AAEA,UAAI;AAEJ,cAAQ,UAAU,MAAM;AAAA,QACtB,KAAK,YAAY;AAAA,QACjB,KAAK,YAAY;AAAA,QACjB,KAAK,YAAY;AAAA,QACjB,KAAK,YAAY;AAAA,QACjB,KAAK,YAAY;AAAA,QACjB,KAAK,YAAY;AACf,kBAAQ,IAAI,mBAAmB,UAAU,MAAM,UAAU,WAAY;AACrE;AAAA,QACF;AACE,kBAAQ,IAAI;AAAA,YACV;AAAA,YACA;AAAA,UACF;AAAA,MACJ;AAEA,cAAQ,QAAQ,KAAK;AAAA,QACnB,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,UAAU,CAAC,EAAE,QAAQ,MAAG;AA1H5B,UAAAA;AA0H+B,cAAAA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,KAAK,QAAQ,MAAM,eAAe;AAAA;AAAA,EAC/E;AAAA,EACA,QAAQ;AAAA,IACN,kBAAkB,CAAC,EAAE,QAAQ,MAAG;AA7HpC,UAAAA,KAAAC,KAAA;AA6HuC,2BAAAA,OAAAD,MAAA,QAAQ,UAAR,gBAAAA,IAAe,WAAf,gBAAAC,IAAuB,WAAvB,mBAA+B,kBAA/B,mBAA8C,UAAS;AAAA;AAAA,IAC1F,qBAAqB,CAAC,EAAE,QAAQ,MAAG;AA9HvC,UAAAD,KAAAC,KAAA;AA8H0C,2BAAAA,OAAAD,MAAA,QAAQ,UAAR,gBAAAA,IAAe,WAAf,gBAAAC,IAAuB,WAAvB,mBAA+B,qBAA/B,mBAAiD,UAAS;AAAA;AAAA,IAEhG,4BAA4B,CAAC,EAAE,QAAQ,MACrC,QAAQ,QAAQ,MAAM,OAAO,OAAO,WAAW,QAAQ,QAAQ,MAAM,OAAO,mBAAmB;AAAA,IACjG,mBAAmB,CAAC,EAAE,QAAQ,MAAG;AAlIrC,UAAAD;AAkIwC,sBAAQA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,eAAe,IAAI,cAAc,eAAe;AAAA;AAAA,IAC5G,gBAAgB,CAAC,EAAE,QAAQ,GAAG,WAA4C;AAnI9E,UAAAA;AAoIM,YAAM,SAAQA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,eAAe,IAAI,cAAc;AAC/D,UAAI,CAAC,QAAQ;AACX,eAAO,QAAQ,KAAK;AAAA,MACtB;AACA,aAAO,UAAU,OAAO;AAAA,IAC1B;AAAA,IACA,kBAAkB,CAAC,EAAE,QAAQ,MAAG;AA1IpC,UAAAA;AA0IuC,sBAAQA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,eAAe,IAAI,cAAc,SAAS;AAAA;AAAA,IACrG,aAAa,CAAC,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,OAAO,MAAM;AAAA,IAEjE,mBAAmB,YAAY,WAAW;AAAA,IAC1C,kBAAkB,CAAC,EAAE,SAAS,MAAM,MAAM;AA9I9C,UAAAA,KAAAC;AA+IM,YAAM,WAAY,+BAAiC;AACnD,YAAM,UAASA,OAAAD,MAAA,QAAQ,UAAR,gBAAAA,IAAe,WAAf,gBAAAC,IAAuB;AAEtC,cACG,qCAAU,YAAW,cAAc,QAAQ,qCAAU,gBAAgB,MACrE,iCAAQ,YAAW,cAAc,QAAQ,iCAAQ,gBAAgB;AAAA,IAEtE;AAAA,IACA,6BAA6B,YAAY,sBAAsB;AAAA,IAE/D,gBAAY,mBAAG,CAAC,oBAAoB,CAAC,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,IAAI,CAAC,CAAC;AAAA,IACjF,eAAe,CAAC,EAAE,QAAQ,MAAM,QAAQ,QAAQ,WAAW;AAAA,IAC3D,6BAAyB,oBAAI,CAAC,+BAA+B,kBAAkB,CAAC;AAAA,IAChF,uCAAmC,oBAAI,CAAC,+BAA+B,qBAAqB,CAAC;AAAA,IAE7F,qBAAiB,mBAAG,CAAC,yBAAyB,cAAc,GAAG,CAAC,CAAC;AAAA,IACjE,mBAAe,oBAAI,CAAC,uBAAuB,cAAc,WAAW,CAAC,CAAC;AAAA,IACtE,uBAAmB,oBAAI,CAAC,2BAA2B,cAAc,SAAS,CAAC,CAAC;AAAA,IAC5E,eAAe,cAAc,uBAAuB;AAAA,IAEpD,2BAAuB,mBAAG,KAAC,oBAAI,aAAa,GAAG,mBAAmB,CAAC;AAAA,IACnE,yBAAqB,mBAAG,CAAC,yBAAyB,CAAC;AAAA,IACnD,6BAAyB,mBAAG,CAAC,yCAAqC,oBAAI,CAAC,oBAAoB,gBAAgB,CAAC,CAAC,CAAC;AAAA,EAChH;AAAA,EACA,QAAQ;AAAA,IACN,mBAAmB;AAAA;AAAA,EACrB;AAAA,EACA,OAAO,CAAC;AACV,CAAC,EAAE,cAAc;AAAA,EACf,IAAI;AAAA;AAAA,EAEJ,SAAS,CAAC;AAAA,EACV,SAAS;AAAA,EACT,IAAI;AAAA,IACF,sBAAsB;AAAA,MACpB,aAAS,uBAAO,qBAAqB,CAAC,EAAE,SAAS,MAAM,MAAG;AAlLhE,YAAAD,KAAAC,KAAA;AAkLoE;AAAA,UAC5D,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,UAAU,MAAM;AAAA,YAChB,aAAa,KACXD,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,UAAS,QAAQ,WAC7BC,MAAA,QAAQ,MAAM,4BAAd,gBAAAA,IAAuC,cAAc,aACrD,aAAQ,WAAR,mBAAgB,QACtB,GAAG,uBAAuB;AAAA,YAC1B,qBAAqB,QAAQ,MAAM,oBAAoB;AAAA,UACzD;AAAA,QACF;AAAA,OAAE;AAAA,IACJ;AAAA,IACA,qBAAqB;AAAA,MACnB,aAAS,uBAAO,qBAAqB;AAAA,QACnC,MAAM;AAAA,QACN,QAAQ,EAAE,UAAU,OAAO;AAAA,MAC7B,CAAC;AAAA,IACH;AAAA,IACA,eAAe;AAAA,MACb,aAAa;AAAA,MACb,aAAS,+BAAe,CAAC,EAAE,SAAS,MAAM,MAAM;AAC9C,gBAAQ,OAAO;AAAA,UACb,SAAS,MAAM;AAAA,QACjB,CAAC;AAGD,gBAAQ,MAAM,EAAE,MAAM,aAAa,CAAC;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,IACA,qBAAqB;AAAA,IACrB,kBAAkB;AAAA,IAClB,SAAS;AAAA,MACP,aAAS,uBAAO,CAAC,EAAE,MAAM,OAAO;AAAA,QAC9B,SAAS;AAAA,UACP,WAAW,MAAM;AAAA,UACjB,MAAM,MAAM;AAAA,UACZ,UAAU,MAAM;AAAA,QAClB;AAAA,MACF,EAAE;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,EACT;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,MACJ,IAAI;AAAA,QACF,MAAM;AAAA,UACJ,aAAS,uBAAO,CAAC,EAAE,MAAM,OAAO;AAAA,YAC9B,OAAO,MAAM;AAAA,YACb,QAAQ,MAAM;AAAA,YACd,YAAY,MAAM,cAAc;AAAA,YAChC,SAAS;AAAA,cACP,WAAW;AAAA,YACb;AAAA,YACA,aAAa,MAAM,eAAe;AAAA,YAClC,SAAS,MAAM;AAAA,UACjB,EAAE;AAAA,UACF,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,WAAO,+BAAe,CAAC,EAAE,SAAS,SAAS,KAAK,MAAM;AAhP5D,YAAAD,KAAAC;AAiPQ,YAAI,CAAC,KAAK,YAAY,EAAE,SAAS,mBAAmB,GAAG;AACrD,kBAAQ,WAAW,qBAAqB;AAAA,YACtC,IAAI;AAAA,YACJ,UAAU;AAAA,YACV,OAAO;AAAA,cACL,WAAUA,OAAAD,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,aAAhB,OAAAC,MAA4B;AAAA,cACtC,MAAM;AAAA,cACN,SAAS,QAAQ;AAAA,cACjB,QAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,MACD,QAAQ;AAAA,QACN;AAAA,UACE,WAAO,oBAAI,CAAC,kBAAc,oBAAI,eAAe,CAAC,CAAC;AAAA,UAC/C,SAAS;AAAA,gBACP,oBAAI,mBAAmB;AAAA,YACvB;AAAA,cACE,MAAM;AAAA,cACN,QAAQ,CAAC,EAAE,QAAQ,OAAO,EAAE,MAAM,QAAQ,MAAM,oBAAoB,EAAE;AAAA,YACxE;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,OAAO,MAAM,MAAM,UAAU,EAAE;AAAA,UAC9E,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,WAAO,mBAAG,CAAC,iBAAiB,kBAAkB,CAAC;AAAA,UAC/C,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,OAAO,MAAM,MAAM,YAAY,EAAE;AAAA,UAChF,QAAQ;AAAA,QACV;AAAA,QACA;AAAA,UACE,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,OAAO,MAAM,MAAM,IAAI,EAAE;AAAA,UACxE,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,SAAS,KAAK,MAAG;AAnSnC,cAAAD;AAmSuC;AAAA,YAC7B,WAAUA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB;AAAA,YAC1B,SAAS,QAAQ;AAAA,YACjB,QAAQ;AAAA,UACV;AAAA;AAAA,QACA,QAAQ;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,IAAI;AAAA,QACF,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,MAAM;AAAA,UACJ;AAAA,YACE,OAAO;AAAA,YACP,SAAS,CAAC,aAAa,cAAc;AAAA,UACvC;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,UAAU,EAAE;AAAA,UACnE;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,YAAY,EAAE;AAAA,YACnE,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,SAAS,KAAK,MAAG;AAxUnC,cAAAA;AAwUuC;AAAA,YAC7B,WAAUA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB;AAAA,YAC1B,SAAS,QAAQ;AAAA,YACjB,QAAQ;AAAA,UACV;AAAA;AAAA,QACA,QAAQ;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,IAAI;AAAA,QACF,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,MAAM;AAAA,UACJ;AAAA,YACE,OAAO;AAAA,YACP,SAAS,CAAC,aAAa,cAAc;AAAA,UACvC;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,UAAU,EAAE;AAAA,UACnE;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,KAAK;AAAA,QACL,OAAO,CAAC,EAAE,SAAS,KAAK,MAAG;AAxWnC,cAAAA;AAwWuC;AAAA,YAC7B,WAAUA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB;AAAA,YAC1B,SAAS,QAAQ;AAAA,YACjB,QAAQ;AAAA,UACV;AAAA;AAAA,QACA,QAAQ;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN;AAAA,UACE,OAAO;AAAA,UACP,SAAS;AAAA,YACP,CAAC,EAAE,QAAQ,MAAG;AArX1B,kBAAAA;AAqX8B;AAAA,gBAChB,MAAM;AAAA,gBACN,QAAQ,EAAE,YAAWA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,eAAe,IAAI,cAAc,gBAAgB;AAAA,cACxF;AAAA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,UACE,OAAO,EAAE,MAAM,kBAAkB,QAAQ,EAAE,QAAQ,WAAW,EAAE;AAAA,UAChE,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,OAAO,MAAM,MAAM,YAAY,EAAE;AAAA,QAClF;AAAA,QACA;AAAA,UACE,OAAO,EAAE,MAAM,kBAAkB,QAAQ,EAAE,QAAQ,UAAU,EAAE;AAAA,UAC/D,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,OAAO,MAAM,MAAM,IAAI,EAAE;AAAA,QAC1E;AAAA,MACF;AAAA,MACA,IAAI;AAAA,QACF,cAAc;AAAA,UACZ,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,MAAM;AAAA,UACJ;AAAA,YACE,OAAO;AAAA,YACP,SAAS,CAAC,aAAa,cAAc;AAAA,UACvC;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,YAAY,EAAE;AAAA,YACnE,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,WAAO,uBAAO,qBAAqB,EAAE,MAAM,WAAW,CAAC;AAAA,MACvD,IAAI;AAAA,QACF,MAAM;AAAA,UACJ;AAAA,YACE,OAAO;AAAA,YACP,SAAS,CAAC,aAAa,cAAc;AAAA,UACvC;AAAA,UACA;AAAA,YACE,aAAa;AAAA,YACb,OAAO;AAAA,YACP,SAAS,CAAC,EAAE,MAAM,aAAa,QAAQ,EAAE,sBAAsB,KAAK,EAAE,GAAG,cAAc;AAAA,UACzF;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,UAAU,EAAE;AAAA,YACjE,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,YAAY,EAAE;AAAA,YACnE,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,YACE,SAAS,EAAE,MAAM,oBAAoB,QAAQ,EAAE,MAAM,IAAI,EAAE;AAAA,YAC3D,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,QACF,MAAM;AAAA,UACJ,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,EACF;AACF,CAAC;;;AQpcD,wBAAwD;AASjD,IAAM,gBAAgB,MAAuB;AAClD,QAAM,aAAS,6BAAU;AACzB,QAAM,eAAW,+BAAY;AAE7B,QAAM,eAAe,OAAO,WAAW,cAAc,IAAI,gBAAgB,QAAI,mCAAgB;AAI7F,QAAM,0BACJ,OAAO,WAAW,eAAe,OAAO,QAAQ,OAAO,KAAK,WAAW;AAEzE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM,CAAC,SAAiB,OAAO,KAAK,IAAI;AAAA,IACxC,SAAS,CAAC,SACR,0BAA0B,OAAO,QAAQ,aAAa,MAAM,IAAI,IAAI,IAAI,OAAO,QAAQ,IAAI;AAAA,IAC7F,YAAY,MAAc;AACxB,gCAA0B,OAAO,QAAQ,UAAU,MAAM,IAAI,IAAI,IAAI,OAAO,KAAK,MAAM,CAAC,CAAC;AAAA,IAC3F;AAAA,IACA,UAAU,MAAM;AAAA,IAChB,cAAc,MAAM;AAAA,EACtB;AACF;;;AChCA,IAAAE,gBAA0C;;;ACA1C,IAAAC,cAAuD;AAIhD,IAAM,+BAA+B,CAAC,qBAAqB,qBAAqB,cAAc;AAmErG,SAAS,cAAc,MAAc;AACnC,aAAO,sCAAqB,8BAAiB,IAAI,CAAC;AACpD;AASO,SAAS,kBAAkB,QAAyB,WAAmB,KAAkB;AAC9F,QAAM,qBAAqB,cAAc,QAAQ;AAKjD,WAAS,+CAA+C,MAAc;AACpE,UAAM,iBAAiB,IAAI,IAAI,MAAM,OAAO,SAAS,MAAM;AAC3D,UAAM,sBAAsB,OAAO,aAAa;AAEhD,iCAA6B,QAAQ,SAAO;AAC1C,YAAM,aAAa,oBAAoB,IAAI,GAAG;AAC9C,UAAI,YAAY;AACd,uBAAe,aAAa,IAAI,KAAK,UAAU;AAAA,MACjD;AAAA,IACF,CAAC;AAED,WAAO,GAAG,eAAe,QAAQ,GAAG,eAAe,MAAM;AAAA,EAC3D;AAEA,WAAS,MAAM,MAAe,OAAiB;AAC7C,UAAM,cAAc,sBAAS,SAAS;AAEtC,QAAI,CAAC,aAAa;AAChB,YAAM,IAAI,MAAM,gGAAgG;AAAA,IAClH;AAEA,UAAM,iBAAiB,cAAc,WAAW;AAEhD,WAAO,cAAc,GAAG,kBAAkB,GAAG,cAAc,EAAE,MAAM,cAAc,OAAO,SAAS,CAAC;AAAA,EACpG;AAEA,WAAS,MAAM,eAAuB;AACpC,WAAO,kBAAkB,QAAQ,GAAG,kBAAkB,GAAG,cAAc,aAAa,CAAC,EAAE;AAAA,EACzF;AAEA,WAAS,KAAK,MAAc;AAC1B,UAAM,iBAAiB,+CAA+C,IAAI;AAC1E,WAAO,OAAO,KAAK,cAAc;AAAA,EACnC;AAEA,WAAS,QAAQ,MAAc;AAC7B,UAAM,iBAAiB,+CAA+C,IAAI;AAC1E,WAAO,OAAO,QAAQ,cAAc;AAAA,EACtC;AAEA,WAAS,YAAY,MAAc;AACjC,UAAM,iBAAiB,+CAA+C,IAAI;AAC1E,WAAO,OAAO,YAAY,cAAc;AAAA,EAC1C;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,MAAM,OAAO;AAAA,IACb,MAAM,OAAO;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,OAAO;AAAA,IACjB,cAAc,OAAO;AAAA,IACrB,UAAU;AAAA,EACZ;AACF;;;ADrHS;AAvBF,IAAM,yBAAqB,6BAAkC,IAAI;AAEjE,SAAS,iBAAiB;AAC/B,QAAM,UAAM,0BAAW,kBAAkB;AAEzC,MAAI,CAAC,KAAK;AACR,UAAM,IAAI,MAAM,oFAAoF;AAAA,EACtG;AAEA,SAAO;AACT;AAEO,SAAS,OAAO;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM,cAAc,kBAAkB,QAAQ,QAAQ;AAEtD,SAAO,4CAAC,mBAAmB,UAAnB,EAA4B,OAAO,aAAc,UAAS;AACpE;;;AE3BA,IAAAC,gBAAqC;AAIrC,IAAM,eAAe;AANrB;AASA,IAAM,gBAAN,MAA+C;AAAA,EAO7C,YAAY,MAAe;AAN3B,SAAS,OAAO;AAChB,SAAS,OAAO;AAEhB;AACA,mCAAsC,oBAAI,IAAI;AAG5C,UAAM,SAAS,OAAO,WAAW,cAAc,eAAe,OAAO,SAAS;AAE9E,uBAAK,MAAO,IAAI,IAAI,sBAAQ,KAAK,MAAM;AAAA,EACzC;AAAA,EAEA,KAAK,MAAc;AACjB,UAAM,SAAS,IAAI,IAAI,mBAAK,MAAK,SAAS,CAAC;AAC3C,WAAO,WAAW;AAElB,uBAAK,MAAO;AACZ,SAAK,KAAK;AAAA,EACZ;AAAA,EAEA,QAAQ,MAAc;AACpB,SAAK,KAAK,IAAI;AAAA,EAChB;AAAA,EAEA,YAAY,MAAc;AACxB,SAAK,KAAK,IAAI;AAAA,EAChB;AAAA,EAEA,WAAW;AACT,WAAO,mBAAK,MAAK;AAAA,EACnB;AAAA,EAEA,eAAe;AACb,WAAO,mBAAK,MAAK;AAAA,EACnB;AAAA,EAEA,UAAU,UAAsB;AAC9B,uBAAK,YAAW,IAAI,QAAQ;AAE5B,WAAO,MAAM,mBAAK,YAAW,OAAO,QAAQ;AAAA,EAC9C;AAAA,EAEA,OAAO;AACL,uBAAK,YAAW,QAAQ,cAAY,SAAS,mBAAK,KAAI,CAAC;AAAA,EACzD;AAAA,EAEA,cAAc;AACZ,WAAO,mBAAK;AAAA,EACd;AACF;AA9CE;AACA;AA+CF,IAAM,gBAAgB,IAAI,cAAc,GAAG;AAEpC,IAAM,mBAAmB,MAAuB;AACrD,QAAM,UAAM;AAAA,IACV,cAAc,UAAU,KAAK,aAAa;AAAA,IAC1C,cAAc,YAAY,KAAK,aAAa;AAAA,EAC9C;AAEA,SAAO;AAAA,IACL,MAAM,cAAc;AAAA,IACpB,MAAM,cAAc;AAAA,IACpB,UAAU,MAAM,IAAI;AAAA,IACpB,MAAM,cAAc,KAAK,KAAK,aAAa;AAAA,IAC3C,SAAS,cAAc,QAAQ,KAAK,aAAa;AAAA,IACjD,cAAc,MAAM,IAAI;AAAA,IACxB,aAAa,cAAc,YAAY,KAAK,aAAa;AAAA,EAC3D;AACF;;;AC9EA,IAAAC,gBAAkD;AAClD,YAAuB;AA6BhB,SAAS,0BACd,aACA;AACA,QAAM,eAAqB,oBAA2B,IAAI;AAC1D,QAAM,mBAAmB,aAAa;AAEtC,WAAS,SAAS,EAAE,UAAU,SAAS,GAAkD;AACvF,WAAa;AAAA,MACX;AAAA,MACA;AAAA,QACE,OAAO;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,WAAS,cAAc;AAIvB,WAASC,YAAW,oBAA6B,OAAoB;AACnE,UAAM,WAAiB,iBAAW,YAAY;AAE9C,QAAI,CAAC,qBAAqB,CAAC,UAAU;AACnC,YAAM,IAAI;AAAA,QACR,yBAAyB,SAAS,WAAW,4BAA4B,SAAS,WAAW;AAAA,MAC/F;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAASC,aAAe,UAA+C,SAAsC;AAC3G,UAAMC,SAAQF,YAAW;AACzB,eAAO,cAAAG,aAAmBD,QAAsB,UAAU,OAAO;AAAA,EACnE;AAEA,SAAO;AAAA,IACL;AAAA,IACA,aAAaF;AAAA,IACb,aAAAC;AAAA,EACF;AACF;;;AC5DO,IAAM,kBAAkB,0BAAgD,iBAAiB;AAEhG,SAAS,cAA8D,MAAc;AACnF,SAAO,gBAAgB,YAAY,WAAS,MAAM,SAAS,IAAI,CAAgB;AACjF;AAEO,IAAM,qBAAqB,MAAM,cAAmC,OAAO;AAC3E,IAAM,wBAAwB,MAAM,cAAsC,UAAU;AACpF,IAAM,4BAA4B,MAAM,cAA0C,cAAc;;;ACpBvG,IAAAG,sBAAyB;AACzB,oBAAuB;AACvB,uBAAsC;;;AEFtC,SAASC,0CACPC,sBACAC,iBACA,EAAA,2BAA6B,KAA3BC,IAAoC,CAAA,GACtC;AACA,SAAO,SAASC,YAAYC,OAAU;AACpCJ,6BAAoB,QAApBA,yBAAoB,UAApBA,qBAAuBI,KAAH;AAEpB,QAAIF,6BAA6B,SAAS,CAAGE,MAA4BC,iBACvE,QAAOJ,oBAAP,QAAOA,oBAAP,SAAA,SAAOA,gBAAkBG,KAAH;;;;;AFI5B,IAAAE,qBAOO;AACP,wBAAqB;AACrB,IAAAC,SAAuB;;;AGtBvB,yBAAyB;AACzB,IAAAC,iBAAqB;AAErB,IAAAC,SAAuB;;;ACOvB,IAAM,gBAA+G;AAAA,EACnH,YAAY,CAAC,iCAAiC,QAAQ;AAAA,EACtD,YAAY,CAAC,+BAA+B,QAAQ;AAAA,EACpD,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,mBAAmB;AAAA,EACnB,sBAAsB;AACxB;AAIA,IAAM,mBAAmB,CAAC,YAAsB;AAC9C,MAAI;AACJ,MAAI,gBAAgB,MAAM;AACxB,UAAM,YAAY,IAAI,KAAK,WAAW,MAAM,EAAE,OAAO,QAAQ,MAAM,cAAc,CAAC;AAClF,wBAAoB,UAAU,OAAO,OAAO;AAAA,EAC9C,OAAO;AACL,wBAAoB,QAAQ,KAAK,IAAI;AAAA,EACvC;AAEA,SAAO;AACT;AAOO,IAAM,4BAA4B,CAAC,EAAE,QAAQ,kBAAkB,MAAsC;AAC1G,QAAM,OAA2B,CAAC;AAElC,MAAI,CAAC,qBAAqB,OAAO,KAAK,iBAAiB,EAAE,WAAW,GAAG;AACrE,WAAO;AAAA,MACL;AAAA,MACA,SAAS;AAAA,IACX;AAAA,EACF;AAGA,QAAM,qBAAoB,uDAAmB,eAAc;AAE3D,QAAM,WAAW,OAAO,QAAQ,iBAAiB,EAC9C,OAAO,OAAM,oBAAoB,EAAE,CAAC,MAAM,eAAe,IAAK,EAC9D,OAAO,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EACrB,IAAI,CAAC,CAAC,CAAC,MAAM;AACZ,UAAM,QAAQ;AACd,SAAK,KAAK,KAAK;AACf,UAAM,WAAW,cAAc,KAAK;AAEpC,QAAI,MAAM,QAAQ,QAAQ,GAAG;AAC3B,YAAM,CAAC,KAAK,YAAY,IAAI;AAC5B,aAAO,IAAI,QAAQ,IAAI,YAAY,KAAK,OAAO,CAA2B,CAAW;AAAA,IACvF;AACA,WAAO;AAAA,EACT,CAAC;AAEH,QAAM,oBAAoB,iBAAiB,QAAQ;AAEnD,SAAO;AAAA,IACL;AAAA,IACA,SAAS,8BAA8B,iBAAiB;AAAA,EAC1D;AACF;;;ADrDO,IAAM,cAAc,CAAC,cAAqC;AAnBjE,MAAAC;AAoBE,QAAM,YAAQ,6BAAS;AACvB,QAAM,oBAAmBA,MAAA,MAAM,4BAAN,gBAAAA,IAA+B,aAAa;AACrE,QAAM,EAAE,cAAc,qBAAqB,aAAa,GAAG,OAAO,IAAI,oBAAoB,CAAC;AAE3F,QAAM;AAAA,IACJ,oBAAoB;AAAA,IACpB,sBAAsB;AAAA,IACtB,sBAAsB;AAAA,IACtB,mBAAmB;AAAA,IACnB;AAAA,EACF,IAAI,aAAa,CAAC;AAElB,QAAM,aAAmB;AAAA,IACvB,CAAC,QAA4B;AAjCjC,UAAAA,KAAAC,KAAA;AAqCM,UAAI,IAAI,YAAY;AAClB,YAAI,OAAO,OAAO,2BAAK,UAAU,EAAE,SAAS,GAAG;AAC7C,gBAAM,EAAE,SAAS,KAAK,IAAI,0BAA0B;AAAA,YAClD;AAAA,YACA,mBAAmB,IAAI;AAAA,UACzB,CAAC;AAED,eAAID,MAAA,IAAI,eAAJ,gBAAAA,IAAgB,YAAY;AAC9B,mBAAO,iBAAiB,SAAS,IAAI;AAAA,UACvC;AAEA,iBAAO,kBAAkB,SAAS,IAAI;AAAA,QACxC;AAAA,MACF;AAKA,YAAIC,MAAA,2BAAK,aAAL,gBAAAA,IAAe,WAAU,QAAQ;AACnC,cAAM,OAAO,IAAI,SAAS;AAC1B,cAAM,QAAQ,KAAK,IAAI,SAAO,IAAI,YAAY,GAAG,CAAC,EAAE,KAAK,GAAG;AAC5D,eAAO,kBAAkB,OAAO,IAAI;AAAA,MACtC;AAKA,YAAI,gCAAK,aAAL,mBAAe,WAAU,QAAQ;AACnC,cAAM,OAAO,IAAI,SAAS;AAC1B,cAAM,QAAQ,KAAK,IAAI,SAAO,IAAI,YAAY,GAAG,CAAC,EAAE,KAAK,GAAG;AAC5D,eAAO,oBAAoB,OAAO,IAAI;AAAA,MACxC;AAKA,aAAO,oBAAoB;AAAA,IAC7B;AAAA,IACA,CAAC,SAAS;AAAA,EACZ;AAEA,QAAM,mBAAyB,eAAQ,MAAM;AAC3C,WAAO,CAAC,aAAqB;AAC3B,aAAO,MAAM,OAAO,OAAO,iBAAiB,UAAU;AAAA,QACpD,cAAc;AAAA,QACd;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,GAAG,CAAC,UAAU,CAAC;AAEf,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEA,IAAM,MAAM,CAAC,GAAwB,SAAiB,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC,GAAG,MAAM,uBAAI,IAAI,CAAC;AAEhG,IAAM,aAAa;AAAA,EACjB,kBAAkB;AAAA,IAChB,QAAQ;AAAA,MACN,iBAAiB;AAAA,MACjB,cAAc;AAAA,MACd,WAAW;AAAA,MACX,aAAa;AAAA,QACX,cAAc;AAAA,QACd,aAAa;AAAA,QACb,iBAAiB;AAAA,QACjB,gBAAgB;AAAA,QAChB,OAAO;AAAA,QACP,MAAM;AAAA,QACN,uBAAuB;AAAA,QACvB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,aAAa;AAAA,QACb,UAAU;AAAA,QACV,cAAc;AAAA,QACd,WAAW;AAAA,QACX,UAAU;AAAA,MACZ;AAAA,MACA,UAAU;AAAA,QACR,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,OAAO;AAAA,QACP,gBAAgB;AAAA,QAChB,YAAY;AAAA,QACZ,mBAAmB;AAAA,QACnB,OAAO;AAAA,QACP,aAAa;AAAA,QACb,WAAW;AAAA,QACX,iBAAiB;AAAA,QACjB,cAAc;AAAA,QACd,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AACF;;;AE3HO,IAAM,kBAAkB,0BAAgD,iBAAiB;AAWzF,IAAM,2BAA2B,MACtC,gBAAgB,YAAY,WAAS,MAAM,QAAQ,uBAAuB;;;ACzB5E,IAAAC,SAAuB;AAEhB,SAAS,gBAAgB,MAAuB;AACrD,SAAa,sBAAe,IAAI,KAAK,KAAK,SAAe;AAC3D;;;ACJA,wBAAwC;AACxC,IAAAC,SAAuB;AAmCjB,IAAAC,sBAAA;AApBN,IAAM,OAAuB,CAAC,GAAG,CAAC;AAClC,IAAM,UAA0B,CAAC,IAAI,EAAE;AAEhC,IAAM,qBAAqB;AAClC,IAAM,kCAAkC;AAUjC,IAAM,WAAiB,kBAA4C,SAASC,UAAS,OAAO,KAAK;AACtG,QAAM,EAAE,QAAQ,QAAQ,YAAY,GAAG,KAAK,IAAI;AAChD,QAAM,gBAAgB,OAAO,WAAW;AAExC,MAAI,eAAe;AACjB,WACE;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA,IACF;AAAA,EAEJ;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACE,GAAG;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA;AAAA,EACF;AAEJ,CAAC;AAKD,IAAM,mBAAyB;AAAA,EAC7B,SAASA,UAAS,OAAO,KAAK;AAC5B,UAAM,EAAE,SAAS,oBAAoB,aAAa,OAAO,GAAG,KAAK,IAAI;AAErE,UAAM,WAAiB,cAAyB,IAAI;AAEpD,IAAM,2BAAoB,KAAK,MAAM,SAAS,SAA6B,CAAC,CAAC;AAG7E,IAAM,iBAAU,MAAM;AApE1B,UAAAC,KAAAC;AAqEM,UAAI,OAAO,MAAM,KAAK,EAAE,WAAW,UAAU,YAAY;AACvD,SAAAA,OAAAD,MAAA,SAAS,YAAT,gBAAAA,IAAkB,SAAlB,gBAAAC,IAAwB;AAAA,MAC1B;AAAA,IACF,GAAG,CAAC,MAAM,OAAO,QAAQ,UAAU,CAAC;AAEpC,WACE;AAAA,MAAC,kBAAAC;AAAA,MAAA;AAAA,QACC,KAAK;AAAA,QACJ,GAAG;AAAA,QACJ,2BAAuB;AAAA;AAAA,IACzB;AAAA,EAEJ;AACF;AAMA,IAAM,oBAA0B;AAAA,EAC9B,SAASH,UAAS,OAAO,KAAK;AAC5B,UAAM;AAAA,MACJ,WAAW;AAAA,MACX;AAAA,MACA,SAAS;AAAA,MACT,aAAa;AAAA,MACb,wBAAwB;AAAA,MACxB,GAAG;AAAA,IACL,IAAI;AAEJ,UAAM,WAAiB,cAAyB,IAAI;AACpD,UAAM,CAAC,gBAAgB,iBAAiB,IAAU,gBAAyB,MAAM,YAAY,OAAO,OAAO;AAC3G,UAAM,CAAC,YAAY,aAAa,IAAU,gBAAS,KAAK;AAExD,UAAM,YAAY,MAAM,SAAS,kBAAkB,SAAS;AAG5D,IAAM,2BAAoB,KAAK,MAAM,SAAS,SAA6B,CAAC,CAAC;AAM7E,IAAM,uBAAgB,MAAM;AAC1B,UAAI,SAAS,kBAAkB,SAAS,SAAS;AAC/C;AAAA,MACF;AACA,wBAAkB,SAAO,sBAAsB,KAAK,QAAQ,CAAC;AAAA,IAC/D,GAAG,CAAC,MAAM,KAAK,CAAC;AAQhB,IAAM,iBAAU,MAAM;AACpB,eAAS,oBAAoB;AAC3B,YAAI,CAAC,UAAU,GAAG;AAChB;AAAA,QACF;AACA,0BAAkB,SAAO,sBAAsB,KAAK,QAAQ,CAAC;AAAA,MAC/D;AAEA,eAAS,iBAAiB,mBAAmB,mBAAmB,EAAE,SAAS,KAAK,CAAC;AACjF,aAAO,MAAM,SAAS,oBAAoB,mBAAmB,iBAAiB;AAAA,IAChF,GAAG,CAAC,CAAC;AAGL,IAAM,iBAAU,MAAM;AA1I1B,UAAAC,KAAAC;AA2IM,UAAI,OAAO,MAAM,KAAK,EAAE,WAAW,UAAU,YAAY;AACvD,SAAAA,OAAAD,MAAA,SAAS,YAAT,gBAAAA,IAAkB,SAAlB,gBAAAC,IAAwB;AAAA,MAC1B;AAAA,IACF,GAAG,CAAC,MAAM,OAAO,QAAQ,UAAU,CAAC;AAEpC,WACE;AAAA,MAAC;AAAA;AAAA,QACC,0BAAsB;AAAA,QACtB,OAAO;AAAA,QAGP;AAAA,uDAAC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,SAKR;AAAA,UACA;AAAA,YAAC,kBAAAC;AAAA,YAAA;AAAA,cACC,4BAAwB;AAAA,cACxB,KAAK;AAAA,cACJ,GAAG;AAAA,cACJ,SAAS,WAAS;AAhK5B,oBAAAF;AAkKY,oBAAI,SAAS,SAAS;AACpB,wBAAM,QAAQ,KAAK,IAAI,SAAS,QAAQ,MAAM,QAAQ,SAAS,CAAC;AAChE,wBAAM,MAAM,SAAS,QAAQ,MAAM;AACnC,2BAAS,QAAQ,kBAAkB,OAAO,GAAG;AAC7C,oCAAkB,CAAC,OAAO,GAAG,CAAC;AAAA,gBAChC;AACA,iBAAAA,MAAA,6BAAM,YAAN,gBAAAA,IAAA,WAAgB;AAAA,cAClB;AAAA,cACA,QAAQ,WAAS;AA1K3B,oBAAAA;AA2KY,kCAAkB,CAAC,IAAI,EAAE,CAAC;AAC1B,iBAAAA,MAAA,6BAAM,WAAN,gBAAAA,IAAA,WAAe;AAAA,cACjB;AAAA,cACA,aAAa,WAAS;AA9KhC,oBAAAA;AA+KY,oBAAI,CAAC,UAAU,GAAG;AAChB,gCAAc,IAAI;AAAA,gBACpB;AACA,iBAAAA,MAAA,MAAM,gBAAN,gBAAAA,IAAA,YAAoB;AAAA,cACtB;AAAA,cACA,cAAc,WAAS;AApLjC,oBAAAA;AAqLY,8BAAc,KAAK;AACnB,iBAAAA,MAAA,MAAM,iBAAN,gBAAAA,IAAA,YAAqB;AAAA,cACvB;AAAA,cACA,OAAO;AAAA,gBACL,GAAG;AAAA,gBACH,UAAU,sBAAsB,qBAAqB;AAAA,gBACrD,OAAO,qBAAqB,qBAAqB;AAAA,cACnD;AAAA;AAAA,UACF;AAAA,UACA;AAAA,YAAC;AAAA;AAAA,cACC,WAAW;AAAA,cACX,eAAW;AAAA,cACX,OAAO;AAAA,cAEN,gBAAM,KAAK,EAAE,OAAO,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM;AAnMhD,oBAAAA,KAAAC;AAoMY,sBAAM,YAAY,cAAc,CAAC,UAAU;AAC3C,sBAAM,WAAW,eAAe,CAAC,MAAM,eAAe,CAAC,KAAK,eAAe,CAAC,MAAM;AAClF,sBAAM,eAAcD,MAAA,eAAe,CAAC,MAAhB,OAAAA,MAAqB,OAAO,OAAMC,MAAA,eAAe,CAAC,MAAhB,OAAAA,MAAqB,MAAM;AAEjF,uBACE,6CAAO,iBAAN,EACE,iBAAO;AAAA,kBACN,OAAO,OAAO,MAAM,KAAK,EAAE,CAAC,KAAK;AAAA,kBACjC,QAAQ,YAAY,YAAY,WAAW,WAAW,aAAa,aAAa;AAAA,kBAChF,OAAO;AAAA,gBACT,CAAC,KALkB,eAAe,CAAC,EAMrC;AAAA,cAEJ,CAAC;AAAA;AAAA,UACH;AAAA;AAAA;AAAA,IACF;AAAA,EAEJ;AACF;AAKA,SAAS,sBAAsB,KAAqB,UAA6C;AA3NjG,MAAAD,KAAAC,KAAA;AA4NE,MAAI,UAAoE;AAAA,KACtEA,OAAAD,MAAA,SAAS,YAAT,gBAAAA,IAAkB,mBAAlB,OAAAC,MAAoC;AAAA,KACpC,oBAAS,YAAT,mBAAkB,iBAAlB,YAAkC;AAAA,KAClC,oBAAS,YAAT,mBAAkB,uBAAlB,YAAwC;AAAA,EAC1C;AAGA,MAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,IAAI,CAAC,MAAM,QAAQ,CAAC,GAAG;AAClD,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,GAAG;AACxC,YAAQ,CAAC,IAAI;AAAA,EACf;AAIA,MAAI,QAAQ,CAAC,MAAM,QAAQ,CAAC,GAAG;AAC7B,QAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,IAAI,CAAC,MAAM,QAAQ,CAAC,IAAI,GAAG;AACxE,gBAAU,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,UAAU;AAAA,IACnD,WAAW,SAAO,cAAS,YAAT,mBAAkB,MAAM,QAAQ,CAAC,QAAO,aAAa;AACrE,gBAAU,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,GAAG,UAAU;AAAA,IACnD,WAAW,QAAQ,CAAC,KAAK,oBAAoB;AAC3C,gBAAU,CAAC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,UAAU;AAAA,IACnD;AAAA,EACF;AAEA,iBAAS,YAAT,mBAAkB,kBAAkB,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAG,aAAQ,CAAC,MAAT,YAAc;AAE1E,SAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;AAChC;AAEA,IAAM,eAAe;AAAA,EACnB,UAAU;AAAA,EACV,YAAY;AACd;AAEA,IAAM,aAAa;AAAA,EACjB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,UAAU;AAAA,EACV,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,QAAQ;AAAA;AAAA,EAER,QAAQ;AAAA,EACR,eAAe;AACjB;AAEA,IAAM,sBAAsB;AAAA,EAC1B,QAAQ;AAAA,EACR,eAAe;AACjB;;;AC/PO,IAAM,eAAe;AAAA,EAC1B,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AAAA,EACN,SAAS;AAAA,EACT,MAAM;AACR;AAIO,IAAM,iBAAiB;AAAA,EAC5B,OAAO;AAAA,EACP,SAAS;AACX;;;AR6UI,IAAAE,sBAAA;AA7TJ,IAAM,eAAqB,qBAAiD,IAAI;AAChF,IAAM,kBAAkB,MAAY,kBAAW,YAAY;AAM3D,IAAM,kBAAkB,MAAM;AAC5B,QAAM,SAAS,gBAAgB,oBAAoB;AAEnD,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEA,IAAM,mBAAmB,CAAC,EAAE,KAAK,MAA2C;AAC1E,QAAM,WAAW,gBAAgB,sBAAsB,IAAI,CAAC;AAE5D,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEA,IAAM,6BAA6B,CAAC,SAAiC;AACnE,MAAI,SAAS,cAAc,SAAS,qBAAqB,SAAS,qBAAqB,SAAS,eAAe;AAC7G,WAAO;AAAA,EACT;AACA,MAAI,SAAS,gBAAgB;AAC3B,WAAO;AAAA,EACT;AACA,MAAI,SAAS,eAAe;AAC1B,WAAO;AAAA,EACT;AACA,MAAI,SAAS,QAAQ;AACnB,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAKA,IAAM,gBAAgB,CAAC,EAAE,KAAK,MAA2C;AACvE,QAAM,EAAE,SAAS,IAAI,iBAAiB,EAAE,KAAK,CAAC;AAC9C,QAAM,WAAW,gBAAgB,sBAAsB,IAAI,CAAC;AAM5D,MAAI,QAAqB,aAAa;AAEtC,MAAI,CAAC,UAAU;AACb,YAAQ,aAAa;AAAA,EACvB;AAEA,UAAQ,qCAAU,MAAM;AAAA,IACtB,KAAK;AACH,cAAQ,aAAa;AACrB;AAAA,IACF,KAAK;AACH,cAAQ,aAAa;AACrB;AAAA,IACF,KAAK;AACH,cAAQ,aAAa;AACrB;AAAA,IACF,KAAK;AACH,cAAQ,aAAa;AACrB;AAAA,IACF;AACE;AAAA,EACJ;AAEA,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAKA,IAAM,UAAU,CAAC,EAAE,UAAU,MAAwD;AACnF,QAAM,EAAE,OAAO,IAAI,gBAAgB;AACnC,QAAM,WAAW,OAAO,SAAS,IAAI,eAAe,UAAU,eAAe;AAI7E,QAAM,WAAiB;AAAA,IACrB,CAAC,UAAoC;AACnC,YAAM,eAAe;AACrB,UAAI,WAAW;AACb,kBAAU,KAAK,EAAE,MAAM,SAAS,CAAC;AAAA,MACnC;AAAA,IACF;AAAA,IACA,CAAC,SAAS;AAAA,EACZ;AAEA,SAAO;AAAA,IACL,OAAO;AAAA,MACL,CAAC,QAAQ,QAAQ,EAAE,GAAG;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,WAAW,CAAC,EAAE,KAAK,MAA2C;AAClE,QAAM,WAAW,gBAAgB,sBAAsB,IAAI,CAAC;AAC5D,QAAM,EAAE,SAAS,IAAI,iBAAiB,EAAE,KAAK,CAAC;AAE9C,QAAM,iBAAiB;AACvB,QAAM,WAAW,WAAW,SAAS,SAAS,UAAU;AACxD,QAAM,WAAW,WAAW,eAAe,UAAU,eAAe;AAEpE,SAAO;AAAA,IACL;AAAA,IACA,OAAO;AAAA,MACL,CAAC,QAAQ,QAAQ,EAAE,GAAG;AAAA,MACtB,eAAe,iBAAiB,OAAO;AAAA,MACvC,eAAe;AAAA,IACjB;AAAA,EACF;AACF;AAEA,IAAM,WAAW,CAAC;AAAA,EAChB,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,GAAG;AACL,MAAsB;AAEpB,QAAM,eAAe,gBAAgB;AACrC,QAAM,OAAO,cAAa,6CAAc;AACxC,QAAM,EAAE,OAAO,WAAW,IAAI,cAAc,EAAE,KAAK,CAAC;AAEpD,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,8EAA8E;AAAA,EAChG;AAEA,QAAM,MAAM,aAAa;AACzB,QAAM,CAAC,oBAAoB,sBAAsB,IAAU,gBAAS,KAAK;AAEzE,QAAM,EAAE,iBAAiB,IAAI,YAAY;AAAA,IACvC,wBAAwB,eAAa,uBAAuB,SAAS;AAAA,IACrE,qBAAqB,MAAM;AACzB,UAAI,KAAK;AAAA,QACP,MAAM;AAAA,QACN,OAAO,EAAE,MAAM,UAAU,EAAE,MAAM,WAAW,SAAS,sDAAsD,EAAE;AAAA,MAC/G,CAAC;AAAA,IACH;AAAA,IACA,mBAAmB,CAAC,OAAO,SAAS;AAClC,UAAI,OAAO;AACT,YAAI,KAAK;AAAA,UACP,MAAM;AAAA,UACN,OAAO;AAAA,YACL;AAAA,YACA,UAAU;AAAA,cACR,MAAM;AAAA,cACN,SAAS,IAAI,wBAAwB,6BAA6B,KAAK;AAAA,cACvE,OAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IACA,qBAAqB,CAAC,SAAS,SAC7B,IAAI,KAAK;AAAA,MACP,MAAM;AAAA,MACN,OAAO,EAAE,MAAM,UAAU,EAAE,MAAM,WAAW,SAAS,SAAS,OAAO,KAAK,EAAE;AAAA,IAC9E,CAAC;AAAA,IACH,kBAAkB,CAAC,MAAM,SAAS;AAEhC,UAAI,KAAK;AAAA,QACP,MAAM;AAAA,QACN,OAAO,EAAE,MAAM,UAAU,EAAE,MAAM,QAAQ,SAAS,MAAM,OAAO,KAAK,EAAE;AAAA,MACxE,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACD,QAAM,QAAQ,gBAAgB,mBAAmB,IAAI,CAAC;AACtD,QAAM,WAAW,QAAQ,KAAK;AAC9B,QAAM,OAAO,gCAAa,2BAA2B,IAAI;AACzD,MAAI,yBAAyB;AAE7B,MAAI,SAAS,cAAc,SAAS,QAAQ;AAC1C,6BAAyB,QAAS,iBAAwC,gBAAgB;AAAA,EAC5F;AAGA,EAAM,iBAAU,MAAM;AACpB,QAAI,CAAC,QAAQ,IAAI,YAAY,EAAE,QAAQ,OAAO,IAAI,IAAI,GAAG;AACvD;AAAA,IACF;AAEA,QAAI,KAAK,EAAE,MAAM,aAAa,OAAO,EAAE,MAAM,OAAO,aAAa,EAAE,CAAC;AAEpE,WAAO,MAAM,IAAI,KAAK,EAAE,MAAM,gBAAgB,OAAO,EAAE,KAAK,EAAE,CAAC;AAAA,EACjE,GAAG,CAAC,GAAG,CAAC;AAGR,QAAM,WAAiB;AAAA,IACrB,CAAC,UAA+C;AAC9C,mDAAe;AACf,UAAI,CAAC,QAAQ,cAAc;AACzB;AAAA,MACF;AACA,UAAI,KAAK,EAAE,MAAM,gBAAgB,OAAO,EAAE,MAAM,OAAO,MAAM,OAAO,MAAM,EAAE,CAAC;AAC7E,UAAI,wBAAwB;AAC1B,yBAAiB,MAAM,OAAO,KAAK;AAAA,MACrC;AAAA,IACF;AAAA,IACA,CAAC,KAAK,MAAM,cAAc,cAAc,wBAAwB,gBAAgB;AAAA,EAClF;AAEA,QAAM,SAAe;AAAA,IACnB,CAAC,UAA8C;AAC7C,+CAAa;AACb,UAAI,wBAAwB;AAC1B,yBAAiB,MAAM,OAAO,KAAK;AAAA,MACrC;AAAA,IACF;AAAA,IACA,CAAC,YAAY,wBAAwB,gBAAgB;AAAA,EACvD;AAEA,QAAM,UAAgB;AAAA,IACpB,CAAC,UAA8C;AAC7C,iDAAc;AACd,UAAI,wBAAwB;AAC1B,yBAAiB,MAAM,OAAO,KAAK;AAAA,MACrC;AAAA,IACF;AAAA,IACA,CAAC,aAAa,wBAAwB,gBAAgB;AAAA,EACxD;AAEA,EAAM,iBAAU,MAAM;AACpB,QAAI,CAAC,gBAAgB,CAAC,MAAM;AAC1B;AAAA,IACF;AACA,QAAI,KAAK,EAAE,MAAM,gBAAgB,OAAO,EAAE,MAAM,OAAO,aAAa,EAAE,CAAC;AAAA,EACzE,GAAG,CAAC,MAAM,KAAK,YAAY,CAAC;AAE5B,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,8EAA8E;AAAA,EAChG;AAGA,QAAM,iBAAiB;AAEvB,QAAM,UAAU,SAAS,QAAQ,WAAW,mBAAAC;AAE5C,MAAI,QAAQ,CAAC;AACb,MAAI,SAAS,OAAO;AAClB,UAAM,IAAI;AACV,UAAM,SAAS,EAAE,UAAU;AAE3B,YAAQ;AAAA,MACN,kBAAkB;AAAA,MAClB,cAAc;AAAA,MACd,WAAW;AAAA,MACX,SAAS,SAAS,MAAM;AAAA,MACxB,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU,CAAC,UAA+C;AAExD,cAAM,cAAc,QAAQ,MAAM,cAAc,MAAM,QAAQ,QAAQ,EAAE;AACxE,iBAAS,KAAK;AAAA,MAChB;AAAA,MACA,MAAM;AAAA,MACN,YAAY;AAAA,IACd;AAAA,EACF;AACA,MAAI,SAAS,cAAc,wBAAwB;AACjD,YAAQ;AAAA,MACN,8BAA8B,qBAAqB,OAAO;AAAA,IAC5D;AAAA,EACF;AAIA,QAAM,EAAE,kBAAkB,IAAI,GAAG,KAAK,IAAI;AAE1C,SAAO;AAAA,IACL;AAAA,IACA,OAAO;AAAA,MACL;AAAA,MACA,OAAO,wBAAS;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAe,iBAAiB,OAAO;AAAA,MACvC,kBAAkB,WAAW,OAAO;AAAA,MACpC,cAAc;AAAA,MACd,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AACF;AAMA,IAAM,YAAY;AAOlB,IAAM,OAAa,kBAAmC,CAAC,EAAE,WAAW,UAAU,GAAG,KAAK,GAAG,iBAAiB;AACxG,QAAM,OAAO,QAAQ,EAAE,UAAqB,CAAC;AAE7C,QAAM,EAAE,UAAU,kBAAkB,GAAG,kBAAkB,IAAI,KAAK;AAElE,SACE;AAAA,IAAC,mBAAAC;AAAA,IAAA;AAAA,MACE,GAAG;AAAA,MACH,GAAG;AAAA,MACJ,UAAU,0CAAqB,kBAAkB,QAAQ;AAAA,MACzD,KAAK;AAAA;AAAA,EACP;AAEJ,CAAC;AAED,KAAK,cAAc;AAMnB,IAAM,aAAa;AACnB,IAAM,mBAAmB;AACzB,IAAM,mBAAmB;AA8BzB,IAAM,QAAc,kBAA6C,CAAC,EAAE,YAAY,GAAG,KAAK,GAAG,iBAAiB;AA/Z5G,MAAAC;AAgaE,QAAM,UAAU,aAAa;AAC7B,QAAM,UAAU,QAAQ,YAAY,EAAE;AAEtC,QAAM,gBAAgB,QAAQ,eAAe,SAAQA,MAAA,QAAQ,WAAR,gBAAAA,IAAgB,IAAI,KAAK,KAAK;AAGnF,QAAM,aAAa,aAAa,QAAQ;AAExC,SAAO,aAAa,OAClB,6CAAC,aAAa,UAAb,EAAsB,OAAO,EAAE,MAAM,KAAK,KAAK,GAC9C;AAAA,IAAC;AAAA;AAAA,MACE,GAAG;AAAA,MACJ,KAAK;AAAA;AAAA,EACP,GACF;AAEJ,CAAC;AAED,IAAM,aAAmB,kBAA6C,CAAC,OAAO,iBAAiB;AAC7F,QAAM,EAAE,UAAU,GAAG,KAAK,IAAI;AAC9B,QAAM,QAAQ,SAAS,EAAE,MAAM,KAAK,KAAK,CAAC;AAC1C,QAAM,EAAE,OAAO,WAAW,IAAI,cAAc,EAAE,MAAM,KAAK,KAAK,CAAC;AAE/D,SACE;AAAA,IAAC,mBAAAC;AAAA,IAAA;AAAA,MACE,GAAG,MAAM;AAAA,MACT,GAAG;AAAA,MACJ,KAAK;AAAA,MAEJ,iBAAO,aAAa,aAAa,SAAS,UAAU,IAAI;AAAA;AAAA,EAC3D;AAEJ,CAAC;AAED,MAAM,cAAc;AACpB,WAAW,cAAc;AAuCzB,SAAS,WAAW,EAAE,SAAS,GAAuB;AACpD,QAAM,QAAQ,gBAAgB;AAC9B,QAAM,EAAE,SAAS,IAAI,iBAAiB,EAAE,MAAM,+BAAO,KAAK,CAAC;AAC3D,QAAM,EAAE,MAAM,IAAI,cAAc,EAAE,MAAM,+BAAO,KAAK,CAAC;AAErD,QAAM,WAAU,qCAAU,oBAAmB,0BAA0B,SAAS,QAAQ,UAAU,qCAAU;AAC5G,QAAM,QAAQ,qCAAU;AAExB,QAAM,aAAa,EAAE,OAAO,SAAS,MAAM;AAE3C,SAAO,SAAS,UAAU;AAC5B;AAEA,WAAW,cAAc;AAMzB,IAAM,aAAa;AA8CnB,IAAM,QAAc;AAAA,EAClB,CAAC,OAAuB,iBAAiB;AA5iB3C,QAAAD,KAAAE,KAAA;AA6iBI,UAAM,YAAQ,8BAAS;AACvB,UAAM,QAAQ,SAAS,KAAK;AAE5B,UAAM,yBAAyB,SAAQF,MAAA,MAAM,MAAM,iBAAZ,gBAAAA,IAA0B,SAAS,WAAW;AACrF,UAAM,wBAAyB,CAAC,QAAQ,SAAS,KAAK,EAA+B,SAAS,MAAM,MAAM,IAAI;AAC9G,UAAM,kBAAkB,gBAAgB,YAAY,IAAI;AAExD,gBAAM,cAAN,mBAAiB;AAAA,UACf,wCAAsB,kBAAkB;AAAA,QACtC,OAAME,MAAA,MAAM,SAAN,OAAAA,MAAc;AAAA;AAAA,QAEpB,QAAQ,QAAQ,+BAAO,MAAM;AAAA;AAAA,QAE7B,SAAS,QAAQ,+BAAO,OAAO;AAAA;AAAA,QAE/B,kBAAkB,QAAQ,+BAAO,gBAAgB;AAAA,MACnD,CAAC;AAAA;AAGH,QAAI,mBAAmB,0BAA0B,uBAAuB;AACtE,aACE;AAAA,QAAC;AAAA;AAAA,UACC,KAAK;AAAA,UACJ,GAAG;AAAA;AAAA,MACN;AAAA,IAEJ;AAEA,QAAI,0BAA0B,CAAC,uBAAuB;AACpD,2BAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF,WAAW,wBAAwB;AACjC,2BAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAEA,WACE;AAAA,MAAC,MAAM;AAAA,MAAN;AAAA,QACC,KAAK;AAAA,QACJ,GAAG,MAAM;AAAA;AAAA,IACZ;AAAA,EAEJ;AACF;AAEA,MAAM,cAAc;AAEpB,IAAM,2BAAiC;AAAA,EACrC,CAAC,OAAuB,iBAAiB;AACvC,UAAM,kBAAkB,gBAAgB,YAAY,IAAI;AACxD,UAAM,2BAA2B,yBAAyB;AAE1D,IAAM,iBAAU,MAAM;AACpB,UAAI,0BAA0B;AAC5B,2DAAiB,KAAK,EAAE,MAAM,gCAAgC;AAAA,MAChE;AAAA,IACF,GAAG,CAAC,0BAA0B,eAAe,CAAC;AAE9C,UAAM,QAAQ,SAAS,KAAK;AAC5B,WACE;AAAA,MAAC,MAAM;AAAA,MAAN;AAAA,QACC,KAAK;AAAA,QACJ,GAAG,MAAM;AAAA;AAAA,IACZ;AAAA,EAEJ;AACF;AAMA,IAAM,aAAa;AAanB,IAAM,QAAQ,mBAAAC;AAEd,MAAM,cAAc;AAMpB,IAAM,cAAc;AAUpB,IAAM,SAAS,mBAAAC;AAEf,OAAO,cAAc;AAMrB,IAAM,oBAAoB;AAC1B,IAAM,mBAAmB;AAiDzB,IAAM,cAAoB;AAAA,EACxB,CAAC,EAAE,UAAU,OAAO,UAAU,MAAM,GAAG,KAAK,GAAG,iBAAiB;AAC9D,UAAM,EAAE,OAAO,IAAI,gBAAgB;AAEnC,UAAM,QAAQ,iCAAS;AAEvB,QAAI,CAAC,SAAU,QAAQ,MAAM,SAAS,MAAO;AAC3C,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,UAAU,yBAAO;AAC9B,UAAM,QAAQ,OAAO,aAAa,aAAa,SAAS,KAAK,IAAI;AAEjE,QAAI,gBAAgB,KAAK,GAAG;AAC1B,YAAM,IAAI,0BAA0B,sDAAsD;AAAA,IAC5F;AAEA,WACE;AAAA,MAAC;AAAA;AAAA,QACC,MAAK;AAAA,QACJ,GAAG;AAAA,QACJ,KAAK;AAAA,QAEJ,mBAAS,MAAM;AAAA;AAAA,IAClB;AAAA,EAEJ;AACF;AAsBA,IAAM,aAAmB;AAAA,EACvB,CAAC,EAAE,UAAU,OAAO,UAAU,MAAM,MAAM,GAAG,KAAK,GAAG,iBAAiB;AACpE,UAAM,eAAe,gBAAgB;AACrC,UAAM,aAAY,6CAAc,SAAQ;AACxC,UAAM,EAAE,SAAS,IAAI,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAEzD,QAAI,GAAE,qCAAU,UAAS,UAAU;AACjC,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,SAAS;AAEvB,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,UAAU,yBAAO;AAC9B,UAAM,QAAQ,OAAO,aAAa,aAAa,SAAS,KAAK,IAAI;AAIjE,QAAI,gBAAgB,KAAK,GAAG;AAC1B,YAAM,IAAI,0BAA0B,qDAAqD;AAAA,IAC3F;AAEA,WACE;AAAA,MAAC,mBAAAC;AAAA,MAAA;AAAA,QACC,mBAAiB,MAAM;AAAA,QAEtB,GAAG;AAAA,QACJ,KAAK;AAAA,QACL,SAAO;AAAA,QAEP,uDAAC,QAAM,mBAAS,MAAM,SAAQ;AAAA;AAAA,IAChC;AAAA,EAEJ;AACF;AAEA,YAAY,cAAc;AAC1B,WAAW,cAAc;;;ASzyBzB,IAAAC,iBAA0B;AAC1B,IAAAC,qBAAuC;AACvC,IAAAC,gBAAkB;;;ACFX,SAAS,8BAA8B,UAAkB;AAC9D,SAAO,SAAS,QAAQ,kBAAkB,EAAE;AAC9C;;;ADcO,IAAM,6BAA6B,MAAM;AAC9C,QAAM,UAAU,cAAAC,QAAM,OAAe;AAMrC,QAAM,kBAAc,0BAAU;AAE9B,MAAI,aAAa;AACf,QAAI,QAAQ,SAAS;AACnB,aAAO,QAAQ;AAAA,IACjB,OAAO;AAEL,cAAQ,UAAU,8BAA8B,YAAY,QAAQ;AACpE,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AAWA,QAAM,eAAW,gCAAY,KAAK;AAClC,QAAM,YAAY,SAAS,MAAM,GAAG,EAAE,OAAO,OAAO;AAKpD,QAAM,iBAAiB,OAAO,WAAO,8BAAU,KAAK,CAAC,CAAC,EACnD,OAAO,OAAK,MAAM,QAAQ,CAAC,CAAC,EAC5B,KAAK,QAAQ;AAChB,MAAI,QAAQ,SAAS;AACnB,WAAO,QAAQ;AAAA,EACjB,OAAO;AAEL,YAAQ,UAAU,IAAI,UAAU,MAAM,GAAG,UAAU,SAAS,eAAe,MAAM,EAAE,KAAK,GAAG,CAAC;AAC5F,WAAO,QAAQ;AAAA,EACjB;AACF;;;AjCEmB,IAAAC,sBAAA;AAxCnB,IAAM,YAAQ,4BAAY,qBAAqB,EAAE,QAAQ,CAAC;AAC1D,MAAM,MAAM;AAEZ,SAAS,mBAAmB,EAAE,UAAU,YAAY,GAA4B;AAC9E,QAAM,YAAQ,8BAAS;AACvB,QAAM,SAAS,eAAe;AAC9B,QAAM,UAAU,aAAa;AAC7B,QAAM,cAAU,2BAAY,OAAO,WAAS,MAAM,UAAU,MAAM;AAElE,+BAAU,MAAM;AACd,QAAI,CAAC,SAAS,CAAC,QAAQ;AACrB;AAAA,IACF;AAGA,UAAM,YAAY,MAAM;AACtB,YAAM,MAA6B;AAAA,QACjC,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,MACd;AAEA,UAAI,MAAM,YAAY,EAAE,IAAI,GAAG,GAAG;AAChC,cAAM,KAAK,GAAG;AAAA,MAChB;AAGA,UAAI,WAAW,MAAM,YAAY,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC,GAAG;AAC9D,cAAM,KAAK;AAAA,UACT,MAAM;AAAA,UACN;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EAEH,GAAG,CAAC,OAAO,aAAa,mCAAS,IAAI,CAAC,CAAC,MAAM,CAAC;AAE9C,SAAO,UAAU,6CAAC,gBAAgB,UAAhB,EAAyB,UAAU,OAAQ,UAAS,IAA8B;AACtG;AAmCO,SAAS,WAAW;AAAA,EACzB;AAAA,EACA,cAAc;AAAA,EACd,WAAW;AAAA,EACX,MAAM;AAAA,EACN,UAAU,QAAQ;AACpB,GAAwC;AAxGxC,MAAAC;AAyGE,QAAM,YAAQ,8BAAS;AACvB,QAAM,eAAe,2BAA2B;AAChD,QAAM,OAAO,YAAY,gBAAgB;AAEzC,GAAAA,MAAA,MAAM,cAAN,gBAAAA,IAAiB;AAAA,QACf,yCAAsB,uBAAuB;AAAA,MAC3C;AAAA,MACA,UAAU,QAAQ,QAAQ;AAAA,MAC1B;AAAA,MACA;AAAA,IACF,CAAC;AAAA;AAIH,QAAM,UAAU,YAAY,QAAQ,UAAU,mBAAmB,eAAe;AAChF,QAAM,aAAa,SAAS,OAAO,SAAS;AAE5C,SACE;AAAA,IAAC;AAAA;AAAA,MACC,UAAU;AAAA,MACV;AAAA,MAEA,uDAAC,qBACC,wDAAC,sBAAmB,aACjB;AAAA,qBACC,6CAAC,oCACC,uDAAC,QAAM,oBAAS,GAClB,IACE;AAAA,QACJ,6CAAC,mCAAa,UAAS;AAAA,SACzB,GACF;AAAA;AAAA,EACF;AAEJ;;;AmC3IA,IAAAC,sBAAyB;AACzB,IAAAC,oBAAsC;;;ACDtC,IAAAC,gBAA4B;AAMrB,IAAM,iBAAiB;AAAA,EAC5B,KAAK;AAAA,EACL,KAAK;AACP;AAqCO,SAAS,cACdC,QACA,MACA,OAA0B,eAAe,KACd;AAC3B,QAAM,YAAQ;AAAA,IACZA;AAAA,IACA,OAAK;AAAA,IACL,CAAC,MAAM,SAAS,KAAK,SAAS,KAAK;AAAA,EACrC;AAEA,MAAI,OAAO,SAAS,UAAU;AAC5B,WAAO,MAAM,OAAO,IAAI;AAAA,EAC1B;AAEA,MAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,UAAM,IAAI,MAAM,kDAAkD;AAAA,EACpE;AAEA,UAAQ,MAAM;AAAA,IACZ,KAAK,eAAe,KAAK;AACvB,YAAM,WAAW,IAAI,IAAI,KAAK,OAAO,SAAO,MAAM,OAAO,GAAG,CAAC,CAAC;AAC9D,aAAO,EAAE,QAAQ,SAAS,OAAO,GAAG,YAAY,SAAS;AAAA,IAC3D;AAAA,IACA,KAAK,eAAe;AAClB,aAAO,KAAK,WAAW,MAAM,KAAK,OAAO,KAAK,MAAM,SAAO,MAAM,OAAO,GAAG,CAAC,IAAI;AAAA,IAClF;AACE,aAAO;AAAA,EACX;AACF;;;AC5DuB,IAAAC,sBAAA;AANhB,IAAM,oBAAoB,0BAAkD,mBAAmB;AAE/F,SAAS,eAAe,OAA4B;AACzD,QAAM,YAAY,gBAAgB,YAAY;AAC9C,QAAM,cAAc,cAAc,WAAW,gBAAgB;AAE7D,SAAO,cAAc,6CAAC,uBAAqB,GAAG,OAAO,IAAK;AAC5D;AAEA,SAAS,oBAAoB,OAA4B;AACvD,QAAM,MAAM,sBAAsB;AAElC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,SACE,6CAAC,kBAAkB,UAAlB,EAA2B,UAAU,KACpC;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,MACV,GAAG;AAAA;AAAA,EACN,GACF;AAEJ;;;AClBuB,IAAAC,sBAAA;AANhB,IAAM,iBAAiB,0BAA+C,gBAAgB;AAEtF,SAAS,YAAY,OAAyB;AACnD,QAAM,YAAY,gBAAgB,YAAY;AAC9C,QAAM,cAAc,cAAc,WAAW,aAAa;AAE1D,SAAO,cAAc,6CAAC,oBAAkB,GAAG,OAAO,IAAK;AACzD;AAEA,SAAS,iBAAiB,OAAyB;AACjD,QAAM,MAAM,mBAAmB;AAE/B,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,SACE,6CAAC,eAAe,UAAf,EAAwB,UAAU,KACjC;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,MACV,GAAG;AAAA;AAAA,EACN,GACF;AAEJ;;;ACEuB,IAAAC,sBAAA;AArBhB,IAAM,wBAAwB,0BAAsD,uBAAuB;AAiB3G,SAAS,oBAAoB,OAAiC;AACnE,QAAM,MAAM,gBAAgB,YAAY;AACxC,QAAM,cAAc,cAAc,KAAK,oBAAoB;AAE3D,SAAO,cAAc,6CAAC,qBAAmB,GAAG,OAAO,IAAK;AAC1D;AAEA,SAAS,kBAAkB,OAAiC;AAC1D,QAAM,MAAM,0BAA0B;AAEtC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,SACE,6CAAC,sBAAsB,UAAtB,EAA+B,UAAU,KACxC;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,MACV,GAAG;AAAA;AAAA,EACN,GACF;AAEJ;AAmBO,SAAS,eAAe,EAAE,UAAU,MAAM,IAAI,GAAwB;AAC3E,QAAM,MAAM,sBAAsB,YAAY,IAAI;AAElD,MAAI,CAAC,KAAK;AACR,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,QAAM,EAAE,OAAO,IAAI,cAAc,KAAK;AAAA,IACpC,gBAAgB,GAAG;AAAA,IACnB,yBAAyB,GAAG;AAAA,EAC9B,CAAwC;AAExC,SAAO,SAAS,6EAAG,UAAS,IAAM;AACpC;;;AJxCa,IAAAC,sBAAA;AAnCN,IAAM,gBAAgB;AAAA,EAC3B,OAAO;AAAA,EACP,UAAU;AAAA,EACV,eAAe;AACjB;AAwBO,SAAS,WAAW,OAAwB;AAxCnD,MAAAC;AAyCE,QAAM,YAAQ,8BAAS;AAEvB,GAAAA,MAAA,MAAM,cAAN,gBAAAA,IAAiB,WAAO,yCAAsB,uBAAuB,EAAE,MAAM,MAAM,KAAK,CAAC;AAEzF,UAAQ,MAAM,MAAM;AAAA,IAClB,KAAK,cAAc;AACjB,aAAO,6CAAC,eAAa,GAAG,OAAO;AAAA,IACjC,KAAK,cAAc;AACjB,aAAO,6CAAC,kBAAgB,GAAG,OAAO;AAAA,IACpC,KAAK,cAAc;AACjB,aAAO,6CAAC,uBAAqB,GAAG,OAAO;AAAA,IACzC;AACE,YAAM,IAAI,0BAA0B,iEAAiE;AAAA,EACzG;AACF;;;AKvDA,IAAAC,SAAuB;;;ACCvB,yBAAO;;;ACDP,IAAAC,qBAAqB;AACrB,IAAAC,SAAuB;AAgDjB,IAAAC,sBAAA;AA5CN,IAAM,wBAAwB;AAC9B,IAAM,2BAA2B;AAAA,EAC/B,OAAO;AAAA,EACP,UAAU;AACZ;AAsBO,IAAM,iBAAuB;AAAA,EAClC,CAAC,EAAE,SAAS,IAAI,GAAG,KAAK,GAAG,iBAAiB;AAC1C,UAAM,WAAW,gBAAgB,YAAY;AAE7C,UAAM,OAAO,UAAU,0BAAO;AAC9B,UAAM,eAAe,UAAU,CAAC,IAAI,EAAE,MAAM,SAAkB;AAE9D,UAAM,YAAkB,mBAAY,MAAM;AACxC,YAAM,OAAO,yBAAyB,EAAE;AAExC,UAAI,SAAS,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG;AACxC,iBAAS,KAAK,EAAE,KAAK,CAAC;AAAA,MACxB,OAAO;AACL,gBAAQ,KAAK,2BAA2B;AAAA,MAC1C;AAAA,IACF,GAAG,CAAC,UAAU,EAAE,CAAC;AAEjB,WACE;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACH,GAAG;AAAA,QACJ,SAAS;AAAA,QACT,KAAK;AAAA;AAAA,IACP;AAAA,EAEJ;AACF;AAEA,eAAe,cAAc;;;AC3D7B,IAAAC,qBAAqB;AACrB,IAAAC,iBAA4B;AAC5B,IAAAC,SAAuB;AAwDjB,IAAAC,uBAAA;AArCN,IAAM,sBAAsB;AAYrB,IAAM,eAAqB;AAAA,EAChC,CAAC,EAAE,SAAS,UAAU,GAAG,KAAK,GAAG,iBAAiB;AAChD,UAAM,MAAM,sBAAsB,YAAY,IAAI;AAElD,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,2EAA2E;AAAA,IAC7F;AAEA,UAAM,oBAA2C;AAAA,MAC/C;AAAA,MACA,YAAU;AAAA,QACR,YAAY,MAAM,QAAQ;AAAA,QAC1B,iBAAiB,MAAM,QAAQ;AAAA,MACjC;AAAA,MACA,CAAC,GAAG,MAAM,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,eAAe,EAAE;AAAA,IAC1E;AAEA,QAAI,YAAY,CAAC,cAAc,YAAY;AACzC,aAAO,OAAO,aAAa,aAAa,SAAS,aAAa,IAAI;AAAA,IACpE;AAEA,UAAM,OAAO,UAAU,0BAAO;AAC9B,UAAM,eAAe,UAAU,CAAC,IAAI,EAAE,MAAM,SAAkB;AAE9D,WACE;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACH,GAAG;AAAA,QACJ,UAAU,CAAC,cAAc;AAAA,QACzB,SAAS,MAAM,IAAI,KAAK,EAAE,MAAM,QAAQ,CAAC;AAAA,QACzC,KAAK;AAAA;AAAA,IACP;AAAA,EAEJ;AACF;AAEA,aAAa,cAAc;;;AHjBvB,IAAAC,uBAAA;AAbG,IAAM,eAAqB,kBAA0D,CAAC,OAAO,iBAAiB;AACnH,QAAM,EAAE,QAAQ,UAAU,QAAQ,GAAG,KAAK,IAAI;AAC9C,MAAI;AAEJ,MAAI,QAAQ;AACV,WAAO;AAAA,EACT,WAAW,UAAU;AACnB,WAAO;AAAA,EACT,WAAW,QAAQ;AACjB,WAAO;AAAA,EACT;AAEA,SAAO,OACL;AAAA,IAAC;AAAA;AAAA,MACC,IAAI;AAAA,MACH,GAAG;AAAA,MACJ,KAAK;AAAA;AAAA,EACP,IACE;AACN,CAAC;AAED,aAAa,cAAc;;;AI5D3B,IAAAC,qBAAqB;AACrB,IAAAC,UAAuB;AA2DjB,IAAAC,uBAAA;AAXC,IAAM,gBAAsB;AAAA,EACjC,CAAC,EAAE,SAAS,UAAU,GAAG,KAAK,GAAG,iBAAiB;AAChD,UAAM,MAAM,eAAe,YAAY,IAAI;AAE3C,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,0BAA0B,yEAAyE;AAAA,IAC/G;AAEA,UAAM,OAAO,UAAU,0BAAO;AAE9B,WACE;AAAA,MAAC;AAAA;AAAA,QACC,IAAI;AAAA,QACH,GAAG;AAAA,QACJ,KAAK;AAAA;AAAA,IACP;AAAA,EAEJ;AACF;","names":["import_client_only","import_clerk_react","import_telemetry","import_react","import_xstate","_a","_b","_a","_b","_a","import_underscore","import_xstate","import_xstate","import_xstate","_a","import_xstate","import_xstate","import_xstate","_a","_a","_b","import_react","import_url","import_react","import_react","useContext","useSelector","actor","useSelectorUnbound","import_clerk_react","composeEventHandlers","originalEventHandler","ourEventHandler","checkForDefaultPrevented","handleEvent","event","defaultPrevented","import_react_form","React","import_shared","React","_a","_b","React","React","import_jsx_runtime","OTPInput","_a","_b","RadixControl","import_jsx_runtime","RadixControl","RadixForm","_a","RadixField","_b","RadixLabel","RadixSubmit","RadixFormMessage","import_router","import_navigation","import_react","React","import_jsx_runtime","_a","import_clerk_react","import_telemetry","import_react","actor","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime","_a","React","import_react_slot","React","import_jsx_runtime","import_react_slot","import_react","React","import_jsx_runtime","import_jsx_runtime","import_react_slot","React","import_jsx_runtime"]}