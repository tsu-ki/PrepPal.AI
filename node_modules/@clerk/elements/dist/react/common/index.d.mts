export { F as Field, a as FieldError, b as FieldState, d as FormErrorProps, e as FormErrorRenderProps, c as FormFieldErrorProps, f as FormFieldProps, g as FormGlobalErrorProps, h as FormInputProps, i as FormProps, j as FormSubmitProps, G as GlobalError, I as Input, L as Label, O as OTPInputSegmentStatus, S as Submit } from '../../index-CbIXjVuO.mjs';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { OAuthProvider, Web3Provider, SamlStrategy } from '@clerk/types';
import * as React$1 from 'react';
import { T as TSignInStep } from '../../step-CzKHNpAq.mjs';
import { T as TSignUpStep } from '../../step-ar3a40XG.mjs';
import '@radix-ui/react-form';
import 'type-fest';
import 'xstate';

interface ConnectionProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    asChild?: boolean;
    name: OAuthProvider | Web3Provider;
}
/**
 * Renders a social connection button based on the provided name. If your instance does not have the social connection enabled, this component will throw an error in development.
 *
 * **Tip:** You can use the `<Icon />` component to render the social connection icon.
 *
 * @param {boolean} [asChild] - If true, `<Connection />` will render as its child element, passing along any necessary props.
 * @param {OAuthProvider | Web3Provider} name - The name of the social connection to render.
 *
 * @example
 * <SignIn.Root>
 *  <SignIn.Step name="start">
 *    <Clerk.Connection name="google">
 *      Sign in with Google
 *    </Clerk.Connection>
 *  </SignIn.Step>
 * </SignIn.Root>
 */
declare function Connection({ asChild, name, ...rest }: ConnectionProps): react_jsx_runtime.JSX.Element | null;
interface IconProps extends Omit<React.HTMLAttributes<HTMLImageElement>, 'src'> {
    asChild?: boolean;
}
/**
 * `<Icon>` **must** be used inside `<Connection>`. By default, `<Icon>` will render as an `<img>` element with the `src` pointing to the logo of the currently used `<Connection>`.
 *
 * @param {boolean} [asChild] - If true, `<Icon />` will render as its child element, passing along any necessary props.
 *
 * @example
 * <SignIn.Root>
 *  <SignIn.Step name="start">
 *    <Clerk.Connection name="google">
 *      <Clerk.Icon />
 *      Sign in with Google
 *    </Clerk.Connection>
 *  </SignIn.Step>
 * </SignIn.Root>
 */
declare function Icon({ asChild, ...rest }: IconProps): react_jsx_runtime.JSX.Element;

type Strategy = OAuthProvider | SamlStrategy | 'metamask';
type LoadingScope<T extends TSignInStep | TSignUpStep> = 'global' | `step:${T}` | `provider:${Strategy}` | undefined;
type LoadingProps = {
    scope?: LoadingScope<TSignInStep | TSignUpStep>;
    children: (isLoading: boolean) => React$1.ReactNode;
};
/**
 * Access the loading state of a chosen scope. Scope can refer to a step, a provider, or the global loading state. The global loading state is `true` when any of the other scopes are loading.
 *
 * @param scope - Optional. Specify which loading state to access. Can be a step, a provider, or the global loading state. If `<Loading>` is used outside a `<Step>`, the scope will default to "global". If used inside a `<Step>` the scope will default to the current step. For external authentication providers, the scope needs to be manually defined in the format of `provider:<provider name>`
 * @param {Function} children - A function that receives `isLoading` as an argument. `isLoading` is a boolean that indicates if the current scope is loading or not.
 *
 * @example
 * <SignIn.Root>
 *   <Clerk.Loading>
 *     {(isLoading) => isLoading && "Global loading..."}
 *   </Clerk.Loading>
 * </SignIn.Root>
 *
 * @example
 * <SignIn.Step name="start">
 *  <Clerk.Action submit>
 *    <Clerk.Loading>
 *      {(isLoading) => isLoading ? "Start is loading..." : "Submit"}
 *    </Clerk.Loading>
 *  </Clerk.Action>
 * </SignIn.Step>
 *
 * @example
 * <SignIn.Step name="start">
 *   <Clerk.Loading scope="provider:google">
 *     {(isLoading) => (
 *       <Clerk.Connection name="google" disabled={isLoading}>
 *         {isLoading ? "Loading..." : "Continue with Google"}
 *       </Clerk.Connection>
 *     )}
 *   </Clerk.Loading>
 * </SignIn.Step>
 */
declare function Loading({ children, scope }: LoadingProps): react_jsx_runtime.JSX.Element;

export { Connection, type ConnectionProps, Icon, type IconProps, Loading };
