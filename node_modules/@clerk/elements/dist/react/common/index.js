"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react/common/index.ts
var common_exports = {};
__export(common_exports, {
  Connection: () => Connection,
  Field: () => Field,
  FieldError: () => FieldError,
  FieldState: () => FieldState,
  GlobalError: () => GlobalError,
  Icon: () => Icon,
  Input: () => Input,
  Label: () => Label,
  Loading: () => Loading,
  Submit: () => Submit
});
module.exports = __toCommonJS(common_exports);
var import_client_only = require("client-only");

// src/react/common/form/index.tsx
var import_clerk_react2 = require("@clerk/clerk-react");
var import_logger = require("@clerk/shared/logger");
var import_telemetry = require("@clerk/shared/telemetry");

// ../../node_modules/@radix-ui/primitive/dist/index.mjs
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// src/react/common/form/index.tsx
var import_react_form2 = require("@radix-ui/react-form");
var import_react_slot = require("@radix-ui/react-slot");
var React5 = __toESM(require("react"));

// src/internals/errors/index.ts
var ClerkElementsErrorBase = class extends Error {
  constructor(code, message) {
    super(message);
    this.code = code;
    this.clerkError = true;
    this.clerkElementsError = true;
    this.name = "ClerkElementsError";
    this.rawMessage = message;
  }
  toString() {
    return `[${this.name}]
Code: ${this.code}
Message: ${this.message}`;
  }
};
var ClerkElementsError = class _ClerkElementsError extends ClerkElementsErrorBase {
  static fromAPIError(error) {
    return new _ClerkElementsError(error.code, error.longMessage || error.message);
  }
  constructor(code, message) {
    super(code, message);
    this.name = "ClerkElementsError";
  }
};
var ClerkElementsRuntimeError = class extends ClerkElementsErrorBase {
  constructor(message) {
    super("elements_runtime_error", message);
    this.name = "ClerkElementsRuntimeError";
  }
};
var ClerkElementsFieldError = class _ClerkElementsFieldError extends ClerkElementsErrorBase {
  constructor(code, message) {
    super(code, message);
    this.matchFn = () => true;
    this.name = "ClerkElementsFieldError";
  }
  static fromAPIError(error) {
    return new _ClerkElementsFieldError(error.code, error.longMessage || error.message);
  }
  get validityState() {
    return this.code;
  }
  get forceMatch() {
    return true;
  }
};

// src/internals/machines/form/form.context.ts
var import_react = require("@xstate/react");

// src/internals/machines/form/form.machine.ts
var import_error = require("@clerk/shared/error");
var import_underscore = require("@clerk/shared/underscore");
var import_xstate = require("xstate");
var FormMachine = (0, import_xstate.setup)({
  actions: {
    setGlobalErrors: (0, import_xstate.assign)({
      errors: (_, params) => [...params.errors]
    }),
    setFieldFeedback: (0, import_xstate.assign)({
      fields: ({ context }, params) => {
        if (!params.name) {
          throw new Error("Field name is required");
        }
        if (context.fields.has(params.name)) {
          context.fields.get(params.name).feedback = params.feedback;
        }
        return context.fields;
      }
    })
  },
  types: {}
}).createMachine({
  id: "Form",
  context: () => ({
    defaultValues: /* @__PURE__ */ new Map(),
    errors: [],
    fields: /* @__PURE__ */ new Map(),
    progressive: false
  }),
  on: {
    "ERRORS.SET": {
      actions: (0, import_xstate.enqueueActions)(({ enqueue, event }) => {
        var _a, _b;
        if ((0, import_error.isKnownError)(event.error)) {
          const fields = {};
          const globalErrors = [];
          for (const error of event.error.errors || [event.error]) {
            const name = (0, import_underscore.snakeToCamel)((_a = error.meta) == null ? void 0 : _a.paramName);
            if (!name) {
              globalErrors.push(ClerkElementsError.fromAPIError(error));
              continue;
            } else if (!fields[name]) {
              fields[name] = [];
            }
            (_b = fields[name]) == null ? void 0 : _b.push(ClerkElementsFieldError.fromAPIError(error));
          }
          enqueue({
            type: "setGlobalErrors",
            params: {
              errors: globalErrors
            }
          });
          for (const field in fields) {
            enqueue({
              type: "setFieldFeedback",
              params: {
                name: field,
                feedback: {
                  type: "error",
                  message: fields[field][0]
                }
              }
            });
          }
        }
      })
    },
    "ERRORS.CLEAR": {
      actions: (0, import_xstate.assign)({
        errors: () => []
      })
    },
    "FIELD.ADD": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          event.field.value = event.field.value || context.defaultValues.get(event.field.name) || void 0;
          context.fields.set(event.field.name, event.field);
          return context.fields;
        }
      })
    },
    "FIELD.UPDATE": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          if (context.fields.has(event.field.name)) {
            context.fields.get(event.field.name).value = event.field.value;
          }
          return context.fields;
        }
      })
    },
    "FIELD.REMOVE": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          context.fields.delete(event.field.name);
          return context.fields;
        }
      })
    },
    "FIELD.FEEDBACK.SET": {
      actions: [
        {
          type: "setFieldFeedback",
          params: ({ event }) => event.field
        }
      ]
    },
    "FIELD.FEEDBACK.CLEAR": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          if (context.fields.has(event.field.name)) {
            context.fields.get(event.field.name).feedback = void 0;
          }
          return context.fields;
        }
      })
    },
    "FIELD.FEEDBACK.CLEAR.ALL": {
      actions: (0, import_xstate.assign)({
        fields: ({ context }) => {
          context.fields.forEach((field) => {
            field.feedback = void 0;
          });
          return context.fields;
        }
      })
    },
    MARK_AS_PROGRESSIVE: {
      actions: (0, import_xstate.assign)(({ event }) => {
        const missing = new Set(event.missing);
        return {
          defaultValues: event.defaultValues,
          hidden: /* @__PURE__ */ new Set([...event.required.filter((f) => !missing.has(f)), ...event.optional]),
          missing,
          optional: new Set(event.optional),
          progressive: true,
          required: new Set(event.required)
        };
      })
    },
    UNMARK_AS_PROGRESSIVE: {
      actions: (0, import_xstate.assign)({
        defaultValues: /* @__PURE__ */ new Map(),
        hidden: void 0,
        missing: void 0,
        optional: void 0,
        progressive: false,
        required: void 0
      })
    }
  }
});

// src/internals/utils/inspector/index.ts
var inspect;
if (false) {
  inspect = (_a = getBrowserInspector()) != null ? _a : getConsoleInspector();
}

// src/internals/machines/form/form.context.ts
var FormMachineContext = (0, import_react.createActorContext)(FormMachine, { inspect });
var FormStoreProvider = FormMachineContext.Provider;
var useFormStore = FormMachineContext.useActorRef;
var useFormSelector = FormMachineContext.useSelector;
var globalErrorsSelector = (state) => state.context.errors;
var fieldValueSelector = (name) => (state) => {
  var _a;
  return name ? (_a = state.context.fields.get(name)) == null ? void 0 : _a.value : "";
};
var fieldHasValueSelector = (name) => (state) => Boolean(fieldValueSelector(name)(state));
var fieldFeedbackSelector = (name) => (state) => {
  var _a;
  return name ? (_a = state.context.fields.get(name)) == null ? void 0 : _a.feedback : void 0;
};

// src/react/hooks/use-password.hook.ts
var import_clerk_react = require("@clerk/clerk-react");
var import_shared = require("@clerk/shared");
var React = __toESM(require("react"));

// src/react/utils/generate-password-error-text.ts
var errorMessages = {
  max_length: ["less than %length% characters", "length"],
  min_length: ["%length% or more characters", "length"],
  require_numbers: "a number",
  require_lowercase: "a lowercase letter",
  require_uppercase: "an uppercase letter",
  require_special_char: "a special character"
};
var createListFormat = (message) => {
  let messageWithPrefix;
  if ("ListFormat" in Intl) {
    const formatter = new Intl.ListFormat("en", { style: "long", type: "conjunction" });
    messageWithPrefix = formatter.format(message);
  } else {
    messageWithPrefix = message.join(", ");
  }
  return messageWithPrefix;
};
var generatePasswordErrorText = ({ config, failedValidations }) => {
  const keys = [];
  if (!failedValidations || Object.keys(failedValidations).length === 0) {
    return {
      keys,
      message: ""
    };
  }
  const hasMinLengthError = (failedValidations == null ? void 0 : failedValidations.min_length) || false;
  const messages = Object.entries(failedValidations).filter((k) => hasMinLengthError ? k[0] === "min_length" : true).filter(([, v]) => !!v).map(([k]) => {
    const entry = k;
    keys.push(entry);
    const errorKey = errorMessages[entry];
    if (Array.isArray(errorKey)) {
      const [msg, replaceValue] = errorKey;
      return msg.replace(`%${replaceValue}%`, config[k]);
    }
    return errorKey;
  });
  const messageWithPrefix = createListFormat(messages);
  return {
    keys,
    message: `Your password must contain ${messageWithPrefix}.`
  };
};

// src/react/hooks/use-password.hook.ts
var usePassword = (callbacks) => {
  var _a;
  const clerk = (0, import_clerk_react.useClerk)();
  const passwordSettings = (_a = clerk.__unstable__environment) == null ? void 0 : _a.userSettings.passwordSettings;
  const { disable_hibp, min_zxcvbn_strength, show_zxcvbn, ...config } = passwordSettings || {};
  const {
    onValidationError = import_shared.noop,
    onValidationSuccess = import_shared.noop,
    onValidationWarning = import_shared.noop,
    onValidationInfo = import_shared.noop,
    onValidationComplexity
  } = callbacks || {};
  const onValidate = React.useCallback(
    (res) => {
      var _a2, _b, _c;
      if (res.complexity) {
        if (Object.values(res == null ? void 0 : res.complexity).length > 0) {
          const { message, keys } = generatePasswordErrorText({
            config,
            failedValidations: res.complexity
          });
          if ((_a2 = res.complexity) == null ? void 0 : _a2.min_length) {
            return onValidationInfo(message, keys);
          }
          return onValidationError(message, keys);
        }
      }
      if (((_b = res == null ? void 0 : res.strength) == null ? void 0 : _b.state) === "fail") {
        const keys = res.strength.keys;
        const error = keys.map((key) => get(zxcvbnKeys, key)).join(" ");
        return onValidationError(error, keys);
      }
      if (((_c = res == null ? void 0 : res.strength) == null ? void 0 : _c.state) === "pass") {
        const keys = res.strength.keys;
        const error = keys.map((key) => get(zxcvbnKeys, key)).join(" ");
        return onValidationWarning(error, keys);
      }
      return onValidationSuccess();
    },
    [callbacks]
  );
  const validatePassword = React.useMemo(() => {
    return (password) => {
      return clerk.client.signUp.validatePassword(password, {
        onValidation: onValidate,
        onValidationComplexity
      });
    };
  }, [onValidate]);
  return {
    validatePassword
  };
};
var get = (t, path) => path.split(".").reduce((r, k) => r == null ? void 0 : r[k], t);
var zxcvbnKeys = {
  unstable__errors: {
    zxcvbn: {
      couldBeStronger: "Your password works, but could be stronger. Try adding more characters.",
      goodPassword: "Your password meets all the necessary requirements.",
      notEnough: "Your password is not strong enough.",
      suggestions: {
        allUppercase: "Capitalize some, but not all letters.",
        anotherWord: "Add more words that are less common.",
        associatedYears: "Avoid years that are associated with you.",
        capitalization: "Capitalize more than the first letter.",
        dates: "Avoid dates and years that are associated with you.",
        l33t: "Avoid predictable letter substitutions like '@' for 'a'.",
        longerKeyboardPattern: "Use longer keyboard patterns and change typing direction multiple times.",
        noNeed: "You can create strong passwords without using symbols, numbers, or uppercase letters.",
        pwned: "If you use this password elsewhere, you should change it.",
        recentYears: "Avoid recent years.",
        repeated: "Avoid repeated words and characters.",
        reverseWords: "Avoid reversed spellings of common words.",
        sequences: "Avoid common character sequences.",
        useWords: "Use multiple words, but avoid common phrases."
      },
      warnings: {
        common: "This is a commonly used password.",
        commonNames: "Common names and surnames are easy to guess.",
        dates: "Dates are easy to guess.",
        extendedRepeat: 'Repeated character patterns like "abcabcabc" are easy to guess.',
        keyPattern: "Short keyboard patterns are easy to guess.",
        namesByThemselves: "Single names or surnames are easy to guess.",
        pwned: "Your password was exposed by a data breach on the Internet.",
        recentYears: "Recent years are easy to guess.",
        sequences: 'Common character sequences like "abc" are easy to guess.',
        similarToCommon: "This is similar to a commonly used password.",
        simpleRepeat: 'Repeated characters like "aaa" are easy to guess.',
        straightRow: "Straight rows of keys on your keyboard are easy to guess.",
        topHundred: "This is a frequently used password.",
        topTen: "This is a heavily used password.",
        userInputs: "There should not be any personal or page related data.",
        wordByItself: "Single words are easy to guess."
      }
    }
  }
};

// src/react/utils/create-context-from-actor-ref.ts
var import_react2 = require("@xstate/react");
var React2 = __toESM(require("react"));
function createContextFromActorRef(displayName) {
  const ReactContext = React2.createContext(null);
  const OriginalProvider = ReactContext.Provider;
  function Provider({ children, actorRef }) {
    return React2.createElement(
      OriginalProvider,
      {
        value: actorRef
      },
      children
    );
  }
  Provider.displayName = displayName;
  function useContext5(allowMissingActor = false) {
    const actorRef = React2.useContext(ReactContext);
    if (!allowMissingActor && !actorRef) {
      throw new Error(
        `You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`
      );
    }
    return actorRef;
  }
  function useSelector4(selector, compare) {
    const actor = useContext5();
    return (0, import_react2.useSelector)(actor, selector, compare);
  }
  return {
    Provider,
    useActorRef: useContext5,
    useSelector: useSelector4
  };
}

// src/react/sign-in/context/router.context.ts
var SignInRouterCtx = createContextFromActorRef("SignInRouterCtx");
var useSignInPasskeyAutofill = () => SignInRouterCtx.useSelector((state) => state.context.webAuthnAutofillSupport);

// src/react/utils/is-react-fragment.ts
var React3 = __toESM(require("react"));
function isReactFragment(node) {
  return React3.isValidElement(node) && node.type === React3.Fragment;
}

// src/react/common/form/otp.tsx
var import_react_form = require("@radix-ui/react-form");
var React4 = __toESM(require("react"));
var import_jsx_runtime = require("react/jsx-runtime");
var ZERO = [0, 0];
var OUTSIDE = [-1, -1];
var OTP_LENGTH_DEFAULT = 6;
var PASSWORD_MANAGER_OFFSET_DEFAULT = 40;
var OTPInput = React4.forwardRef(function OTPInput2(props, ref) {
  const { render, length, autoSubmit, ...rest } = props;
  const hasRenderProp = typeof render !== "undefined";
  if (hasRenderProp) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      OTPInputSegmented,
      {
        ...rest,
        ref,
        render,
        length,
        autoSubmit
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    OTPInputStandard,
    {
      ...rest,
      ref,
      length,
      autoSubmit
    }
  );
});
var OTPInputStandard = React4.forwardRef(
  function OTPInput3(props, ref) {
    const { length = OTP_LENGTH_DEFAULT, autoSubmit = false, ...rest } = props;
    const innerRef = React4.useRef(null);
    React4.useImperativeHandle(ref, () => innerRef.current, []);
    React4.useEffect(() => {
      var _a, _b;
      if (String(props.value).length === length && autoSubmit) {
        (_b = (_a = innerRef.current) == null ? void 0 : _a.form) == null ? void 0 : _b.requestSubmit();
      }
    }, [props.value, length, autoSubmit]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_react_form.Control,
      {
        ref: innerRef,
        ...rest,
        "data-otp-input-standard": true
      }
    );
  }
);
var OTPInputSegmented = React4.forwardRef(
  function OTPInput4(props, ref) {
    const {
      className: userProvidedClassName,
      render,
      length = OTP_LENGTH_DEFAULT,
      autoSubmit = false,
      passwordManagerOffset = PASSWORD_MANAGER_OFFSET_DEFAULT,
      ...rest
    } = props;
    const innerRef = React4.useRef(null);
    const [selectionRange, setSelectionRange] = React4.useState(props.autoFocus ? ZERO : OUTSIDE);
    const [isHovering, setIsHovering] = React4.useState(false);
    const isFocused = () => document.activeElement === innerRef.current;
    React4.useImperativeHandle(ref, () => innerRef.current, []);
    React4.useLayoutEffect(() => {
      if (document.activeElement !== innerRef.current) {
        return;
      }
      setSelectionRange((cur) => selectionRangeUpdater(cur, innerRef));
    }, [props.value]);
    React4.useEffect(() => {
      function onSelectionChange() {
        if (!isFocused()) {
          return;
        }
        setSelectionRange((cur) => selectionRangeUpdater(cur, innerRef));
      }
      document.addEventListener("selectionchange", onSelectionChange, { capture: true });
      return () => document.removeEventListener("selectionchange", onSelectionChange);
    }, []);
    React4.useEffect(() => {
      var _a, _b;
      if (String(props.value).length === length && autoSubmit) {
        (_b = (_a = innerRef.current) == null ? void 0 : _a.form) == null ? void 0 : _b.requestSubmit();
      }
    }, [props.value, length, autoSubmit]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
      "div",
      {
        "data-otp-input-wrapper": true,
        style: wrapperStyle,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("style", { children: `
      input[data-otp-input-segmented]::selection {
        color: transparent;
        background-color: transparent;
      }
      ` }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_react_form.Control,
            {
              "data-otp-input-segmented": true,
              ref: innerRef,
              ...rest,
              onFocus: (event) => {
                var _a;
                if (innerRef.current) {
                  const start = Math.min(innerRef.current.value.length, length - 1);
                  const end = innerRef.current.value.length;
                  innerRef.current.setSelectionRange(start, end);
                  setSelectionRange([start, end]);
                }
                (_a = rest == null ? void 0 : rest.onFocus) == null ? void 0 : _a.call(rest, event);
              },
              onBlur: (event) => {
                var _a;
                setSelectionRange([-1, -1]);
                (_a = rest == null ? void 0 : rest.onBlur) == null ? void 0 : _a.call(rest, event);
              },
              onMouseOver: (event) => {
                var _a;
                if (!isFocused()) {
                  setIsHovering(true);
                }
                (_a = props.onMouseOver) == null ? void 0 : _a.call(props, event);
              },
              onMouseLeave: (event) => {
                var _a;
                setIsHovering(false);
                (_a = props.onMouseLeave) == null ? void 0 : _a.call(props, event);
              },
              style: {
                ...inputStyle,
                clipPath: `inset(0 calc(1ch + ${passwordManagerOffset}px) 0 0)`,
                width: `calc(100% + 1ch + ${passwordManagerOffset}px)`
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "div",
            {
              className: userProvidedClassName,
              "aria-hidden": true,
              style: segmentWrapperStyle,
              children: Array.from({ length }).map((_, i) => {
                var _a, _b;
                const isHovered = isHovering && !isFocused();
                const isCursor = selectionRange[0] === selectionRange[1] && selectionRange[0] === i;
                const isSelected = ((_a = selectionRange[0]) != null ? _a : -1) <= i && ((_b = selectionRange[1]) != null ? _b : -1) > i;
                return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(React4.Fragment, { children: render({
                  value: String(props.value)[i] || "",
                  status: isHovered ? "hovered" : isCursor ? "cursor" : isSelected ? "selected" : "none",
                  index: i
                }) }, `otp-segment-${i}`);
              })
            }
          )
        ]
      }
    );
  }
);
function selectionRangeUpdater(cur, inputRef) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  let updated = [
    (_b = (_a = inputRef.current) == null ? void 0 : _a.selectionStart) != null ? _b : 0,
    (_d = (_c = inputRef.current) == null ? void 0 : _c.selectionEnd) != null ? _d : 0,
    (_f = (_e = inputRef.current) == null ? void 0 : _e.selectionDirection) != null ? _f : null
  ];
  if (cur[0] === updated[0] && cur[1] === updated[1]) {
    return cur;
  }
  if (updated[0] === 0 && updated[1] === 1) {
    updated[2] = "forward";
  }
  if (updated[0] === updated[1]) {
    if (updated[0] > 0 && cur[0] === updated[0] && cur[1] === updated[0] + 1) {
      updated = [updated[0] - 1, updated[1], "backward"];
    } else if (typeof ((_g = inputRef.current) == null ? void 0 : _g.value[updated[0]]) !== "undefined") {
      updated = [updated[0], updated[1] + 1, "backward"];
    } else if (updated[0] >= OTP_LENGTH_DEFAULT) {
      updated = [updated[0] - 1, updated[1], "backward"];
    }
  }
  (_i = inputRef.current) == null ? void 0 : _i.setSelectionRange(updated[0], updated[1], (_h = updated[2]) != null ? _h : void 0);
  return [updated[0], updated[1]];
}
var wrapperStyle = {
  position: "relative",
  userSelect: "none"
};
var inputStyle = {
  display: "block",
  background: "transparent",
  opacity: 1,
  outline: "transparent solid 0px",
  appearance: "none",
  color: "transparent",
  position: "absolute",
  inset: 0,
  caretColor: "transparent",
  border: "0 px solid transparent",
  // width is handled inline
  height: "100%",
  letterSpacing: "-1rem"
};
var segmentWrapperStyle = {
  zIndex: 1,
  pointerEvents: "none"
};

// src/react/common/form/types.ts
var FIELD_STATES = {
  success: "success",
  error: "error",
  idle: "idle",
  warning: "warning",
  info: "info"
};
var FIELD_VALIDITY = {
  valid: "valid",
  invalid: "invalid"
};

// src/react/common/form/index.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var FieldContext = React5.createContext(null);
var useFieldContext = () => React5.useContext(FieldContext);
var useGlobalErrors = () => {
  const errors = useFormSelector(globalErrorsSelector);
  return {
    errors
  };
};
var useFieldFeedback = ({ name }) => {
  const feedback = useFormSelector(fieldFeedbackSelector(name));
  return {
    feedback
  };
};
var determineInputTypeFromName = (name) => {
  if (name === "password" || name === "confirmPassword" || name === "currentPassword" || name === "newPassword") {
    return "password";
  }
  if (name === "emailAddress") {
    return "email";
  }
  if (name === "phoneNumber") {
    return "tel";
  }
  if (name === "code") {
    return "otp";
  }
  return "text";
};
var useFieldState = ({ name }) => {
  const { feedback } = useFieldFeedback({ name });
  const hasValue = useFormSelector(fieldHasValueSelector(name));
  let state = FIELD_STATES.idle;
  if (!hasValue) {
    state = FIELD_STATES.idle;
  }
  switch (feedback == null ? void 0 : feedback.type) {
    case "error":
      state = FIELD_STATES.error;
      break;
    case "warning":
      state = FIELD_STATES.warning;
      break;
    case "info":
      state = FIELD_STATES.info;
      break;
    case "success":
      state = FIELD_STATES.success;
      break;
    default:
      break;
  }
  return {
    state
  };
};
var useForm = ({ flowActor }) => {
  const { errors } = useGlobalErrors();
  const validity = errors.length > 0 ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;
  const onSubmit = React5.useCallback(
    (event) => {
      event.preventDefault();
      if (flowActor) {
        flowActor.send({ type: "SUBMIT" });
      }
    },
    [flowActor]
  );
  return {
    props: {
      [`data-${validity}`]: true,
      onSubmit
    }
  };
};
var useField = ({ name }) => {
  const hasValue = useFormSelector(fieldHasValueSelector(name));
  const { feedback } = useFieldFeedback({ name });
  const shouldBeHidden = false;
  const hasError = feedback ? feedback.type === "error" : false;
  const validity = hasError ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;
  return {
    hasValue,
    props: {
      [`data-${validity}`]: true,
      "data-hidden": shouldBeHidden ? true : void 0,
      serverInvalid: hasError
    }
  };
};
var useInput = ({
  name: inputName,
  value: initialValue,
  type: inputType,
  onChange: onChangeProp,
  onBlur: onBlurProp,
  onFocus: onFocusProp,
  ...passthroughProps
}) => {
  const fieldContext = useFieldContext();
  const name = inputName || (fieldContext == null ? void 0 : fieldContext.name);
  const { state: fieldState } = useFieldState({ name });
  if (!name) {
    throw new Error("Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.");
  }
  const ref = useFormStore();
  const [hasPassedValiation, setHasPassedValidation] = React5.useState(false);
  const { validatePassword } = usePassword({
    onValidationComplexity: (hasPassed) => setHasPassedValidation(hasPassed),
    onValidationSuccess: () => {
      ref.send({
        type: "FIELD.FEEDBACK.SET",
        field: { name, feedback: { type: "success", message: "Your password meets all the necessary requirements." } }
      });
    },
    onValidationError: (error, keys) => {
      if (error) {
        ref.send({
          type: "FIELD.FEEDBACK.SET",
          field: {
            name,
            feedback: {
              type: "error",
              message: new ClerkElementsFieldError("password-validation-error", error),
              codes: keys
            }
          }
        });
      }
    },
    onValidationWarning: (warning, keys) => ref.send({
      type: "FIELD.FEEDBACK.SET",
      field: { name, feedback: { type: "warning", message: warning, codes: keys } }
    }),
    onValidationInfo: (info, keys) => {
      ref.send({
        type: "FIELD.FEEDBACK.SET",
        field: { name, feedback: { type: "info", message: info, codes: keys } }
      });
    }
  });
  const value = useFormSelector(fieldValueSelector(name));
  const hasValue = Boolean(value);
  const type = inputType != null ? inputType : determineInputTypeFromName(name);
  let shouldValidatePassword = false;
  if (type === "password" || type === "text") {
    shouldValidatePassword = Boolean(passthroughProps.validatePassword);
  }
  React5.useEffect(() => {
    if (!name || ref.getSnapshot().context.fields.get(name)) {
      return;
    }
    ref.send({ type: "FIELD.ADD", field: { name, value: initialValue } });
    return () => ref.send({ type: "FIELD.REMOVE", field: { name } });
  }, [ref]);
  const onChange = React5.useCallback(
    (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (!name || initialValue) {
        return;
      }
      ref.send({ type: "FIELD.UPDATE", field: { name, value: event.target.value } });
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [ref, name, onChangeProp, initialValue, shouldValidatePassword, validatePassword]
  );
  const onBlur = React5.useCallback(
    (event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [onBlurProp, shouldValidatePassword, validatePassword]
  );
  const onFocus = React5.useCallback(
    (event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [onFocusProp, shouldValidatePassword, validatePassword]
  );
  React5.useEffect(() => {
    if (!initialValue || !name) {
      return;
    }
    ref.send({ type: "FIELD.UPDATE", field: { name, value: initialValue } });
  }, [name, ref, initialValue]);
  if (!name) {
    throw new Error("Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.");
  }
  const shouldBeHidden = false;
  const Element = type === "otp" ? OTPInput : import_react_form2.Control;
  let props = {};
  if (type === "otp") {
    const p = passthroughProps;
    const length = p.length || OTP_LENGTH_DEFAULT;
    props = {
      "data-otp-input": true,
      autoComplete: "one-time-code",
      inputMode: "numeric",
      pattern: `[0-9]{${length}}`,
      minLength: length,
      maxLength: length,
      onChange: (event) => {
        event.currentTarget.value = event.currentTarget.value.replace(/\D+/g, "");
        onChange(event);
      },
      type: "text",
      spellCheck: false
    };
  }
  if (type === "password" && shouldValidatePassword) {
    props = {
      "data-has-passed-validation": hasPassedValiation ? true : void 0
    };
  }
  const { validatePassword: _1, ...rest } = passthroughProps;
  return {
    Element,
    props: {
      type,
      value: value != null ? value : "",
      onChange,
      onBlur,
      onFocus,
      "data-hidden": shouldBeHidden ? true : void 0,
      "data-has-value": hasValue ? true : void 0,
      "data-state": fieldState,
      ...props,
      ...rest
    }
  };
};
var FORM_NAME = "ClerkElementsForm";
var Form = React5.forwardRef(({ flowActor, onSubmit, ...rest }, forwardedRef) => {
  const form = useForm({ flowActor });
  const { onSubmit: internalOnSubmit, ...internalFormProps } = form.props;
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_react_form2.Form,
    {
      ...internalFormProps,
      ...rest,
      onSubmit: $e42e1063c40fb3ef$export$b9ecd428b558ff10(internalOnSubmit, onSubmit),
      ref: forwardedRef
    }
  );
});
Form.displayName = FORM_NAME;
var FIELD_NAME = "ClerkElementsField";
var FIELD_INNER_NAME = "ClerkElementsFieldInner";
var FIELD_STATE_NAME = "ClerkElementsFieldState";
var Field = React5.forwardRef(({ alwaysShow, ...rest }, forwardedRef) => {
  var _a;
  const formRef = useFormStore();
  const formCtx = formRef.getSnapshot().context;
  const isHiddenField = formCtx.progressive && Boolean((_a = formCtx.hidden) == null ? void 0 : _a.has(rest.name));
  const shouldHide = alwaysShow ? false : isHiddenField;
  return shouldHide ? null : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(FieldContext.Provider, { value: { name: rest.name }, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    FieldInner,
    {
      ...rest,
      ref: forwardedRef
    }
  ) });
});
var FieldInner = React5.forwardRef((props, forwardedRef) => {
  const { children, ...rest } = props;
  const field = useField({ name: rest.name });
  const { state: fieldState } = useFieldState({ name: rest.name });
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    import_react_form2.Field,
    {
      ...field.props,
      ...rest,
      ref: forwardedRef,
      children: typeof children === "function" ? children(fieldState) : children
    }
  );
});
Field.displayName = FIELD_NAME;
FieldInner.displayName = FIELD_INNER_NAME;
function FieldState({ children }) {
  const field = useFieldContext();
  const { feedback } = useFieldFeedback({ name: field == null ? void 0 : field.name });
  const { state } = useFieldState({ name: field == null ? void 0 : field.name });
  const message = (feedback == null ? void 0 : feedback.message) instanceof ClerkElementsFieldError ? feedback.message.message : feedback == null ? void 0 : feedback.message;
  const codes = feedback == null ? void 0 : feedback.codes;
  const fieldState = { state, message, codes };
  return children(fieldState);
}
FieldState.displayName = FIELD_STATE_NAME;
var INPUT_NAME = "ClerkElementsInput";
var Input = React5.forwardRef(
  (props, forwardedRef) => {
    var _a, _b, _c;
    const clerk = (0, import_clerk_react2.useClerk)();
    const field = useInput(props);
    const hasPasskeyAutofillProp = Boolean((_a = field.props.autoComplete) == null ? void 0 : _a.includes("webauthn"));
    const allowedTypeForPasskey = ["text", "email", "tel"].includes(field.props.type);
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    (_c = clerk.telemetry) == null ? void 0 : _c.record(
      (0, import_telemetry.eventComponentMounted)("Elements_Input", {
        type: (_b = props.type) != null ? _b : false,
        // @ts-expect-error - Depending on type the props can be different
        render: Boolean(props == null ? void 0 : props.render),
        // @ts-expect-error - Depending on type the props can be different
        asChild: Boolean(props == null ? void 0 : props.asChild),
        // @ts-expect-error - Depending on type the props can be different
        validatePassword: Boolean(props == null ? void 0 : props.validatePassword)
      })
    );
    if (signInRouterRef && hasPasskeyAutofillProp && allowedTypeForPasskey) {
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        InputWithPasskeyAutofill,
        {
          ref: forwardedRef,
          ...props
        }
      );
    }
    if (hasPasskeyAutofillProp && !allowedTypeForPasskey) {
      import_logger.logger.warnOnce(
        `<Input autoComplete="webauthn"> can only be used with <Input type="text"> or <Input type="email">`
      );
    } else if (hasPasskeyAutofillProp) {
      import_logger.logger.warnOnce(
        `<Input autoComplete="webauthn"> can only be used inside <SignIn> in order to trigger a sign-in attempt, otherwise it will be ignored.`
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      field.Element,
      {
        ref: forwardedRef,
        ...field.props
      }
    );
  }
);
Input.displayName = INPUT_NAME;
var InputWithPasskeyAutofill = React5.forwardRef(
  (props, forwardedRef) => {
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    const passkeyAutofillSupported = useSignInPasskeyAutofill();
    React5.useEffect(() => {
      if (passkeyAutofillSupported) {
        signInRouterRef == null ? void 0 : signInRouterRef.send({ type: "AUTHENTICATE.PASSKEY.AUTOFILL" });
      }
    }, [passkeyAutofillSupported, signInRouterRef]);
    const field = useInput(props);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      field.Element,
      {
        ref: forwardedRef,
        ...field.props
      }
    );
  }
);
var LABEL_NAME = "ClerkElementsLabel";
var Label = import_react_form2.Label;
Label.displayName = LABEL_NAME;
var SUBMIT_NAME = "ClerkElementsSubmit";
var Submit = import_react_form2.Submit;
Submit.displayName = SUBMIT_NAME;
var GLOBAL_ERROR_NAME = "ClerkElementsGlobalError";
var FIELD_ERROR_NAME = "ClerkElementsFieldError";
var GlobalError = React5.forwardRef(
  ({ asChild = false, children, code, ...rest }, forwardedRef) => {
    const { errors } = useGlobalErrors();
    const error = errors == null ? void 0 : errors[0];
    if (!error || code && error.code !== code) {
      return null;
    }
    const Comp = asChild ? import_react_slot.Slot : "div";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
      throw new ClerkElementsRuntimeError("<GlobalError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      Comp,
      {
        role: "alert",
        ...rest,
        ref: forwardedRef,
        children: child || error.message
      }
    );
  }
);
var FieldError = React5.forwardRef(
  ({ asChild = false, children, code, name, ...rest }, forwardedRef) => {
    const fieldContext = useFieldContext();
    const fieldName = (fieldContext == null ? void 0 : fieldContext.name) || name;
    const { feedback } = useFieldFeedback({ name: fieldName });
    if (!((feedback == null ? void 0 : feedback.type) === "error")) {
      return null;
    }
    const error = feedback.message;
    if (!error) {
      return null;
    }
    const Comp = asChild ? import_react_slot.Slot : "span";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
      throw new ClerkElementsRuntimeError("<FieldError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_react_form2.FormMessage,
      {
        "data-error-code": error.code,
        ...rest,
        ref: forwardedRef,
        asChild: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Comp, { children: child || error.message })
      }
    );
  }
);
GlobalError.displayName = GLOBAL_ERROR_NAME;
FieldError.displayName = FIELD_ERROR_NAME;

// src/react/common/connections.tsx
var import_react_slot2 = require("@radix-ui/react-slot");
var import_react4 = require("react");

// src/react/hooks/use-third-party-provider.hook.ts
var import_clerk_react3 = require("@clerk/clerk-react");
var import_react3 = require("react");

// src/utils/third-party-strategies.ts
var import_types2 = require("@clerk/types");

// src/utils/clerk-js.ts
var fromEntries = (iterable) => {
  return [...iterable].reduce((obj, [key, val]) => {
    obj[key] = val;
    return obj;
  }, {});
};
function iconImageUrl(id) {
  return `https://img.clerk.com/static/${id}.svg`;
}

// src/utils/third-party-strategies.ts
var oauthStrategies = import_types2.OAUTH_PROVIDERS.map((p) => p.strategy);
var providerToDisplayData = fromEntries(
  [...import_types2.OAUTH_PROVIDERS, ...import_types2.WEB3_PROVIDERS].map((p) => {
    return [p.provider, { iconUrl: iconImageUrl(p.provider), name: p.name, strategy: p.strategy }];
  })
);
var strategyToDisplayData = fromEntries(
  [...import_types2.OAUTH_PROVIDERS, ...import_types2.WEB3_PROVIDERS].map((p) => {
    return [p.strategy, { iconUrl: iconImageUrl(p.provider), id: p.provider, name: p.name }];
  })
);
function isAuthenticatableOauthStrategy(strategy, available) {
  return available.includes(strategy.startsWith("oauth_") ? strategy : `oauth_${strategy}`);
}
var emptyThirdPartyProviders = {
  authenticatableOauthStrategies: [],
  providerToDisplayData: {},
  strategies: [],
  strategyToDisplayData: {},
  web3Strategies: []
};
var getEnabledThirdPartyProviders = (environment) => {
  if (!(environment == null ? void 0 : environment.userSettings)) {
    return emptyThirdPartyProviders;
  }
  const { socialProviderStrategies, web3FirstFactors, authenticatableSocialStrategies } = environment.userSettings;
  const knownSocialProviderStrategies = socialProviderStrategies.filter((s) => oauthStrategies.includes(s));
  const knownAuthenticatableSocialStrategies = authenticatableSocialStrategies.filter((s) => oauthStrategies.includes(s));
  return {
    authenticatableOauthStrategies: [...knownAuthenticatableSocialStrategies],
    providerToDisplayData,
    strategies: [...knownSocialProviderStrategies, ...web3FirstFactors],
    strategyToDisplayData,
    web3Strategies: web3FirstFactors
  };
};

// src/react/hooks/use-third-party-provider.hook.ts
var useIsProviderEnabled = (provider) => {
  const clerk = (0, import_clerk_react3.useClerk)();
  if (!clerk.loaded) {
    return null;
  }
  const data = getEnabledThirdPartyProviders(clerk.__unstable__environment);
  return isAuthenticatableOauthStrategy(provider, data.authenticatableOauthStrategies);
};
var useThirdPartyProvider = (ref, provider) => {
  const isProviderEnabled = useIsProviderEnabled(provider);
  const details = providerToDisplayData[provider];
  const authenticate = (0, import_react3.useCallback)(
    (event) => {
      if (!isProviderEnabled) {
        return;
      }
      event.preventDefault();
      if (provider === "metamask") {
        return ref.send({ type: "AUTHENTICATE.WEB3", strategy: "web3_metamask_signature" });
      }
      return ref.send({ type: "AUTHENTICATE.OAUTH", strategy: `oauth_${provider}` });
    },
    [provider, isProviderEnabled, ref]
  );
  if (isProviderEnabled === false) {
    console.error(
      `Please ensure that ${provider} is enabled for your project. Go to your Clerk dashboard and navigate to "User & Authentication" > "Social Connections" to enable it.`
    );
  }
  return {
    events: {
      authenticate
    },
    ...details
  };
};

// src/react/sign-up/context/router.context.ts
var SignUpRouterCtx = createContextFromActorRef("SignUpRouterCtx");

// src/react/common/connections.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var ConnectionContext = (0, import_react4.createContext)(null);
var useConnectionContext = () => {
  const ctx = (0, import_react4.useContext)(ConnectionContext);
  if (!ctx) {
    throw new Error("useConnectionContext must be used within <Clerk.Connection>");
  }
  return ctx;
};
function Connection({ asChild, name, ...rest }) {
  const signInRef = SignInRouterCtx.useActorRef(true);
  const signUpRef = SignUpRouterCtx.useActorRef(true);
  const provider = useThirdPartyProvider(signInRef || signUpRef, name);
  if (!provider) {
    return null;
  }
  const Comp = asChild ? import_react_slot2.Slot : "button";
  const defaultProps = asChild ? {} : { type: "button" };
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ConnectionContext.Provider, { value: provider, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    Comp,
    {
      onClick: provider.events.authenticate,
      ...defaultProps,
      ...rest
    }
  ) });
}
function Icon({ asChild, ...rest }) {
  const { iconUrl, name } = useConnectionContext();
  const Comp = asChild ? import_react_slot2.Slot : "img";
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    Comp,
    {
      alt: `${name} logo`,
      src: iconUrl,
      ...rest
    }
  );
}

// src/react/common/loading.tsx
var import_clerk_react6 = require("@clerk/clerk-react");
var import_telemetry4 = require("@clerk/shared/telemetry");

// src/react/hooks/use-loading.hook.ts
var import_react5 = require("@xstate/react");
var selectLoading = (snapshot) => {
  var _a;
  return (_a = snapshot == null ? void 0 : snapshot.context) == null ? void 0 : _a.loading;
};
var compareLoadingValue = (prev, next) => (prev == null ? void 0 : prev.isLoading) === (next == null ? void 0 : next.isLoading);
function useLoading(actor) {
  const loadingCtx = (0, import_react5.useSelector)(actor, selectLoading, compareLoadingValue);
  if (!loadingCtx) {
    return [false, { step: void 0, strategy: void 0 }];
  }
  return [loadingCtx.isLoading, { step: loadingCtx.step, strategy: loadingCtx.strategy }];
}

// src/react/sign-in/choose-strategy.tsx
var import_react_slot3 = require("@radix-ui/react-slot");
var import_react6 = require("@xstate/react");
var React7 = __toESM(require("react"));

// src/internals/machines/sign-in/router.types.ts
var SignInRouterSystemId = {
  start: "start",
  firstFactor: "firstFactor",
  secondFactor: "secondFactor",
  resetPassword: "resetPassword"
};

// src/react/utils/create-context-for-dom-validation.ts
var React6 = __toESM(require("react"));
function createContextForDomValidation(displayName) {
  const ReactContext = React6.createContext(false);
  const OriginalProvider = ReactContext.Provider;
  function Provider({ children }) {
    return React6.createElement(
      OriginalProvider,
      {
        value: true
      },
      children
    );
  }
  Provider.displayName = displayName;
  function useContext5(allowMissingContext = false) {
    const context = React6.useContext(ReactContext);
    if (!allowMissingContext && !context) {
      throw new Error(
        `You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`
      );
    }
    return context;
  }
  return {
    Provider,
    useDomValidation: useContext5
  };
}

// src/react/sign-in/choose-strategy.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var SignInChooseStrategyCtx = createContextForDomValidation("SignInChooseStrategyCtx");
var SUPPORTED_STRATEGY_NAME = "SignInSupportedStrategy";
var SignInSupportedStrategy = React7.forwardRef(
  ({ asChild, children, name, ...rest }, forwardedRef) => {
    const routerRef = SignInRouterCtx.useActorRef();
    const snapshot = routerRef.getSnapshot();
    const supportedFirstFactors = snapshot.context.clerk.client.signIn.supportedFirstFactors;
    const factor = supportedFirstFactors.find((factor2) => name === factor2.strategy);
    const currentFirstFactor = (0, import_react6.useSelector)(
      snapshot.children[SignInRouterSystemId.firstFactor],
      (state) => {
        var _a;
        return (_a = state == null ? void 0 : state.context.currentFactor) == null ? void 0 : _a.strategy;
      }
    );
    const sendUpdateStrategyEvent = React7.useCallback(
      () => routerRef.send({ type: "STRATEGY.UPDATE", factor }),
      [routerRef, factor]
    );
    if (currentFirstFactor === name) {
      return null;
    }
    const Comp = asChild ? import_react_slot3.Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    return factor ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      Comp,
      {
        ...defaultProps,
        ...rest,
        ref: forwardedRef,
        onClick: sendUpdateStrategyEvent,
        children: children || factor.strategy
      }
    ) : null;
  }
);
SignInSupportedStrategy.displayName = SUPPORTED_STRATEGY_NAME;

// src/react/sign-in/start.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
var SignInStartCtx = createContextFromActorRef("SignInStartCtx");

// src/react/sign-in/step.tsx
var import_clerk_react4 = require("@clerk/clerk-react");
var import_telemetry2 = require("@clerk/shared/telemetry");

// src/react/sign-in/verifications.tsx
var import_react7 = require("@xstate/react");
var import_react8 = require("react");
var import_jsx_runtime6 = require("react/jsx-runtime");
var SignInFirstFactorCtx = createContextFromActorRef("SignInFirstFactorCtx");
var SignInSecondFactorCtx = createContextFromActorRef("SignInSecondFactorCtx");

// src/react/sign-in/step.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var SIGN_IN_STEPS = {
  start: "start",
  verifications: "verifications",
  "choose-strategy": "choose-strategy",
  "forgot-password": "forgot-password",
  "reset-password": "reset-password"
};

// src/react/sign-up/continue.tsx
var import_jsx_runtime8 = require("react/jsx-runtime");
var SignUpContinueCtx = createContextFromActorRef("SignUpContinueCtx");

// src/react/sign-up/start.tsx
var import_jsx_runtime9 = require("react/jsx-runtime");
var SignUpStartCtx = createContextFromActorRef("SignUpStartCtx");

// src/react/sign-up/step.tsx
var import_clerk_react5 = require("@clerk/clerk-react");
var import_telemetry3 = require("@clerk/shared/telemetry");

// src/react/sign-up/verifications.tsx
var import_jsx_runtime10 = require("react/jsx-runtime");
var SignUpVerificationCtx = createContextFromActorRef("SignUpVerificationCtx");

// src/react/sign-up/step.tsx
var import_jsx_runtime11 = require("react/jsx-runtime");
var SIGN_UP_STEPS = {
  start: "start",
  continue: "continue",
  verifications: "verifications"
};

// src/react/utils/map-scope-to-strategy.ts
function mapScopeToStrategy(scope) {
  if (scope === "provider:metamask") {
    return "web3_metamask_signature";
  }
  if (scope === "provider:saml") {
    return "saml";
  }
  const scopeWithoutPrefix = scope.replace("provider:", "");
  return `oauth_${scopeWithoutPrefix}`;
}

// src/react/common/loading.tsx
var import_jsx_runtime12 = require("react/jsx-runtime");
function isSignInScope(scope) {
  if (!scope) {
    return true;
  }
  if (scope.startsWith("step:")) {
    return Object.prototype.hasOwnProperty.call(SIGN_IN_STEPS, scope.replace("step:", ""));
  }
  return true;
}
function isSignUpScope(scope) {
  if (!scope) {
    return true;
  }
  if (scope.startsWith("step:")) {
    return Object.prototype.hasOwnProperty.call(SIGN_UP_STEPS, scope.replace("step:", ""));
  }
  return true;
}
function Loading({ children, scope }) {
  var _a;
  const clerk = (0, import_clerk_react6.useClerk)();
  (_a = clerk.telemetry) == null ? void 0 : _a.record((0, import_telemetry4.eventComponentMounted)("Elements_Loading", { scope: scope != null ? scope : false }));
  const signInRouterRef = SignInRouterCtx.useActorRef(true);
  const signUpRouterRef = SignUpRouterCtx.useActorRef(true);
  if (!signInRouterRef && !signUpRouterRef) {
    throw new ClerkElementsRuntimeError(`<Loading> must be used within a <SignIn> or <SignUp> component.`);
  }
  if (signInRouterRef) {
    if (isSignInScope(scope)) {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        SignInLoading,
        {
          scope,
          routerRef: signInRouterRef,
          children
        }
      );
    } else {
      throw new ClerkElementsRuntimeError(`Invalid scope "${scope}" used for <Loading> inside <SignIn>.`);
    }
  }
  if (signUpRouterRef) {
    if (isSignUpScope(scope)) {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        SignUpLoading,
        {
          scope,
          routerRef: signUpRouterRef,
          children
        }
      );
    } else {
      throw new ClerkElementsRuntimeError(`Invalid scope "${scope}" used for <Loading> inside <SignUp>.`);
    }
  }
  throw new ClerkElementsRuntimeError("Invalid state for <Loading>. Please open an issue.");
}
function SignInLoading({ children, scope, routerRef }) {
  const [isLoading, { step: loadingStep, strategy }] = useLoading(routerRef);
  let computedScope;
  const startCtx = SignInStartCtx.useActorRef(true);
  const firstFactorCtx = SignInFirstFactorCtx.useActorRef(true);
  const secondFactorCtx = SignInSecondFactorCtx.useActorRef(true);
  const chooseStrategyCtx = SignInChooseStrategyCtx.useDomValidation(true);
  if (scope) {
    computedScope = scope;
  } else {
    let inferredScope;
    if (startCtx) {
      inferredScope = "step:start";
    } else if (firstFactorCtx || secondFactorCtx) {
      inferredScope = "step:verifications";
    } else if (chooseStrategyCtx) {
      inferredScope = "step:choose-strategy";
    } else {
      inferredScope = "global";
    }
    computedScope = inferredScope;
  }
  const snapshot = routerRef.getSnapshot();
  const isFirstFactor = snapshot.hasTag("route:first-factor");
  const isStartLoading = isLoading && loadingStep === "start";
  const isVerificationsLoading = isLoading && loadingStep === "verifications";
  const isChooseStrategyLoading = isLoading && isFirstFactor && snapshot.hasTag("route:choose-strategy");
  const isForgotPasswordLoading = isFirstFactor && snapshot.hasTag("route:forgot-password");
  const isResetPasswordLoading = isFirstFactor && snapshot.hasTag("route:reset-password");
  const isStrategyLoading = isLoading && loadingStep === void 0 && strategy !== void 0;
  let returnValue;
  if (computedScope === "global") {
    returnValue = isLoading;
  } else if (computedScope === "step:start") {
    returnValue = isStartLoading;
  } else if (computedScope === "step:verifications") {
    returnValue = isVerificationsLoading;
  } else if (computedScope === "step:choose-strategy") {
    returnValue = isChooseStrategyLoading;
  } else if (computedScope === "step:forgot-password") {
    returnValue = isForgotPasswordLoading;
  } else if (computedScope === "step:reset-password") {
    returnValue = isResetPasswordLoading;
  } else if (computedScope.startsWith("provider:")) {
    const computedStrategy = mapScopeToStrategy(computedScope);
    returnValue = isStrategyLoading && strategy === computedStrategy;
  } else {
    throw new ClerkElementsRuntimeError(`Invalid scope "${computedScope}" used for <Loading>`);
  }
  return children(returnValue);
}
function SignUpLoading({ children, scope, routerRef }) {
  const [isLoading, { step: loadingStep, strategy }] = useLoading(routerRef);
  let computedScope;
  const startCtx = SignUpStartCtx.useActorRef(true);
  const continueCtx = SignUpContinueCtx.useActorRef(true);
  const verificationsCtx = SignUpVerificationCtx.useActorRef(true);
  if (scope) {
    computedScope = scope;
  } else {
    let inferredScope;
    if (startCtx) {
      inferredScope = `step:start`;
    } else if (continueCtx) {
      inferredScope = `step:continue`;
    } else if (verificationsCtx) {
      inferredScope = `step:verifications`;
    } else {
      inferredScope = `global`;
    }
    computedScope = inferredScope;
  }
  const isStartLoading = isLoading && loadingStep === "start";
  const isVerificationsLoading = isLoading && loadingStep === "verifications";
  const isContinueLoading = isLoading && loadingStep === "continue";
  const isStrategyLoading = isLoading && loadingStep === void 0 && strategy !== void 0;
  let returnValue;
  if (computedScope === "global") {
    returnValue = isLoading;
  } else if (computedScope === "step:start") {
    returnValue = isStartLoading;
  } else if (computedScope === "step:verifications") {
    returnValue = isVerificationsLoading;
  } else if (computedScope === "step:continue") {
    returnValue = isContinueLoading;
  } else if (computedScope.startsWith("provider:")) {
    const computedStrategy = mapScopeToStrategy(computedScope);
    returnValue = isStrategyLoading && strategy === computedStrategy;
  } else {
    throw new ClerkElementsRuntimeError(`Invalid scope "${computedScope}" used for <Loading>`);
  }
  return children(returnValue);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Connection,
  Field,
  FieldError,
  FieldState,
  GlobalError,
  Icon,
  Input,
  Label,
  Loading,
  Submit
});
//# sourceMappingURL=index.js.map