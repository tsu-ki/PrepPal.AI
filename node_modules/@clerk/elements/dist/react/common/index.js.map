{"version":3,"sources":["../../../src/react/common/index.ts","../../../src/react/common/form/index.tsx","../../../../../node_modules/@radix-ui/primitive/dist/packages/core/primitive/src/index.ts","../../../../../node_modules/@radix-ui/primitive/dist/packages/core/primitive/src/primitive.tsx","../../../src/internals/errors/index.ts","../../../src/internals/machines/form/form.context.ts","../../../src/internals/machines/form/form.machine.ts","../../../src/internals/utils/inspector/index.ts","../../../src/react/hooks/use-password.hook.ts","../../../src/react/utils/generate-password-error-text.ts","../../../src/react/utils/create-context-from-actor-ref.ts","../../../src/react/sign-in/context/router.context.ts","../../../src/react/utils/is-react-fragment.ts","../../../src/react/common/form/otp.tsx","../../../src/react/common/form/types.ts","../../../src/react/common/connections.tsx","../../../src/react/hooks/use-third-party-provider.hook.ts","../../../src/utils/third-party-strategies.ts","../../../src/utils/clerk-js.ts","../../../src/react/sign-up/context/router.context.ts","../../../src/react/common/loading.tsx","../../../src/react/hooks/use-loading.hook.ts","../../../src/react/sign-in/choose-strategy.tsx","../../../src/internals/machines/sign-in/router.types.ts","../../../src/react/utils/create-context-for-dom-validation.ts","../../../src/react/sign-in/start.tsx","../../../src/react/sign-in/step.tsx","../../../src/react/sign-in/verifications.tsx","../../../src/react/sign-up/continue.tsx","../../../src/react/sign-up/start.tsx","../../../src/react/sign-up/step.tsx","../../../src/react/sign-up/verifications.tsx","../../../src/react/utils/map-scope-to-strategy.ts"],"sourcesContent":["// Mark as a client-only package. This will error if you try to import it in a React Server Component.\nimport 'client-only';\n\nexport { Field, FieldError, FieldState, GlobalError, Input, Label, Submit } from '~/react/common/form';\nexport { Connection, Icon } from '~/react/common/connections';\nexport { Loading } from '~/react/common/loading';\n\nexport type {\n  FormFieldErrorProps,\n  FormErrorProps,\n  FormErrorRenderProps,\n  FormFieldProps,\n  FormGlobalErrorProps,\n  FormInputProps,\n  FormProps,\n  FormSubmitProps,\n} from '~/react/common/form';\nexport type { ConnectionProps, IconProps } from '~/react/common/connections';\nexport type { OTPInputSegmentStatus } from '~/react/common/form/otp';\n","import { useClerk } from '@clerk/clerk-react';\nimport { logger } from '@clerk/shared/logger';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\nimport type { Autocomplete } from '@clerk/types';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport type {\n  FormControlProps,\n  FormControlProps as RadixFormControlProps,\n  FormFieldProps as RadixFormFieldProps,\n  FormMessageProps as RadixFormMessageProps,\n  FormProps as RadixFormProps,\n  FormSubmitProps as RadixFormSubmitProps,\n} from '@radix-ui/react-form';\nimport {\n  Control as RadixControl,\n  Field as RadixField,\n  Form as RadixForm,\n  FormMessage as RadixFormMessage,\n  Label as RadixLabel,\n  Submit as RadixSubmit,\n} from '@radix-ui/react-form';\nimport { Slot } from '@radix-ui/react-slot';\nimport * as React from 'react';\nimport type { SetRequired } from 'type-fest';\nimport type { BaseActorRef } from 'xstate';\n\nimport type { ClerkElementsError } from '~/internals/errors';\nimport { ClerkElementsFieldError, ClerkElementsRuntimeError } from '~/internals/errors';\nimport type { FieldDetails } from '~/internals/machines/form';\nimport {\n  fieldFeedbackSelector,\n  fieldHasValueSelector,\n  fieldValueSelector,\n  globalErrorsSelector,\n  useFormSelector,\n  useFormStore,\n} from '~/internals/machines/form/form.context';\nimport { usePassword } from '~/react/hooks/use-password.hook';\nimport { SignInRouterCtx } from '~/react/sign-in/context';\nimport { useSignInPasskeyAutofill } from '~/react/sign-in/context/router.context';\nimport type { ErrorMessagesKey } from '~/react/utils/generate-password-error-text';\nimport { isReactFragment } from '~/react/utils/is-react-fragment';\n\nimport type { OTPInputProps } from './otp';\nimport { OTP_LENGTH_DEFAULT, OTPInput } from './otp';\nimport { type ClerkFieldId, FIELD_STATES, FIELD_VALIDITY, type FieldStates } from './types';\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\nconst FieldContext = React.createContext<Pick<FieldDetails, 'name'> | null>(null);\nconst useFieldContext = () => React.useContext(FieldContext);\n\n/* -------------------------------------------------------------------------------------------------\n * Hooks\n * -----------------------------------------------------------------------------------------------*/\n\nconst useGlobalErrors = () => {\n  const errors = useFormSelector(globalErrorsSelector);\n\n  return {\n    errors,\n  };\n};\n\nconst useFieldFeedback = ({ name }: Partial<Pick<FieldDetails, 'name'>>) => {\n  const feedback = useFormSelector(fieldFeedbackSelector(name));\n\n  return {\n    feedback,\n  };\n};\n\nconst determineInputTypeFromName = (name: FormFieldProps['name']) => {\n  if (name === 'password' || name === 'confirmPassword' || name === 'currentPassword' || name === 'newPassword') {\n    return 'password' as const;\n  }\n  if (name === 'emailAddress') {\n    return 'email' as const;\n  }\n  if (name === 'phoneNumber') {\n    return 'tel' as const;\n  }\n  if (name === 'code') {\n    return 'otp' as const;\n  }\n\n  return 'text' as const;\n};\n\n/**\n * Given a field name, determine the current state of the field\n */\nconst useFieldState = ({ name }: Partial<Pick<FieldDetails, 'name'>>) => {\n  const { feedback } = useFieldFeedback({ name });\n  const hasValue = useFormSelector(fieldHasValueSelector(name));\n\n  /**\n   * If hasValue is false, the state should be idle\n   * The rest depends on the feedback type\n   */\n  let state: FieldStates = FIELD_STATES.idle;\n\n  if (!hasValue) {\n    state = FIELD_STATES.idle;\n  }\n\n  switch (feedback?.type) {\n    case 'error':\n      state = FIELD_STATES.error;\n      break;\n    case 'warning':\n      state = FIELD_STATES.warning;\n      break;\n    case 'info':\n      state = FIELD_STATES.info;\n      break;\n    case 'success':\n      state = FIELD_STATES.success;\n      break;\n    default:\n      break;\n  }\n\n  return {\n    state,\n  };\n};\n\n/**\n * Provides the form submission handler along with the form's validity via a data attribute\n */\nconst useForm = ({ flowActor }: { flowActor?: BaseActorRef<{ type: 'SUBMIT' }> }) => {\n  const { errors } = useGlobalErrors();\n  const validity = errors.length > 0 ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;\n\n  // Register the onSubmit handler for form submission\n  // TODO: merge user-provided submit handler\n  const onSubmit = React.useCallback(\n    (event: React.FormEvent<Element>) => {\n      event.preventDefault();\n      if (flowActor) {\n        flowActor.send({ type: 'SUBMIT' });\n      }\n    },\n    [flowActor],\n  );\n\n  return {\n    props: {\n      [`data-${validity}`]: true,\n      onSubmit,\n    },\n  };\n};\n\nconst useField = ({ name }: Partial<Pick<FieldDetails, 'name'>>) => {\n  const hasValue = useFormSelector(fieldHasValueSelector(name));\n  const { feedback } = useFieldFeedback({ name });\n\n  const shouldBeHidden = false; // TODO: Implement clerk-js utils\n  const hasError = feedback ? feedback.type === 'error' : false;\n  const validity = hasError ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;\n\n  return {\n    hasValue,\n    props: {\n      [`data-${validity}`]: true,\n      'data-hidden': shouldBeHidden ? true : undefined,\n      serverInvalid: hasError,\n    },\n  };\n};\n\nconst useInput = ({\n  name: inputName,\n  value: initialValue,\n  type: inputType,\n  onChange: onChangeProp,\n  onBlur: onBlurProp,\n  onFocus: onFocusProp,\n  ...passthroughProps\n}: FormInputProps) => {\n  // Inputs can be used outside a <Field> wrapper if desired, so safely destructure here\n  const fieldContext = useFieldContext();\n  const name = inputName || fieldContext?.name;\n  const { state: fieldState } = useFieldState({ name });\n\n  if (!name) {\n    throw new Error('Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.');\n  }\n\n  const ref = useFormStore();\n  const [hasPassedValiation, setHasPassedValidation] = React.useState(false);\n\n  const { validatePassword } = usePassword({\n    onValidationComplexity: hasPassed => setHasPassedValidation(hasPassed),\n    onValidationSuccess: () => {\n      ref.send({\n        type: 'FIELD.FEEDBACK.SET',\n        field: { name, feedback: { type: 'success', message: 'Your password meets all the necessary requirements.' } },\n      });\n    },\n    onValidationError: (error, keys) => {\n      if (error) {\n        ref.send({\n          type: 'FIELD.FEEDBACK.SET',\n          field: {\n            name,\n            feedback: {\n              type: 'error',\n              message: new ClerkElementsFieldError('password-validation-error', error),\n              codes: keys,\n            },\n          },\n        });\n      }\n    },\n    onValidationWarning: (warning, keys) =>\n      ref.send({\n        type: 'FIELD.FEEDBACK.SET',\n        field: { name, feedback: { type: 'warning', message: warning, codes: keys } },\n      }),\n    onValidationInfo: (info, keys) => {\n      // TODO: If input is not focused, make this info an error\n      ref.send({\n        type: 'FIELD.FEEDBACK.SET',\n        field: { name, feedback: { type: 'info', message: info, codes: keys } },\n      });\n    },\n  });\n  const value = useFormSelector(fieldValueSelector(name));\n  const hasValue = Boolean(value);\n  const type = inputType ?? determineInputTypeFromName(name);\n  let shouldValidatePassword = false;\n\n  if (type === 'password' || type === 'text') {\n    shouldValidatePassword = Boolean((passthroughProps as PasswordInputProps).validatePassword);\n  }\n\n  // Register the field in the machine context\n  React.useEffect(() => {\n    if (!name || ref.getSnapshot().context.fields.get(name)) {\n      return;\n    }\n\n    ref.send({ type: 'FIELD.ADD', field: { name, value: initialValue } });\n\n    return () => ref.send({ type: 'FIELD.REMOVE', field: { name } });\n  }, [ref]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Register the onChange handler for field updates to persist to the machine context\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      onChangeProp?.(event);\n      if (!name || initialValue) {\n        return;\n      }\n      ref.send({ type: 'FIELD.UPDATE', field: { name, value: event.target.value } });\n      if (shouldValidatePassword) {\n        validatePassword(event.target.value);\n      }\n    },\n    [ref, name, onChangeProp, initialValue, shouldValidatePassword, validatePassword],\n  );\n\n  const onBlur = React.useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onBlurProp?.(event);\n      if (shouldValidatePassword) {\n        validatePassword(event.target.value);\n      }\n    },\n    [onBlurProp, shouldValidatePassword, validatePassword],\n  );\n\n  const onFocus = React.useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocusProp?.(event);\n      if (shouldValidatePassword) {\n        validatePassword(event.target.value);\n      }\n    },\n    [onFocusProp, shouldValidatePassword, validatePassword],\n  );\n\n  React.useEffect(() => {\n    if (!initialValue || !name) {\n      return;\n    }\n    ref.send({ type: 'FIELD.UPDATE', field: { name, value: initialValue } });\n  }, [name, ref, initialValue]);\n\n  if (!name) {\n    throw new Error('Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.');\n  }\n\n  // TODO: Implement clerk-js utils\n  const shouldBeHidden = false;\n\n  const Element = type === 'otp' ? OTPInput : RadixControl;\n\n  let props = {};\n  if (type === 'otp') {\n    const p = passthroughProps as Omit<OTPInputProps, 'name' | 'value' | 'type'>;\n    const length = p.length || OTP_LENGTH_DEFAULT;\n\n    props = {\n      'data-otp-input': true,\n      autoComplete: 'one-time-code',\n      inputMode: 'numeric',\n      pattern: `[0-9]{${length}}`,\n      minLength: length,\n      maxLength: length,\n      onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n        // Only accept numbers\n        event.currentTarget.value = event.currentTarget.value.replace(/\\D+/g, '');\n        onChange(event);\n      },\n      type: 'text',\n      spellCheck: false,\n    };\n  }\n  if (type === 'password' && shouldValidatePassword) {\n    props = {\n      'data-has-passed-validation': hasPassedValiation ? true : undefined,\n    };\n  }\n\n  // Filter out invalid props that should not be passed through\n  // @ts-expect-error - Doesn't know about type narrowing by type here\n  const { validatePassword: _1, ...rest } = passthroughProps;\n\n  return {\n    Element,\n    props: {\n      type,\n      value: value ?? '',\n      onChange,\n      onBlur,\n      onFocus,\n      'data-hidden': shouldBeHidden ? true : undefined,\n      'data-has-value': hasValue ? true : undefined,\n      'data-state': fieldState,\n      ...props,\n      ...rest,\n    },\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nconst FORM_NAME = 'ClerkElementsForm';\n\ntype FormElement = React.ElementRef<typeof RadixForm>;\ntype FormProps = SetRequired<RadixFormProps, 'children'> & {\n  flowActor?: BaseActorRef<{ type: 'SUBMIT' }>;\n};\n\nconst Form = React.forwardRef<FormElement, FormProps>(({ flowActor, onSubmit, ...rest }, forwardedRef) => {\n  const form = useForm({ flowActor: flowActor });\n\n  const { onSubmit: internalOnSubmit, ...internalFormProps } = form.props;\n\n  return (\n    <RadixForm\n      {...internalFormProps}\n      {...rest}\n      onSubmit={composeEventHandlers(internalOnSubmit, onSubmit)}\n      ref={forwardedRef}\n    />\n  );\n});\n\nForm.displayName = FORM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_NAME = 'ClerkElementsField';\nconst FIELD_INNER_NAME = 'ClerkElementsFieldInner';\nconst FIELD_STATE_NAME = 'ClerkElementsFieldState';\n\ntype FormFieldElement = React.ElementRef<typeof RadixField>;\ntype FormFieldProps = Omit<RadixFormFieldProps, 'children'> & {\n  name: Autocomplete<ClerkFieldId>;\n  alwaysShow?: boolean;\n  children: React.ReactNode | ((state: FieldStates) => React.ReactNode);\n};\n\n/**\n * Field is used to associate its child elements with a specific input. It automatically handles unique ID generation and associating the contained label and input elements.\n *\n * @param name - Give your `<Field>` a unique name inside the current form. If you choose one of the following names Clerk Elements will automatically set the correct type on the `<input />` element: `emailAddress`, `password`, `phoneNumber`, and `code`.\n * @param alwaysShow - Optional. When `true`, the field will always be rendered, regardless of its state. By default, a field is hidden if it's optional or if it's a filled-out required field.\n * @param {Function} children - A function that receives `state` as an argument. `state` is a union of `\"success\" | \"error\" | \"idle\" | \"warning\" | \"info\"`.\n *\n * @example\n * <Clerk.Field name=\"emailAddress\">\n *   <Clerk.Label>Email</Clerk.Label>\n *   <Clerk.Input />\n * </Clerk.Field>\n *\n * @example\n * <Clerk.Field name=\"emailAddress\">\n *  {(fieldState) => (\n *    <Clerk.Label>Email</Clerk.Label>\n *    <Clerk.Input className={`text-${fieldState}`} />\n *  )}\n * </Clerk.Field>\n */\nconst Field = React.forwardRef<FormFieldElement, FormFieldProps>(({ alwaysShow, ...rest }, forwardedRef) => {\n  const formRef = useFormStore();\n  const formCtx = formRef.getSnapshot().context;\n  // A field is marked as hidden if it's optional OR if it's a filled-out required field\n  const isHiddenField = formCtx.progressive && Boolean(formCtx.hidden?.has(rest.name));\n\n  // Only alwaysShow={true} should force behavior to render the field, on `undefined` or alwaysShow={false} the isHiddenField logic should take over\n  const shouldHide = alwaysShow ? false : isHiddenField;\n\n  return shouldHide ? null : (\n    <FieldContext.Provider value={{ name: rest.name }}>\n      <FieldInner\n        {...rest}\n        ref={forwardedRef}\n      />\n    </FieldContext.Provider>\n  );\n});\n\nconst FieldInner = React.forwardRef<FormFieldElement, FormFieldProps>((props, forwardedRef) => {\n  const { children, ...rest } = props;\n  const field = useField({ name: rest.name });\n  const { state: fieldState } = useFieldState({ name: rest.name });\n\n  return (\n    <RadixField\n      {...field.props}\n      {...rest}\n      ref={forwardedRef}\n    >\n      {typeof children === 'function' ? children(fieldState) : children}\n    </RadixField>\n  );\n});\n\nField.displayName = FIELD_NAME;\nFieldInner.displayName = FIELD_INNER_NAME;\n\ntype FieldStateRenderFn = {\n  children: (state: {\n    state: FieldStates;\n    message: string | undefined;\n    codes: ErrorMessagesKey[] | undefined;\n  }) => React.ReactNode;\n};\n\n/**\n * Programmatically access the state of the wrapping `<Field>`. Useful for implementing animations when direct access to the state value is necessary.\n *\n * @param {Function} children - A function that receives `state`, `message`, and `codes` as an argument. `state` will is a union of `\"success\" | \"error\" | \"idle\" | \"warning\" | \"info\"`. `message` will be the corresponding message, e.g. error message. `codes` will be an array of keys that were used to generate the password validation messages. This prop is only available when the field is of type `password` and has `validatePassword` set to `true`.\n *\n * @example\n *\n * <Clerk.Field name=\"email\">\n *  <Clerk.Label>Email</Clerk.Label>\n *  <Clerk.FieldState>\n *    {({ state }) => (\n *      <Clerk.Input className={`text-${state}`} />\n *    )}\n *  </Clerk.FieldState>\n * </Clerk.Field>\n *\n * @example\n * <Clerk.Field name=\"password\">\n *  <Clerk.Label>Password</Clerk.Label>\n *  <Clerk.Input validatePassword />\n *  <Clerk.FieldState>\n *    {({ state, message, codes }) => (\n *      <pre>Field state: {state}</pre>\n *      <pre>Field msg: {message}</pre>\n *      <pre>Pwd keys: {codes.join(', ')}</pre>\n *    )}\n *  </Clerk.FieldState>\n * </Clerk.Field>\n */\nfunction FieldState({ children }: FieldStateRenderFn) {\n  const field = useFieldContext();\n  const { feedback } = useFieldFeedback({ name: field?.name });\n  const { state } = useFieldState({ name: field?.name });\n\n  const message = feedback?.message instanceof ClerkElementsFieldError ? feedback.message.message : feedback?.message;\n  const codes = feedback?.codes;\n\n  const fieldState = { state, message, codes };\n\n  return children(fieldState);\n}\n\nFieldState.displayName = FIELD_STATE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Input\n * -----------------------------------------------------------------------------------------------*/\n\nconst INPUT_NAME = 'ClerkElementsInput';\n\ntype PasswordInputProps = Exclude<FormControlProps, 'type'> & {\n  validatePassword?: boolean;\n};\n\ntype FormInputProps =\n  | RadixFormControlProps\n  | ({ type: 'otp'; render: OTPInputProps['render'] } & Omit<OTPInputProps, 'asChild'>)\n  | ({ type: 'otp'; render?: undefined } & OTPInputProps)\n  // Usecase: Toggle the visibility of the password input, therefore 'password' and 'text' are allowed\n  | ({ type: 'password' | 'text' } & PasswordInputProps);\n\n/**\n * Handles rendering of `<input>` elements within Clerk's flows. Supports special `type` prop values to render input types that are unique to authentication and user management flows. Additional props will be passed through to the `<input>` element.\n *\n * @param {boolean} [asChild] - If true, `<Input />` will render as its child element, passing along any necessary props.\n * @param {string} [name] - Used to target a specific field by name when rendering outside of a `<Field>` component.\n *\n * @example\n * <Clerk.Field name=\"identifier\">\n *   <Clerk.Label>Email</Clerk.Label>\n *   <Clerk.Input type=\"email\" autoComplete=\"email\" className=\"emailInput\" />\n * </Clerk.Field>\n *\n * @param {Number} [length] - The length of the OTP input. Defaults to 6.\n * @param {Number} [passwordManagerOffset] - Password managers place their icon inside an `<input />`. This default behaviour is not desirable when you use the render prop to display N distinct element. With this prop you can increase the width of the `<input />` so that the icon is rendered outside the OTP inputs.\n * @param {string} [type] - Type of control to render. Supports a special `'otp'` type for one-time password inputs. If the wrapping `<Field>` component has `name='code'`, the type will default to `'otp'`. With the `'otp'` type, the input will have a pattern and length set to 6 by default and render a single `<input />` element.\n *\n * @example\n * <Clerk.Field name=\"code\">\n *   <Clerk.Label>Email code</Clerk.Label>\n *   <Clerk.Input type=\"otp\" />\n * </Clerk.Field>\n *\n * @param {Function} [render] - Optionally, you can use a render prop that controls how each individual character is rendered. If no `render` prop is provided, a single text `<input />` will be rendered.\n *\n * @example\n * <Clerk.Field name=\"code\">\n *   <Clerk.Label>Email code</Clerk.Label>\n *   <Clerk.Input\n *     type=\"otp\"\n *     render={({ value, status }) => <span data-status={status}>{value}</span>}\n *   />\n * </Clerk.Field>\n */\nconst Input = React.forwardRef<React.ElementRef<typeof RadixControl>, FormInputProps>(\n  (props: FormInputProps, forwardedRef) => {\n    const clerk = useClerk();\n    const field = useInput(props);\n\n    const hasPasskeyAutofillProp = Boolean(field.props.autoComplete?.includes('webauthn'));\n    const allowedTypeForPasskey = (['text', 'email', 'tel'] as FormInputProps['type'][]).includes(field.props.type);\n    const signInRouterRef = SignInRouterCtx.useActorRef(true);\n\n    clerk.telemetry?.record(\n      eventComponentMounted('Elements_Input', {\n        type: props.type ?? false,\n        // @ts-expect-error - Depending on type the props can be different\n        render: Boolean(props?.render),\n        // @ts-expect-error - Depending on type the props can be different\n        asChild: Boolean(props?.asChild),\n        // @ts-expect-error - Depending on type the props can be different\n        validatePassword: Boolean(props?.validatePassword),\n      }),\n    );\n\n    if (signInRouterRef && hasPasskeyAutofillProp && allowedTypeForPasskey) {\n      return (\n        <InputWithPasskeyAutofill\n          ref={forwardedRef}\n          {...props}\n        />\n      );\n    }\n\n    if (hasPasskeyAutofillProp && !allowedTypeForPasskey) {\n      logger.warnOnce(\n        `<Input autoComplete=\"webauthn\"> can only be used with <Input type=\"text\"> or <Input type=\"email\">`,\n      );\n    } else if (hasPasskeyAutofillProp) {\n      logger.warnOnce(\n        `<Input autoComplete=\"webauthn\"> can only be used inside <SignIn> in order to trigger a sign-in attempt, otherwise it will be ignored.`,\n      );\n    }\n\n    return (\n      <field.Element\n        ref={forwardedRef}\n        {...field.props}\n      />\n    );\n  },\n);\n\nInput.displayName = INPUT_NAME;\n\nconst InputWithPasskeyAutofill = React.forwardRef<React.ElementRef<typeof RadixControl>, FormInputProps>(\n  (props: FormInputProps, forwardedRef) => {\n    const signInRouterRef = SignInRouterCtx.useActorRef(true);\n    const passkeyAutofillSupported = useSignInPasskeyAutofill();\n\n    React.useEffect(() => {\n      if (passkeyAutofillSupported) {\n        signInRouterRef?.send({ type: 'AUTHENTICATE.PASSKEY.AUTOFILL' });\n      }\n    }, [passkeyAutofillSupported, signInRouterRef]);\n\n    const field = useInput(props);\n    return (\n      <field.Element\n        ref={forwardedRef}\n        {...field.props}\n      />\n    );\n  },\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'ClerkElementsLabel';\n\n/**\n * Renders a `<label>` element that is automatically associated with its sibling `<Input />` inside of a `<Field>`. Additional props will be passed through to the `<label>` element.\n *\n * @param {boolean} [asChild] - If true, `<Label />` will render as its child element, passing along any necessary props.\n *\n * @example\n * <Clerk.Field name=\"email\">\n *   <Clerk.Label>Email</Clerk.Label>\n *   <Clerk.Input />\n * </Clerk.Field>\n */\nconst Label = RadixLabel;\n\nLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Submit\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUBMIT_NAME = 'ClerkElementsSubmit';\n\ntype FormSubmitProps = SetRequired<RadixFormSubmitProps, 'children'>;\ntype FormSubmitComponent = React.ForwardRefExoticComponent<FormSubmitProps & React.RefAttributes<HTMLButtonElement>>;\n\n/**\n * A `<button type=\"submit\">` element.\n *\n * @param {boolean} [asChild] - When `true`, the component will render its child and passes all props to it.\n */\nconst Submit = RadixSubmit as FormSubmitComponent;\n\nSubmit.displayName = SUBMIT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * GlobalError & FieldError\n * -----------------------------------------------------------------------------------------------*/\n\nconst GLOBAL_ERROR_NAME = 'ClerkElementsGlobalError';\nconst FIELD_ERROR_NAME = 'ClerkElementsFieldError';\n\ntype FormErrorRenderProps = Pick<ClerkElementsError, 'code' | 'message'>;\n\ntype FormErrorPropsAsChild = {\n  asChild?: true | never;\n  children?: React.ReactElement | ((error: FormErrorRenderProps) => React.ReactNode);\n  code?: string;\n};\n\ntype FormErrorPropsStd = {\n  asChild?: false;\n  children: React.ReactNode;\n  code: string;\n};\n\ntype FormErrorProps<T> = Omit<T, 'asChild' | 'children'> & (FormErrorPropsStd | FormErrorPropsAsChild);\n\ntype FormGlobalErrorElement = React.ElementRef<'div'>;\ntype FormGlobalErrorProps = FormErrorProps<React.ComponentPropsWithoutRef<'div'>>;\ntype FormFieldErrorElement = React.ElementRef<typeof RadixFormMessage>;\ntype FormFieldErrorProps = FormErrorProps<RadixFormMessageProps & { name?: string }>;\n\n/**\n * Used to render errors that are returned from Clerk's API, but that are not associated with a specific form field. By default, will render the error's message wrapped in a `<div>`. Optionally, the `children` prop accepts a function to completely customize rendering. Must be placed **inside** components like `<SignIn>`/`<SignUp>` to have access to the underlying form state.\n *\n * @param {string} [code] - Forces the message with the matching code to be shown. This is useful when using server-side validation.\n * @param {Function} [children] - A function that receives `message` and `code` as arguments.\n * @param {boolean} [asChild] - If `true`, `<GlobalError>` will render as its child element, passing along any necessary props.\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.GlobalError />\n * </SignIn.Root>\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.GlobalError code=\"user_locked\">Your custom error message.</Clerk.GlobalError>\n * </SignIn.Root>\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.GlobalError>\n *     {({ message, code }) => (\n *       <span data-error-code={code}>{message}</span>\n *     )}\n *   </Clerk.GlobalError>\n * </SignIn.Root>\n */\nconst GlobalError = React.forwardRef<FormGlobalErrorElement, FormGlobalErrorProps>(\n  ({ asChild = false, children, code, ...rest }, forwardedRef) => {\n    const { errors } = useGlobalErrors();\n\n    const error = errors?.[0];\n\n    if (!error || (code && error.code !== code)) {\n      return null;\n    }\n\n    const Comp = asChild ? Slot : 'div';\n    const child = typeof children === 'function' ? children(error) : children;\n\n    if (isReactFragment(child)) {\n      throw new ClerkElementsRuntimeError('<GlobalError /> cannot render a Fragment as a child.');\n    }\n\n    return (\n      <Comp\n        role='alert'\n        {...rest}\n        ref={forwardedRef}\n      >\n        {child || error.message}\n      </Comp>\n    );\n  },\n);\n\n/**\n * FieldError renders error messages associated with a specific field. By default, the error's message will be rendered in an unstyled `<span>`. Optionally, the `children` prop accepts a function to completely customize rendering.\n *\n * @param {string} [name] - Used to target a specific field by name when rendering outside of a `<Field>` component.\n * @param {Function} [children] - A function that receives `message` and `code` as arguments.\n *\n * @example\n * <Clerk.Field name=\"email\">\n *   <Clerk.FieldError />\n * </Clerk.Field>\n *\n * @example\n * <Clerk.Field name=\"email\">\n *   <Clerk.FieldError>\n *     {({ message, code }) => (\n *       <span data-error-code={code}>{message}</span>\n *     )}\n *   </Clerk.FieldError>\n * </Clerk.Field>\n */\nconst FieldError = React.forwardRef<FormFieldErrorElement, FormFieldErrorProps>(\n  ({ asChild = false, children, code, name, ...rest }, forwardedRef) => {\n    const fieldContext = useFieldContext();\n    const fieldName = fieldContext?.name || name;\n    const { feedback } = useFieldFeedback({ name: fieldName });\n\n    if (!(feedback?.type === 'error')) {\n      return null;\n    }\n\n    const error = feedback.message;\n\n    if (!error) {\n      return null;\n    }\n\n    const Comp = asChild ? Slot : 'span';\n    const child = typeof children === 'function' ? children(error) : children;\n\n    // const forceMatch = code ? error.code === code : undefined; // TODO: Re-add when Radix Form is updated\n\n    if (isReactFragment(child)) {\n      throw new ClerkElementsRuntimeError('<FieldError /> cannot render a Fragment as a child.');\n    }\n\n    return (\n      <RadixFormMessage\n        data-error-code={error.code}\n        // forceMatch={forceMatch}\n        {...rest}\n        ref={forwardedRef}\n        asChild\n      >\n        <Comp>{child || error.message}</Comp>\n      </RadixFormMessage>\n    );\n  },\n);\n\nGlobalError.displayName = GLOBAL_ERROR_NAME;\nFieldError.displayName = FIELD_ERROR_NAME;\n\nexport { Field, FieldError, FieldState, Form, GlobalError, Input, Label, Submit };\nexport type {\n  RadixFormControlProps as FormControlProps,\n  FormErrorProps,\n  FormErrorRenderProps,\n  FormFieldErrorProps,\n  FormFieldProps,\n  FormGlobalErrorProps,\n  FormInputProps,\n  FormProps,\n  FormSubmitProps,\n};\n","export { composeEventHandlers } from './primitive';\n","function composeEventHandlers<E>(\n  originalEventHandler?: (event: E) => void,\n  ourEventHandler?: (event: E) => void,\n  { checkForDefaultPrevented = true } = {}\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n\n    if (checkForDefaultPrevented === false || !((event as unknown) as Event).defaultPrevented) {\n      return ourEventHandler?.(event);\n    }\n  };\n}\n\nexport { composeEventHandlers };\n","import type { ClerkAPIError } from '@clerk/types';\n\nexport abstract class ClerkElementsErrorBase extends Error {\n  clerkError = true;\n  clerkElementsError = true;\n  rawMessage: string;\n\n  constructor(\n    readonly code: string,\n    message: string,\n  ) {\n    super(message);\n\n    this.name = 'ClerkElementsError';\n    this.rawMessage = message;\n  }\n\n  toString() {\n    return `[${this.name}]\\nCode: ${this.code}\\nMessage: ${this.message}`;\n  }\n}\n\nexport class ClerkElementsError extends ClerkElementsErrorBase {\n  static fromAPIError(error: ClerkAPIError) {\n    return new ClerkElementsError(error.code, error.longMessage || error.message);\n  }\n\n  constructor(code: string, message: string) {\n    super(code, message);\n    this.name = 'ClerkElementsError';\n  }\n}\n\nexport class ClerkElementsRuntimeError extends ClerkElementsErrorBase {\n  constructor(message: string) {\n    super('elements_runtime_error', message);\n    this.name = 'ClerkElementsRuntimeError';\n  }\n}\n\nexport class ClerkElementsFieldError extends ClerkElementsErrorBase {\n  static fromAPIError(error: ClerkAPIError) {\n    return new ClerkElementsFieldError(error.code, error.longMessage || error.message);\n  }\n\n  constructor(code: string, message: string) {\n    super(code, message);\n    this.name = 'ClerkElementsFieldError';\n  }\n\n  get validityState() {\n    return this.code;\n  }\n\n  get forceMatch() {\n    return true;\n  }\n\n  matchFn = () => true;\n}\n","import { createActorContext } from '@xstate/react';\nimport type { SnapshotFrom } from 'xstate';\n\nimport { FormMachine } from '~/internals/machines/form';\nimport { inspect } from '~/internals/utils/inspector';\n\nexport type SnapshotState = SnapshotFrom<typeof FormMachine>;\n\nconst FormMachineContext = createActorContext(FormMachine, { inspect });\n\nexport const FormStoreProvider = FormMachineContext.Provider;\nexport const useFormStore = FormMachineContext.useActorRef;\nexport const useFormSelector = FormMachineContext.useSelector;\n\n/**\n * Selects a global error, if it exists\n */\nexport const globalErrorsSelector = (state: SnapshotState) => state.context.errors;\n\n/**\n * Selects if a specific field has a value\n */\nexport const fieldValueSelector = (name: string | undefined) => (state: SnapshotState) =>\n  name ? state.context.fields.get(name)?.value : '';\n\n/**\n * Selects if a specific field has a value\n */\nexport const fieldHasValueSelector = (name: string | undefined) => (state: SnapshotState) =>\n  Boolean(fieldValueSelector(name)(state));\n\n/**\n * Selects field-specific feedback, if they exist\n */\nexport const fieldFeedbackSelector = (name: string | undefined) => (state: SnapshotState) =>\n  name ? state.context.fields.get(name)?.feedback : undefined;\n","import { isKnownError } from '@clerk/shared/error';\nimport { snakeToCamel } from '@clerk/shared/underscore';\nimport type { MachineContext } from 'xstate';\nimport { assign, enqueueActions, setup } from 'xstate';\n\nimport { ClerkElementsError, ClerkElementsFieldError } from '~/internals/errors';\n\nimport type { FieldDetails, FormDefaultValues, FormFields } from './form.types';\n\nexport interface FormMachineContext extends MachineContext {\n  defaultValues: FormDefaultValues;\n  errors: ClerkElementsError[];\n  fields: FormFields;\n  hidden?: Set<string>;\n  missing?: Set<string>;\n  optional?: Set<string>;\n  progressive: boolean;\n  required?: Set<string>;\n}\n\nexport type FormMachineEvents =\n  | { type: 'FIELD.ADD'; field: Pick<FieldDetails, 'name' | 'value'> }\n  | { type: 'FIELD.REMOVE'; field: Pick<FieldDetails, 'name'> }\n  | {\n      type: 'MARK_AS_PROGRESSIVE';\n      defaultValues: FormDefaultValues;\n      missing: string[];\n      optional: string[];\n      required: string[];\n    }\n  | { type: 'UNMARK_AS_PROGRESSIVE' }\n  | {\n      type: 'FIELD.UPDATE';\n      field: Pick<FieldDetails, 'name' | 'value'>;\n    }\n  | { type: 'ERRORS.SET'; error: any }\n  | { type: 'ERRORS.CLEAR' }\n  | {\n      type: 'FIELD.FEEDBACK.SET';\n      field: Pick<FieldDetails, 'name' | 'feedback'>;\n    }\n  | {\n      type: 'FIELD.FEEDBACK.CLEAR';\n      field: Pick<FieldDetails, 'name'>;\n    }\n  | { type: 'FIELD.FEEDBACK.CLEAR.ALL' };\n\ntype FormMachineTypes = {\n  events: FormMachineEvents;\n  context: FormMachineContext;\n};\n\nexport type TFormMachine = typeof FormMachine;\n\n/**\n * A machine for managing form state.\n * This machine is used alongside our other, flow-specific machines and a reference to a spawned FormMachine actor is used in the flows to interact with the form state.\n */\nexport const FormMachine = setup({\n  actions: {\n    setGlobalErrors: assign({\n      errors: (_, params: { errors: ClerkElementsError[] }) => [...params.errors],\n    }),\n    setFieldFeedback: assign({\n      fields: ({ context }, params: Pick<FieldDetails, 'name' | 'feedback'>) => {\n        if (!params.name) {\n          throw new Error('Field name is required');\n        }\n\n        if (context.fields.has(params.name)) {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          context.fields.get(params.name)!.feedback = params.feedback;\n        }\n\n        return context.fields;\n      },\n    }),\n  },\n  types: {} as FormMachineTypes,\n}).createMachine({\n  id: 'Form',\n  context: () => ({\n    defaultValues: new Map(),\n    errors: [],\n    fields: new Map(),\n    progressive: false,\n  }),\n  on: {\n    'ERRORS.SET': {\n      actions: enqueueActions(({ enqueue, event }) => {\n        if (isKnownError(event.error)) {\n          const fields: Record<string, ClerkElementsFieldError[]> = {};\n          const globalErrors: ClerkElementsError[] = [];\n\n          for (const error of event.error.errors || [event.error]) {\n            const name = snakeToCamel(error.meta?.paramName);\n\n            if (!name) {\n              globalErrors.push(ClerkElementsError.fromAPIError(error));\n              continue;\n            } else if (!fields[name]) {\n              fields[name] = [];\n            }\n\n            fields[name]?.push(ClerkElementsFieldError.fromAPIError(error));\n          }\n\n          enqueue({\n            type: 'setGlobalErrors',\n            params: {\n              errors: globalErrors,\n            },\n          });\n\n          for (const field in fields) {\n            enqueue({\n              type: 'setFieldFeedback',\n              params: {\n                name: field,\n                feedback: {\n                  type: 'error',\n                  message: fields[field][0],\n                },\n              },\n            });\n          }\n        }\n      }),\n    },\n    'ERRORS.CLEAR': {\n      actions: assign({\n        errors: () => [],\n      }),\n    },\n    'FIELD.ADD': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n\n          event.field.value = event.field.value || context.defaultValues.get(event.field.name) || undefined;\n\n          context.fields.set(event.field.name, event.field);\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.UPDATE': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n\n          if (context.fields.has(event.field.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            context.fields.get(event.field.name)!.value = event.field.value;\n          }\n\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.REMOVE': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n\n          context.fields.delete(event.field.name);\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.FEEDBACK.SET': {\n      actions: [\n        {\n          type: 'setFieldFeedback',\n          params: ({ event }) => event.field,\n        },\n      ],\n    },\n    'FIELD.FEEDBACK.CLEAR': {\n      actions: assign({\n        fields: ({ context, event }) => {\n          if (!event.field.name) {\n            throw new Error('Field name is required');\n          }\n          if (context.fields.has(event.field.name)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            context.fields.get(event.field.name)!.feedback = undefined;\n          }\n\n          return context.fields;\n        },\n      }),\n    },\n    'FIELD.FEEDBACK.CLEAR.ALL': {\n      actions: assign({\n        fields: ({ context }) => {\n          context.fields.forEach(field => {\n            field.feedback = undefined;\n          });\n\n          return context.fields;\n        },\n      }),\n    },\n    MARK_AS_PROGRESSIVE: {\n      actions: assign(({ event }) => {\n        const missing = new Set(event.missing);\n\n        return {\n          defaultValues: event.defaultValues,\n          hidden: new Set([...event.required.filter(f => !missing.has(f)), ...event.optional]),\n          missing,\n          optional: new Set(event.optional),\n          progressive: true,\n          required: new Set(event.required),\n        };\n      }),\n    },\n    UNMARK_AS_PROGRESSIVE: {\n      actions: assign({\n        defaultValues: new Map(),\n        hidden: undefined,\n        missing: undefined,\n        optional: undefined,\n        progressive: false,\n        required: undefined,\n      }),\n    },\n  },\n});\n","import type { InspectionEvent, Observer } from 'xstate';\n\nimport { getInspector as getBrowserInspector } from './browser';\nimport { getInspector as getConsoleInspector } from './console';\n\nexport let inspect: Observer<InspectionEvent> | undefined;\n\nif (__DEV__) {\n  inspect = getBrowserInspector() ?? getConsoleInspector();\n}\n\nconst inspector = {\n  inspect,\n};\n\nexport default inspector;\n","import { useClerk } from '@clerk/clerk-react';\nimport { noop } from '@clerk/shared';\nimport type { PasswordSettingsData, PasswordValidation } from '@clerk/types';\nimport * as React from 'react';\n\nimport type { ErrorMessagesKey } from '../utils/generate-password-error-text';\nimport { generatePasswordErrorText } from '../utils/generate-password-error-text';\n\n// This hook should mimic the already existing usePassword hook in the clerk-js package\n// @see packages/clerk-js/src/ui/hooks/usePassword.ts\n\ntype UsePasswordCallbacks = {\n  onValidationError?: (error: string | undefined, keys: ErrorMessagesKey[]) => void;\n  onValidationSuccess?: () => void;\n  onValidationWarning?: (warning: string, keys: string[]) => void;\n  onValidationInfo?: (info: string, keys: ErrorMessagesKey[]) => void;\n  onValidationComplexity?: (b: boolean) => void;\n};\n\nexport const usePassword = (callbacks?: UsePasswordCallbacks) => {\n  const clerk = useClerk();\n  const passwordSettings = clerk.__unstable__environment?.userSettings.passwordSettings as PasswordSettingsData;\n  const { disable_hibp, min_zxcvbn_strength, show_zxcvbn, ...config } = passwordSettings || {};\n\n  const {\n    onValidationError = noop,\n    onValidationSuccess = noop,\n    onValidationWarning = noop,\n    onValidationInfo = noop,\n    onValidationComplexity,\n  } = callbacks || {};\n\n  const onValidate = React.useCallback(\n    (res: PasswordValidation) => {\n      /**\n       * Failed complexity rules always have priority\n       */\n      if (res.complexity) {\n        if (Object.values(res?.complexity).length > 0) {\n          const { message, keys } = generatePasswordErrorText({\n            config,\n            failedValidations: res.complexity,\n          });\n\n          if (res.complexity?.min_length) {\n            return onValidationInfo(message, keys);\n          }\n\n          return onValidationError(message, keys);\n        }\n      }\n\n      /**\n       * Failed strength\n       */\n      if (res?.strength?.state === 'fail') {\n        const keys = res.strength.keys;\n        const error = keys.map(key => get(zxcvbnKeys, key)).join(' ');\n        return onValidationError(error, keys);\n      }\n\n      /**\n       * Password meets all criteria but could be stronger\n       */\n      if (res?.strength?.state === 'pass') {\n        const keys = res.strength.keys;\n        const error = keys.map(key => get(zxcvbnKeys, key)).join(' ');\n        return onValidationWarning(error, keys);\n      }\n\n      /**\n       * Password meets all criteria and is strong\n       */\n      return onValidationSuccess();\n    },\n    [callbacks],\n  );\n\n  const validatePassword = React.useMemo(() => {\n    return (password: string) => {\n      return clerk.client.signUp.validatePassword(password, {\n        onValidation: onValidate,\n        onValidationComplexity,\n      });\n    };\n  }, [onValidate]);\n\n  return {\n    validatePassword,\n  };\n};\n\nconst get = (t: Record<string, any>, path: string) => path.split('.').reduce((r, k) => r?.[k], t);\n\nconst zxcvbnKeys = {\n  unstable__errors: {\n    zxcvbn: {\n      couldBeStronger: 'Your password works, but could be stronger. Try adding more characters.',\n      goodPassword: 'Your password meets all the necessary requirements.',\n      notEnough: 'Your password is not strong enough.',\n      suggestions: {\n        allUppercase: 'Capitalize some, but not all letters.',\n        anotherWord: 'Add more words that are less common.',\n        associatedYears: 'Avoid years that are associated with you.',\n        capitalization: 'Capitalize more than the first letter.',\n        dates: 'Avoid dates and years that are associated with you.',\n        l33t: \"Avoid predictable letter substitutions like '@' for 'a'.\",\n        longerKeyboardPattern: 'Use longer keyboard patterns and change typing direction multiple times.',\n        noNeed: 'You can create strong passwords without using symbols, numbers, or uppercase letters.',\n        pwned: 'If you use this password elsewhere, you should change it.',\n        recentYears: 'Avoid recent years.',\n        repeated: 'Avoid repeated words and characters.',\n        reverseWords: 'Avoid reversed spellings of common words.',\n        sequences: 'Avoid common character sequences.',\n        useWords: 'Use multiple words, but avoid common phrases.',\n      },\n      warnings: {\n        common: 'This is a commonly used password.',\n        commonNames: 'Common names and surnames are easy to guess.',\n        dates: 'Dates are easy to guess.',\n        extendedRepeat: 'Repeated character patterns like \"abcabcabc\" are easy to guess.',\n        keyPattern: 'Short keyboard patterns are easy to guess.',\n        namesByThemselves: 'Single names or surnames are easy to guess.',\n        pwned: 'Your password was exposed by a data breach on the Internet.',\n        recentYears: 'Recent years are easy to guess.',\n        sequences: 'Common character sequences like \"abc\" are easy to guess.',\n        similarToCommon: 'This is similar to a commonly used password.',\n        simpleRepeat: 'Repeated characters like \"aaa\" are easy to guess.',\n        straightRow: 'Straight rows of keys on your keyboard are easy to guess.',\n        topHundred: 'This is a frequently used password.',\n        topTen: 'This is a heavily used password.',\n        userInputs: 'There should not be any personal or page related data.',\n        wordByItself: 'Single words are easy to guess.',\n      },\n    },\n  },\n};\n","import type { Autocomplete, PasswordSettingsData } from '@clerk/types';\n\n// Copied from packages/clerk-js/src/ui/hooks/usePasswordComplexity.ts\n\ntype ComplexityErrors = {\n  [key in keyof Partial<Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>>]?: boolean;\n};\n\nexport type ComplexityConfig = Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>;\n\nconst errorMessages: Record<keyof Omit<ComplexityErrors, 'allowed_special_characters'>, [string, string] | string> = {\n  max_length: ['less than %length% characters', 'length'],\n  min_length: ['%length% or more characters', 'length'],\n  require_numbers: 'a number',\n  require_lowercase: 'a lowercase letter',\n  require_uppercase: 'an uppercase letter',\n  require_special_char: 'a special character',\n};\n\nexport type ErrorMessagesKey = Autocomplete<keyof typeof errorMessages>;\n\nconst createListFormat = (message: string[]) => {\n  let messageWithPrefix: string;\n  if ('ListFormat' in Intl) {\n    const formatter = new Intl.ListFormat('en', { style: 'long', type: 'conjunction' });\n    messageWithPrefix = formatter.format(message);\n  } else {\n    messageWithPrefix = message.join(', ');\n  }\n\n  return messageWithPrefix;\n};\n\ntype GeneratePasswordErrorTextProps = {\n  config: ComplexityConfig;\n  failedValidations: ComplexityErrors | undefined;\n};\n\nexport const generatePasswordErrorText = ({ config, failedValidations }: GeneratePasswordErrorTextProps) => {\n  const keys: ErrorMessagesKey[] = [];\n\n  if (!failedValidations || Object.keys(failedValidations).length === 0) {\n    return {\n      keys,\n      message: '',\n    };\n  }\n\n  // show min length error first by itself\n  const hasMinLengthError = failedValidations?.min_length || false;\n\n  const messages = Object.entries(failedValidations)\n    .filter(k => (hasMinLengthError ? k[0] === 'min_length' : true))\n    .filter(([, v]) => !!v)\n    .map(([k]) => {\n      const entry = k as keyof typeof errorMessages;\n      keys.push(entry);\n      const errorKey = errorMessages[entry];\n\n      if (Array.isArray(errorKey)) {\n        const [msg, replaceValue] = errorKey;\n        return msg.replace(`%${replaceValue}%`, config[k as keyof ComplexityConfig] as string);\n      }\n      return errorKey;\n    });\n\n  const messageWithPrefix = createListFormat(messages);\n\n  return {\n    keys,\n    message: `Your password must contain ${messageWithPrefix}.`,\n  };\n};\n","import { useSelector as useSelectorUnbound } from '@xstate/react';\nimport * as React from 'react';\nimport type { ActorRefFrom, AnyActorRef, AnyStateMachine, SnapshotFrom } from 'xstate';\n\n/**\n * Creates a context and hooks for a given actor ref.\n\n * @example\n * const SignInRouterCtx = createContextFromActorRef<typeof SignInRouterMachine>('SignInRouterCtx')\n *\n * const Parent = () => {\n *   const ref = useActorRef(SignInRouterMachine, { input: { basePath: '/sign-in' } });\n *\n *   return (\n *     <SignInRouterCtx.Provider ref={ref}>\n *       <Child />\n *     </SignInRouterCtx>\n *   )\n * }\n *\n * const Child = () => {\n *   const ref = SignInRouterCtx.useActorRef();\n *   const status = SignInRouterCtx.useSelector(state => state.context.clerk);\n\n *   const handleClick = useCallback(() => ref.send({ type: 'NEXT' }), [ref]);\n *\n *   return <button onClick={handleClick}>;\n * }\n */\n\nexport function createContextFromActorRef<TMachine extends AnyStateMachine, TRef = ActorRefFrom<TMachine>>(\n  displayName: string,\n) {\n  const ReactContext = React.createContext<TRef | null>(null);\n  const OriginalProvider = ReactContext.Provider;\n\n  function Provider({ children, actorRef }: { children: React.ReactNode; actorRef: TRef }) {\n    return React.createElement(\n      OriginalProvider,\n      {\n        value: actorRef,\n      },\n      children,\n    );\n  }\n\n  Provider.displayName = displayName;\n\n  function useContext(allowMissingActor?: false | undefined): TRef;\n  function useContext(allowMissingActor: true): TRef | null;\n  function useContext(allowMissingActor: boolean = false): TRef | null {\n    const actorRef = React.useContext(ReactContext);\n\n    if (!allowMissingActor && !actorRef) {\n      throw new Error(\n        `You used a hook from \"${Provider.displayName}\" but it's not inside a <${Provider.displayName}.Provider> component.`,\n      );\n    }\n\n    return actorRef;\n  }\n\n  function useSelector<T>(selector: (snapshot: SnapshotFrom<TRef>) => T, compare?: (a: T, b: T) => boolean): T {\n    const actor = useContext();\n    return useSelectorUnbound(actor as AnyActorRef, selector, compare);\n  }\n\n  return {\n    Provider,\n    useActorRef: useContext,\n    useSelector,\n  };\n}\n","import type { ActorRefFrom, AnyActorRef, AnyStateMachine, SnapshotFrom } from 'xstate';\n\nimport type {\n  TSignInFirstFactorMachine,\n  TSignInResetPasswordMachine,\n  TSignInRouterMachine,\n  TSignInSecondFactorMachine,\n  TSignInStartMachine,\n} from '~/internals/machines/sign-in';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SnapshotState = SnapshotFrom<TSignInRouterMachine>;\n\nexport const SignInRouterCtx = createContextFromActorRef<TSignInRouterMachine>('SignInRouterCtx');\n\nfunction useSignInStep<M extends AnyStateMachine, T = ActorRefFrom<M>>(name: string) {\n  return SignInRouterCtx.useSelector(state => state.children[name] as AnyActorRef) as T;\n}\n\nexport const useSignInStartStep = () => useSignInStep<TSignInStartMachine>('start');\nexport const useSignInFirstFactorStep = () => useSignInStep<TSignInFirstFactorMachine>('firstFactor');\nexport const useSignInSecondFactorStep = () => useSignInStep<TSignInSecondFactorMachine>('secondFactor');\nexport const useSignInResetPasswordStep = () => useSignInStep<TSignInResetPasswordMachine>('resetPassword');\n\nexport const useSignInPasskeyAutofill = () =>\n  SignInRouterCtx.useSelector(state => state.context.webAuthnAutofillSupport);\n","import * as React from 'react';\n\nexport function isReactFragment(node: React.ReactNode) {\n  return React.isValidElement(node) && node.type === React.Fragment;\n}\n","import { Control as RadixControl } from '@radix-ui/react-form';\nimport * as React from 'react';\n\nimport type { FormControlProps } from '~/react/common/form';\n\nexport type OTPInputProps = Exclude<\n  FormControlProps,\n  'type' | 'autoComplete' | 'minLength' | 'maxLength' | 'inputMode' | 'pattern' | 'spellCheck'\n> & {\n  render?: (props: { value: string; status: OTPInputSegmentStatus; index: number }) => React.ReactNode;\n  length?: number;\n  autoSubmit?: boolean;\n  passwordManagerOffset?: number;\n};\n\ntype SelectionRange = readonly [start: number | null, end: number | null];\nconst ZERO: SelectionRange = [0, 0];\nconst OUTSIDE: SelectionRange = [-1, -1];\n\nexport const OTP_LENGTH_DEFAULT = 6;\nconst PASSWORD_MANAGER_OFFSET_DEFAULT = 40;\n\n/**\n * The status of a single segment element in the OTP input\n */\nexport type OTPInputSegmentStatus = 'none' | 'cursor' | 'selected' | 'hovered';\n\n/**\n * If the render prop is provided, a custom segmented input will be rendered. Otherwise a standard input will be rendered.\n */\nexport const OTPInput = React.forwardRef<HTMLInputElement, OTPInputProps>(function OTPInput(props, ref) {\n  const { render, length, autoSubmit, ...rest } = props;\n  const hasRenderProp = typeof render !== 'undefined';\n\n  if (hasRenderProp) {\n    return (\n      <OTPInputSegmented\n        {...rest}\n        ref={ref}\n        render={render}\n        length={length}\n        autoSubmit={autoSubmit}\n      />\n    );\n  }\n\n  return (\n    <OTPInputStandard\n      {...rest}\n      ref={ref}\n      length={length}\n      autoSubmit={autoSubmit}\n    />\n  );\n});\n\n/**\n * Standard `<input />` element that receives the same props as the OTPInput component except for the render prop.\n */\nconst OTPInputStandard = React.forwardRef<HTMLInputElement, Omit<OTPInputProps, 'render'>>(\n  function OTPInput(props, ref) {\n    const { length = OTP_LENGTH_DEFAULT, autoSubmit = false, ...rest } = props;\n\n    const innerRef = React.useRef<HTMLInputElement>(null);\n    // This ensures we can access innerRef internally while still exposing it via the ref prop\n    React.useImperativeHandle(ref, () => innerRef.current as HTMLInputElement, []);\n\n    // Fire the requestSubmit callback when the input has the required length and autoSubmit is enabled\n    React.useEffect(() => {\n      if (String(props.value).length === length && autoSubmit) {\n        innerRef.current?.form?.requestSubmit();\n      }\n    }, [props.value, length, autoSubmit]);\n\n    return (\n      <RadixControl\n        ref={innerRef}\n        {...rest}\n        data-otp-input-standard\n      />\n    );\n  },\n);\n\n/**\n * A custom input component to handle accepting OTP codes. An invisible input element is used to capture input and handle native input\n * interactions, while the provided render prop is used to visually render the input's contents.\n */\nconst OTPInputSegmented = React.forwardRef<HTMLInputElement, Required<Pick<OTPInputProps, 'render'>> & OTPInputProps>(\n  function OTPInput(props, ref) {\n    const {\n      className: userProvidedClassName,\n      render,\n      length = OTP_LENGTH_DEFAULT,\n      autoSubmit = false,\n      passwordManagerOffset = PASSWORD_MANAGER_OFFSET_DEFAULT,\n      ...rest\n    } = props;\n\n    const innerRef = React.useRef<HTMLInputElement>(null);\n    const [selectionRange, setSelectionRange] = React.useState<SelectionRange>(props.autoFocus ? ZERO : OUTSIDE);\n    const [isHovering, setIsHovering] = React.useState(false);\n\n    const isFocused = () => document.activeElement === innerRef.current;\n\n    // This ensures we can access innerRef internally while still exposing it via the ref prop\n    React.useImperativeHandle(ref, () => innerRef.current as HTMLInputElement, []);\n\n    /**\n     * A layout effect is used here to avoid any perceived visual lag when changing the selection\n     * This effect ensures that when deleting characters from the input the selection is updated\n     */\n    React.useLayoutEffect(() => {\n      if (document.activeElement !== innerRef.current) {\n        return;\n      }\n      setSelectionRange(cur => selectionRangeUpdater(cur, innerRef));\n    }, [props.value]);\n\n    /**\n     * Attach a selectionchange handler on the document during the capture phase to the selection range is updated\n     * immediately.\n     *\n     * One concrete example, if using onSelect on the input, the handler wouldn't fire when pressing cmd + left/right arrow.\n     */\n    React.useEffect(() => {\n      function onSelectionChange() {\n        if (!isFocused()) {\n          return;\n        }\n        setSelectionRange(cur => selectionRangeUpdater(cur, innerRef));\n      }\n\n      document.addEventListener('selectionchange', onSelectionChange, { capture: true });\n      return () => document.removeEventListener('selectionchange', onSelectionChange);\n    }, []);\n\n    // Fire the requestSubmit callback when the input has the required length and autoSubmit is enabled\n    React.useEffect(() => {\n      if (String(props.value).length === length && autoSubmit) {\n        innerRef.current?.form?.requestSubmit();\n      }\n    }, [props.value, length, autoSubmit]);\n\n    return (\n      <div\n        data-otp-input-wrapper\n        style={wrapperStyle}\n      >\n        {/* We can't target pseudo-elements with the style prop, so we inject a tag here */}\n        <style>{`\n      input[data-otp-input-segmented]::selection {\n        color: transparent;\n        background-color: transparent;\n      }\n      `}</style>\n        <RadixControl\n          data-otp-input-segmented\n          ref={innerRef}\n          {...rest}\n          onFocus={event => {\n            // Place the caret at the end of the current value\n            if (innerRef.current) {\n              const start = Math.min(innerRef.current.value.length, length - 1);\n              const end = innerRef.current.value.length;\n              innerRef.current.setSelectionRange(start, end);\n              setSelectionRange([start, end]);\n            }\n            rest?.onFocus?.(event);\n          }}\n          onBlur={event => {\n            setSelectionRange([-1, -1]);\n            rest?.onBlur?.(event);\n          }}\n          onMouseOver={event => {\n            if (!isFocused()) {\n              setIsHovering(true);\n            }\n            props.onMouseOver?.(event);\n          }}\n          onMouseLeave={event => {\n            setIsHovering(false);\n            props.onMouseLeave?.(event);\n          }}\n          style={{\n            ...inputStyle,\n            clipPath: `inset(0 calc(1ch + ${passwordManagerOffset}px) 0 0)`,\n            width: `calc(100% + 1ch + ${passwordManagerOffset}px)`,\n          }}\n        />\n        <div\n          className={userProvidedClassName}\n          aria-hidden\n          style={segmentWrapperStyle}\n        >\n          {Array.from({ length }).map((_, i) => {\n            const isHovered = isHovering && !isFocused();\n            const isCursor = selectionRange[0] === selectionRange[1] && selectionRange[0] === i;\n            const isSelected = (selectionRange[0] ?? -1) <= i && (selectionRange[1] ?? -1) > i;\n\n            return (\n              <React.Fragment key={`otp-segment-${i}`}>\n                {render({\n                  value: String(props.value)[i] || '',\n                  status: isHovered ? 'hovered' : isCursor ? 'cursor' : isSelected ? 'selected' : 'none',\n                  index: i,\n                })}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\n\n/**\n * Handle updating the input selection range to ensure a single character is selected when moving the cursor, or if the input value changes.\n */\nfunction selectionRangeUpdater(cur: SelectionRange, inputRef: React.RefObject<HTMLInputElement>) {\n  let updated: [number, number, HTMLInputElement['selectionDirection']] = [\n    inputRef.current?.selectionStart ?? 0,\n    inputRef.current?.selectionEnd ?? 0,\n    inputRef.current?.selectionDirection ?? null,\n  ];\n\n  // Abort unnecessary updates\n  if (cur[0] === updated[0] && cur[1] === updated[1]) {\n    return cur;\n  }\n\n  // ensures that forward selection works properly when landing on the first character\n  if (updated[0] === 0 && updated[1] === 1) {\n    updated[2] = 'forward';\n  }\n\n  // When moving the selection, we want to select either the previous or next character instead of only moving the cursor.\n  // If the start and end indices are the same, it means only the cursor has moved and we need to make a decision on which character to select.\n  if (updated[0] === updated[1]) {\n    if (updated[0] > 0 && cur[0] === updated[0] && cur[1] === updated[0] + 1) {\n      updated = [updated[0] - 1, updated[1], 'backward'];\n    } else if (typeof inputRef.current?.value[updated[0]] !== 'undefined') {\n      updated = [updated[0], updated[1] + 1, 'backward'];\n    } else if (updated[0] >= OTP_LENGTH_DEFAULT) {\n      updated = [updated[0] - 1, updated[1], 'backward'];\n    }\n  }\n\n  inputRef.current?.setSelectionRange(updated[0], updated[1], updated[2] ?? undefined);\n\n  return [updated[0], updated[1]] satisfies SelectionRange;\n}\n\nconst wrapperStyle = {\n  position: 'relative',\n  userSelect: 'none',\n} satisfies React.CSSProperties;\n\nconst inputStyle = {\n  display: 'block',\n  background: 'transparent',\n  opacity: 1,\n  outline: 'transparent solid 0px',\n  appearance: 'none',\n  color: 'transparent',\n  position: 'absolute',\n  inset: 0,\n  caretColor: 'transparent',\n  border: '0 px solid transparent',\n  // width is handled inline\n  height: '100%',\n  letterSpacing: '-1rem',\n} satisfies React.CSSProperties;\n\nconst segmentWrapperStyle = {\n  zIndex: 1,\n  pointerEvents: 'none',\n} satisfies React.CSSProperties;\n","import type { HTMLInputTypeAttribute } from 'react';\n\n/** Extracted relevant fields from @clerk/types  */\nexport type ClerkFieldId =\n  | 'code'\n  | 'confirmPassword'\n  | 'currentPassword'\n  | 'emailAddress'\n  | 'firstName'\n  | 'identifier'\n  | 'lastName'\n  | 'name'\n  | 'newPassword'\n  | 'password'\n  | 'phoneNumber'\n  | 'username';\n\n/**\n * Possible types for the Clerk input element, several 'special' input types are included.\n */\nexport type ClerkInputType = HTMLInputTypeAttribute | 'otp';\n\nexport const FIELD_STATES = {\n  success: 'success',\n  error: 'error',\n  idle: 'idle',\n  warning: 'warning',\n  info: 'info',\n} as const;\n\nexport type FieldStates = (typeof FIELD_STATES)[keyof typeof FIELD_STATES];\n\nexport const FIELD_VALIDITY = {\n  valid: 'valid',\n  invalid: 'invalid',\n} as const;\n\nexport type FieldValidity = (typeof FIELD_VALIDITY)[keyof typeof FIELD_VALIDITY];\n","import type { OAuthProvider, Web3Provider } from '@clerk/types';\nimport { Slot } from '@radix-ui/react-slot';\nimport { createContext, useContext } from 'react';\n\nimport type { ThirdPartyProvider } from '~/utils/third-party-strategies';\n\nimport { useThirdPartyProvider } from '../hooks';\nimport { SignInRouterCtx } from '../sign-in/context';\nimport { SignUpRouterCtx } from '../sign-up/context';\n\nexport type UseThirdPartyProviderReturn =\n  | (ThirdPartyProvider & {\n      events: {\n        authenticate: (event: React.MouseEvent<Element>) => void;\n      };\n    })\n  | null;\n\nexport const ConnectionContext = createContext<ThirdPartyProvider | null>(null);\nexport const useConnectionContext = () => {\n  const ctx = useContext(ConnectionContext);\n\n  if (!ctx) {\n    throw new Error('useConnectionContext must be used within <Clerk.Connection>');\n  }\n\n  return ctx;\n};\n\nexport interface ConnectionProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  name: OAuthProvider | Web3Provider;\n}\n\n/**\n * Renders a social connection button based on the provided name. If your instance does not have the social connection enabled, this component will throw an error in development.\n *\n * **Tip:** You can use the `<Icon />` component to render the social connection icon.\n *\n * @param {boolean} [asChild] - If true, `<Connection />` will render as its child element, passing along any necessary props.\n * @param {OAuthProvider | Web3Provider} name - The name of the social connection to render.\n *\n * @example\n * <SignIn.Root>\n *  <SignIn.Step name=\"start\">\n *    <Clerk.Connection name=\"google\">\n *      Sign in with Google\n *    </Clerk.Connection>\n *  </SignIn.Step>\n * </SignIn.Root>\n */\nexport function Connection({ asChild, name, ...rest }: ConnectionProps) {\n  const signInRef = SignInRouterCtx.useActorRef(true);\n  const signUpRef = SignUpRouterCtx.useActorRef(true);\n  const provider = useThirdPartyProvider((signInRef || signUpRef)!, name);\n\n  if (!provider) {\n    return null;\n  }\n\n  const Comp = asChild ? Slot : 'button';\n  const defaultProps = asChild ? {} : { type: 'button' as const };\n\n  return (\n    <ConnectionContext.Provider value={provider}>\n      <Comp\n        onClick={provider.events.authenticate}\n        {...defaultProps}\n        {...rest}\n      />\n    </ConnectionContext.Provider>\n  );\n}\n\nexport interface IconProps extends Omit<React.HTMLAttributes<HTMLImageElement>, 'src'> {\n  asChild?: boolean;\n}\n\n/**\n * `<Icon>` **must** be used inside `<Connection>`. By default, `<Icon>` will render as an `<img>` element with the `src` pointing to the logo of the currently used `<Connection>`.\n *\n * @param {boolean} [asChild] - If true, `<Icon />` will render as its child element, passing along any necessary props.\n *\n * @example\n * <SignIn.Root>\n *  <SignIn.Step name=\"start\">\n *    <Clerk.Connection name=\"google\">\n *      <Clerk.Icon />\n *      Sign in with Google\n *    </Clerk.Connection>\n *  </SignIn.Step>\n * </SignIn.Root>\n */\nexport function Icon({ asChild, ...rest }: IconProps) {\n  const { iconUrl, name } = useConnectionContext();\n\n  const Comp = asChild ? Slot : 'img';\n  return (\n    <Comp\n      alt={`${name} logo`}\n      src={iconUrl}\n      {...rest}\n    />\n  );\n}\n","import { useClerk } from '@clerk/clerk-react';\nimport type { OAuthProvider, Web3Provider } from '@clerk/types';\nimport type React from 'react';\nimport { useCallback } from 'react';\nimport type { ActorRef } from 'xstate';\n\nimport type { SignInRouterEvents } from '~/internals/machines/sign-in';\nimport type { SignUpRouterEvents } from '~/internals/machines/sign-up';\nimport type { UseThirdPartyProviderReturn } from '~/react/common/providers';\nimport {\n  getEnabledThirdPartyProviders,\n  isAuthenticatableOauthStrategy,\n  providerToDisplayData,\n} from '~/utils/third-party-strategies';\n\nconst useIsProviderEnabled = (provider: OAuthProvider | Web3Provider): boolean | null => {\n  const clerk = useClerk();\n\n  // null indicates we don't know for sure\n  if (!clerk.loaded) {\n    return null;\n  }\n\n  const data = getEnabledThirdPartyProviders(clerk.__unstable__environment);\n\n  return isAuthenticatableOauthStrategy(provider, data.authenticatableOauthStrategies);\n};\n\nexport const useThirdPartyProvider = <\n  TActor extends ActorRef<any, SignInRouterEvents> | ActorRef<any, SignUpRouterEvents>,\n>(\n  ref: TActor,\n  provider: OAuthProvider | Web3Provider,\n): UseThirdPartyProviderReturn => {\n  const isProviderEnabled = useIsProviderEnabled(provider);\n  const details = providerToDisplayData[provider];\n\n  const authenticate = useCallback(\n    (event: React.MouseEvent<Element>) => {\n      if (!isProviderEnabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (provider === 'metamask') {\n        return ref.send({ type: 'AUTHENTICATE.WEB3', strategy: 'web3_metamask_signature' });\n      }\n\n      return ref.send({ type: 'AUTHENTICATE.OAUTH', strategy: `oauth_${provider}` });\n    },\n    [provider, isProviderEnabled, ref],\n  );\n\n  if (isProviderEnabled === false) {\n    console.error(\n      `Please ensure that ${provider} is enabled for your project. Go to your Clerk dashboard and navigate to \"User & Authentication\" > \"Social Connections\" to enable it.`,\n    );\n  }\n\n  return {\n    events: {\n      authenticate,\n    },\n    ...details,\n  };\n};\n","// c.f. vendor/clerk-js/src/ui/hooks/useEnabledThirdPartyProviders.tsx [Modified]\n\nimport type { EnvironmentResource, OAuthProvider, OAuthStrategy, Web3Provider, Web3Strategy } from '@clerk/types';\nimport { OAUTH_PROVIDERS, WEB3_PROVIDERS } from '@clerk/types'; // TODO: This import shouldn't be part of @clerk/types\n\nimport { fromEntries, iconImageUrl } from './clerk-js';\n\nexport interface ThirdPartyStrategy {\n  id: Web3Strategy | OAuthStrategy;\n  iconUrl: string;\n  name: string;\n}\n\nexport interface ThirdPartyProvider {\n  strategy: Web3Strategy | OAuthStrategy;\n  iconUrl: string;\n  name: string;\n}\n\ntype ThirdPartyStrategyToDataMap = {\n  [k in Web3Strategy | OAuthStrategy]: ThirdPartyStrategy;\n};\n\ntype ThirdPartyProviderToDataMap = {\n  [k in Web3Provider | OAuthProvider]: ThirdPartyProvider;\n};\n\nexport interface EnabledThirdPartyProviders {\n  authenticatableOauthStrategies: OAuthStrategy[];\n  providerToDisplayData: ThirdPartyProviderToDataMap;\n  strategies: (Web3Strategy | OAuthStrategy)[];\n  strategyToDisplayData: ThirdPartyStrategyToDataMap;\n  web3Strategies: Web3Strategy[];\n}\n\nconst oauthStrategies = OAUTH_PROVIDERS.map(p => p.strategy);\n\nexport const providerToDisplayData: ThirdPartyProviderToDataMap = fromEntries(\n  [...OAUTH_PROVIDERS, ...WEB3_PROVIDERS].map(p => {\n    return [p.provider, { iconUrl: iconImageUrl(p.provider), name: p.name, strategy: p.strategy }];\n  }),\n) as ThirdPartyProviderToDataMap;\n\nconst strategyToDisplayData: ThirdPartyStrategyToDataMap = fromEntries(\n  [...OAUTH_PROVIDERS, ...WEB3_PROVIDERS].map(p => {\n    return [p.strategy, { iconUrl: iconImageUrl(p.provider), id: p.provider, name: p.name }];\n  }),\n) as ThirdPartyStrategyToDataMap;\n\nexport function isWeb3Strategy(\n  strategy: any,\n  available: EnabledThirdPartyProviders['web3Strategies'],\n): strategy is Web3Strategy {\n  return available.includes(strategy);\n}\n\nexport function isAuthenticatableOauthStrategy(\n  strategy: any,\n  available: EnabledThirdPartyProviders['authenticatableOauthStrategies'],\n): strategy is OAuthStrategy {\n  return available.includes(strategy.startsWith('oauth_') ? strategy : `oauth_${strategy}`);\n}\n\nconst emptyThirdPartyProviders: EnabledThirdPartyProviders = {\n  authenticatableOauthStrategies: [],\n  providerToDisplayData: {} as any,\n  strategies: [],\n  strategyToDisplayData: {} as any,\n  web3Strategies: [],\n};\n\nexport const getEnabledThirdPartyProviders = (\n  environment: EnvironmentResource | undefined | null,\n): EnabledThirdPartyProviders => {\n  if (!environment?.userSettings) {\n    return emptyThirdPartyProviders;\n  }\n\n  const { socialProviderStrategies, web3FirstFactors, authenticatableSocialStrategies } = environment.userSettings;\n\n  // Filter out any OAuth strategies that are not yet known, they are not included in our types.\n  const knownSocialProviderStrategies = socialProviderStrategies.filter(s => oauthStrategies.includes(s));\n  const knownAuthenticatableSocialStrategies = authenticatableSocialStrategies.filter(s => oauthStrategies.includes(s));\n\n  return {\n    authenticatableOauthStrategies: [...knownAuthenticatableSocialStrategies],\n    providerToDisplayData: providerToDisplayData,\n    strategies: [...knownSocialProviderStrategies, ...web3FirstFactors],\n    strategyToDisplayData: strategyToDisplayData,\n    web3Strategies: web3FirstFactors,\n  };\n};\n","// Pulled from `clerk-js/src/ui/utils/fromEntries.ts\nexport const fromEntries = (iterable: Iterable<any>) => {\n  return [...iterable].reduce((obj, [key, val]) => {\n    obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Returns the URL for a static SVG image\n * using the new img.clerk.com service\n *\n * Pulled from `clerk-js/src/ui/common/constants.ts`\n */\nexport function iconImageUrl(id: string): string {\n  return `https://img.clerk.com/static/${id}.svg`;\n}\n","import type { ActorRefFrom, AnyActorRef, AnyStateMachine, SnapshotFrom } from 'xstate';\n\nimport type {\n  TSignUpContinueMachine,\n  TSignUpRouterMachine,\n  TSignUpStartMachine,\n  TSignUpVerificationMachine,\n} from '~/internals/machines/sign-up';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SnapshotState = SnapshotFrom<TSignUpRouterMachine>;\n\nexport const SignUpRouterCtx = createContextFromActorRef<TSignUpRouterMachine>('SignUpRouterCtx');\n\nfunction useSignUpStep<M extends AnyStateMachine, T = ActorRefFrom<M>>(name: string) {\n  return SignUpRouterCtx.useSelector(state => state.children[name] as AnyActorRef) as T;\n}\n\nexport const useSignUpStartStep = () => useSignUpStep<TSignUpStartMachine>('start');\nexport const useSignUpContinueStep = () => useSignUpStep<TSignUpContinueMachine>('continue');\nexport const useSignUpVerificationStep = () => useSignUpStep<TSignUpVerificationMachine>('verification');\n","import { useClerk } from '@clerk/clerk-react';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\nimport type { OAuthProvider, SamlStrategy } from '@clerk/types';\nimport * as React from 'react';\n\nimport { ClerkElementsRuntimeError } from '~/internals/errors';\nimport type { ActorSignIn, ActorSignUp } from '~/react/hooks/use-loading.hook';\nimport { useLoading } from '~/react/hooks/use-loading.hook';\nimport { SignInChooseStrategyCtx } from '~/react/sign-in/choose-strategy';\nimport { SignInRouterCtx } from '~/react/sign-in/context';\nimport { SignInStartCtx } from '~/react/sign-in/start';\nimport type { TSignInStep } from '~/react/sign-in/step';\nimport { SIGN_IN_STEPS } from '~/react/sign-in/step';\nimport { SignInFirstFactorCtx, SignInSecondFactorCtx } from '~/react/sign-in/verifications';\nimport { SignUpRouterCtx } from '~/react/sign-up/context';\nimport { SignUpContinueCtx } from '~/react/sign-up/continue';\nimport { SignUpStartCtx } from '~/react/sign-up/start';\nimport type { TSignUpStep } from '~/react/sign-up/step';\nimport { SIGN_UP_STEPS } from '~/react/sign-up/step';\nimport { SignUpVerificationCtx } from '~/react/sign-up/verifications';\nimport { mapScopeToStrategy } from '~/react/utils/map-scope-to-strategy';\n\ntype Strategy = OAuthProvider | SamlStrategy | 'metamask';\ntype LoadingScope<T extends TSignInStep | TSignUpStep> = 'global' | `step:${T}` | `provider:${Strategy}` | undefined;\n\ntype LoadingProps = {\n  scope?: LoadingScope<TSignInStep | TSignUpStep>;\n  children: (isLoading: boolean) => React.ReactNode;\n};\n\nfunction isSignInScope(scope: LoadingScope<TSignInStep | TSignUpStep>): scope is LoadingScope<TSignInStep> {\n  if (!scope) {\n    return true;\n  }\n\n  if (scope.startsWith('step:')) {\n    return Object.prototype.hasOwnProperty.call(SIGN_IN_STEPS, scope.replace('step:', ''));\n  }\n\n  return true;\n}\n\nfunction isSignUpScope(scope: LoadingScope<TSignInStep | TSignUpStep>): scope is LoadingScope<TSignUpStep> {\n  if (!scope) {\n    return true;\n  }\n\n  if (scope.startsWith('step:')) {\n    return Object.prototype.hasOwnProperty.call(SIGN_UP_STEPS, scope.replace('step:', ''));\n  }\n\n  return true;\n}\n\n/**\n * Access the loading state of a chosen scope. Scope can refer to a step, a provider, or the global loading state. The global loading state is `true` when any of the other scopes are loading.\n *\n * @param scope - Optional. Specify which loading state to access. Can be a step, a provider, or the global loading state. If `<Loading>` is used outside a `<Step>`, the scope will default to \"global\". If used inside a `<Step>` the scope will default to the current step. For external authentication providers, the scope needs to be manually defined in the format of `provider:<provider name>`\n * @param {Function} children - A function that receives `isLoading` as an argument. `isLoading` is a boolean that indicates if the current scope is loading or not.\n *\n * @example\n * <SignIn.Root>\n *   <Clerk.Loading>\n *     {(isLoading) => isLoading && \"Global loading...\"}\n *   </Clerk.Loading>\n * </SignIn.Root>\n *\n * @example\n * <SignIn.Step name=\"start\">\n *  <Clerk.Action submit>\n *    <Clerk.Loading>\n *      {(isLoading) => isLoading ? \"Start is loading...\" : \"Submit\"}\n *    </Clerk.Loading>\n *  </Clerk.Action>\n * </SignIn.Step>\n *\n * @example\n * <SignIn.Step name=\"start\">\n *   <Clerk.Loading scope=\"provider:google\">\n *     {(isLoading) => (\n *       <Clerk.Connection name=\"google\" disabled={isLoading}>\n *         {isLoading ? \"Loading...\" : \"Continue with Google\"}\n *       </Clerk.Connection>\n *     )}\n *   </Clerk.Loading>\n * </SignIn.Step>\n */\nexport function Loading({ children, scope }: LoadingProps) {\n  const clerk = useClerk();\n\n  clerk.telemetry?.record(eventComponentMounted('Elements_Loading', { scope: scope ?? false }));\n\n  const signInRouterRef = SignInRouterCtx.useActorRef(true);\n  const signUpRouterRef = SignUpRouterCtx.useActorRef(true);\n\n  // One of the two routers must be defined. Otherwise, the component is used outside of a <SignIn> or <SignUp> component.\n  // An error is thrown in this case. Depending on which router is defined, the following flow will be either for sign-in or sign-up.\n  if (!signInRouterRef && !signUpRouterRef) {\n    throw new ClerkElementsRuntimeError(`<Loading> must be used within a <SignIn> or <SignUp> component.`);\n  }\n\n  if (signInRouterRef) {\n    if (isSignInScope(scope)) {\n      return (\n        <SignInLoading\n          scope={scope}\n          routerRef={signInRouterRef}\n        >\n          {children}\n        </SignInLoading>\n      );\n    } else {\n      throw new ClerkElementsRuntimeError(`Invalid scope \"${scope}\" used for <Loading> inside <SignIn>.`);\n    }\n  }\n\n  if (signUpRouterRef) {\n    if (isSignUpScope(scope)) {\n      return (\n        <SignUpLoading\n          scope={scope}\n          routerRef={signUpRouterRef}\n        >\n          {children}\n        </SignUpLoading>\n      );\n    } else {\n      throw new ClerkElementsRuntimeError(`Invalid scope \"${scope}\" used for <Loading> inside <SignUp>.`);\n    }\n  }\n\n  throw new ClerkElementsRuntimeError('Invalid state for <Loading>. Please open an issue.');\n}\n\ntype SignInLoadingProps = {\n  scope?: LoadingScope<TSignInStep>;\n  children: (isLoading: boolean) => React.ReactNode;\n  routerRef: ActorSignIn;\n};\n\nfunction SignInLoading({ children, scope, routerRef }: SignInLoadingProps) {\n  const [isLoading, { step: loadingStep, strategy }] = useLoading(routerRef);\n\n  let computedScope: LoadingScope<TSignInStep>;\n\n  // Figure out if the component is inside a `<Step>` component\n  const startCtx = SignInStartCtx.useActorRef(true);\n  const firstFactorCtx = SignInFirstFactorCtx.useActorRef(true);\n  const secondFactorCtx = SignInSecondFactorCtx.useActorRef(true);\n  const chooseStrategyCtx = SignInChooseStrategyCtx.useDomValidation(true);\n\n  // A user can explicitly define the scope, otherwise we'll try to infer it from the surrounding context\n  if (scope) {\n    computedScope = scope;\n  } else {\n    let inferredScope: LoadingScope<TSignInStep>;\n\n    if (startCtx) {\n      inferredScope = 'step:start';\n    } else if (firstFactorCtx || secondFactorCtx) {\n      inferredScope = 'step:verifications';\n    } else if (chooseStrategyCtx) {\n      inferredScope = 'step:choose-strategy';\n    } else {\n      inferredScope = 'global';\n    }\n\n    computedScope = inferredScope;\n  }\n\n  const snapshot = routerRef.getSnapshot();\n  const isFirstFactor = snapshot.hasTag('route:first-factor');\n\n  // Determine loading states based on the step\n  const isStartLoading = isLoading && loadingStep === 'start';\n  const isVerificationsLoading = isLoading && loadingStep === 'verifications';\n  const isChooseStrategyLoading = isLoading && isFirstFactor && snapshot.hasTag('route:choose-strategy');\n  const isForgotPasswordLoading = isFirstFactor && snapshot.hasTag('route:forgot-password');\n  const isResetPasswordLoading = isFirstFactor && snapshot.hasTag('route:reset-password');\n  const isStrategyLoading = isLoading && loadingStep === undefined && strategy !== undefined;\n\n  let returnValue: boolean;\n\n  if (computedScope === 'global') {\n    returnValue = isLoading;\n  } else if (computedScope === 'step:start') {\n    returnValue = isStartLoading;\n  } else if (computedScope === 'step:verifications') {\n    returnValue = isVerificationsLoading;\n  } else if (computedScope === 'step:choose-strategy') {\n    returnValue = isChooseStrategyLoading;\n  } else if (computedScope === 'step:forgot-password') {\n    returnValue = isForgotPasswordLoading;\n  } else if (computedScope === 'step:reset-password') {\n    returnValue = isResetPasswordLoading;\n  } else if (computedScope.startsWith('provider:')) {\n    const computedStrategy = mapScopeToStrategy(computedScope);\n    returnValue = isStrategyLoading && strategy === computedStrategy;\n  } else {\n    throw new ClerkElementsRuntimeError(`Invalid scope \"${computedScope}\" used for <Loading>`);\n  }\n\n  return children(returnValue);\n}\n\ntype SignUpLoadingProps = {\n  scope?: LoadingScope<TSignUpStep>;\n  children: (isLoading: boolean) => React.ReactNode;\n  routerRef: ActorSignUp;\n};\n\nfunction SignUpLoading({ children, scope, routerRef }: SignUpLoadingProps) {\n  const [isLoading, { step: loadingStep, strategy }] = useLoading(routerRef);\n\n  let computedScope: LoadingScope<TSignUpStep>;\n\n  // Figure out if the component is inside a `<Step>` component\n  const startCtx = SignUpStartCtx.useActorRef(true);\n  const continueCtx = SignUpContinueCtx.useActorRef(true);\n  const verificationsCtx = SignUpVerificationCtx.useActorRef(true);\n\n  if (scope) {\n    computedScope = scope;\n  } else {\n    let inferredScope: LoadingScope<TSignUpStep>;\n\n    if (startCtx) {\n      inferredScope = `step:start`;\n    } else if (continueCtx) {\n      inferredScope = `step:continue`;\n    } else if (verificationsCtx) {\n      inferredScope = `step:verifications`;\n    } else {\n      inferredScope = `global`;\n    }\n\n    computedScope = inferredScope;\n  }\n\n  // Determine loading states based on the step\n  const isStartLoading = isLoading && loadingStep === 'start';\n  const isVerificationsLoading = isLoading && loadingStep === 'verifications';\n  const isContinueLoading = isLoading && loadingStep === 'continue';\n  const isStrategyLoading = isLoading && loadingStep === undefined && strategy !== undefined;\n\n  let returnValue: boolean;\n\n  if (computedScope === 'global') {\n    returnValue = isLoading;\n  } else if (computedScope === 'step:start') {\n    returnValue = isStartLoading;\n  } else if (computedScope === 'step:verifications') {\n    returnValue = isVerificationsLoading;\n  } else if (computedScope === 'step:continue') {\n    returnValue = isContinueLoading;\n  } else if (computedScope.startsWith('provider:')) {\n    const computedStrategy = mapScopeToStrategy(computedScope);\n    returnValue = isStrategyLoading && strategy === computedStrategy;\n  } else {\n    throw new ClerkElementsRuntimeError(`Invalid scope \"${computedScope}\" used for <Loading>`);\n  }\n\n  return children(returnValue);\n}\n","import { useSelector } from '@xstate/react';\nimport type { ActorRefFrom, SnapshotFrom } from 'xstate';\n\nimport type { SignInRouterLoadingContext, TSignInRouterMachine } from '~/internals/machines/sign-in';\nimport type { SignUpRouterLoadingContext, TSignUpRouterMachine } from '~/internals/machines/sign-up';\n\nexport type ActorSignIn = ActorRefFrom<TSignInRouterMachine>;\nexport type ActorSignUp = ActorRefFrom<TSignUpRouterMachine>;\n\ntype LoadingContext<T> = T extends ActorSignIn ? SignInRouterLoadingContext : SignUpRouterLoadingContext;\ntype UseLoadingReturn<T> = [\n  isLoading: boolean,\n  { step: LoadingContext<T>['step']; strategy: LoadingContext<T>['strategy'] },\n];\n\nconst selectLoading = <T extends SnapshotFrom<TSignInRouterMachine> | SnapshotFrom<TSignUpRouterMachine>>(\n  snapshot: T,\n) => snapshot?.context?.loading;\nconst compareLoadingValue = <T extends SignInRouterLoadingContext | SignUpRouterLoadingContext>(prev: T, next: T) =>\n  prev?.isLoading === next?.isLoading;\n\n/**\n * Generic hook to check the loading state inside the context of a machine. Should only be used with `SignInRouterCtx` or `SignUpRouterCtx`.\n *\n * @param actor - The actor reference of the machine\n *\n * @example\n * const ref = SignInRouterCtx.useActorRef();\n *\n * useLoading(ref);\n */\nexport function useLoading<TActor extends ActorSignIn | ActorSignUp>(actor: TActor): UseLoadingReturn<TActor> {\n  const loadingCtx = useSelector(actor, selectLoading, compareLoadingValue) as LoadingContext<TActor>;\n\n  if (!loadingCtx) {\n    return [false, { step: undefined, strategy: undefined }];\n  }\n\n  return [loadingCtx.isLoading, { step: loadingCtx.step, strategy: loadingCtx.strategy }];\n}\n","import type { SignInFactor, SignInFirstFactor, SignInStrategy as TSignInStrategy } from '@clerk/types';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useSelector } from '@xstate/react';\nimport * as React from 'react';\nimport type { ActorRefFrom } from 'xstate';\n\nimport type { TSignInFirstFactorMachine } from '~/internals/machines/sign-in';\nimport { SignInRouterSystemId } from '~/internals/machines/sign-in';\n\nimport { useActiveTags } from '../hooks';\nimport { ActiveTagsMode } from '../hooks/use-active-tags.hook';\nimport { createContextForDomValidation } from '../utils/create-context-for-dom-validation';\nimport { SignInRouterCtx } from './context';\n\n// --------------------------------- HELPERS ---------------------------------\n\nconst localStrategies: Set<TSignInStrategy> = new Set(['email_code', 'password', 'phone_code', 'email_link']);\nconst resetPasswordStrategies: Set<TSignInStrategy> = new Set([\n  'reset_password_phone_code',\n  'reset_password_email_code',\n]);\n\nexport function isResetPasswordStrategy(strategy: TSignInStrategy | null | undefined): boolean {\n  if (!strategy) {\n    return false;\n  }\n  return resetPasswordStrategies.has(strategy as TSignInStrategy);\n}\n\nexport function factorHasLocalStrategy(factor: SignInFactor | undefined | null): boolean {\n  if (!factor) {\n    return false;\n  }\n  return localStrategies.has(factor.strategy);\n}\n\n// --------------------------------- COMPONENTS ---------------------------------\n\nexport type SignInChooseStrategyProps = React.HTMLAttributes<HTMLDivElement>;\nexport type SignInForgotPasswordProps = React.HTMLAttributes<HTMLDivElement>;\n\nexport const SignInChooseStrategyCtx = createContextForDomValidation('SignInChooseStrategyCtx');\n\nexport function SignInChooseStrategy({ children, ...props }: SignInChooseStrategyProps) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, ['route:first-factor', 'route:choose-strategy'], ActiveTagsMode.all);\n\n  return activeState ? (\n    <SignInChooseStrategyCtx.Provider>\n      <div {...props}>{children}</div>\n    </SignInChooseStrategyCtx.Provider>\n  ) : null;\n}\n\nexport function SignInForgotPassword({ children, ...props }: SignInForgotPasswordProps) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, ['route:first-factor', 'route:forgot-password'], ActiveTagsMode.all);\n\n  return activeState ? (\n    <SignInChooseStrategyCtx.Provider>\n      <div {...props}>{children}</div>\n    </SignInChooseStrategyCtx.Provider>\n  ) : null;\n}\n\nconst SUPPORTED_STRATEGY_NAME = 'SignInSupportedStrategy';\n\nexport type SignInSupportedStrategyElement = React.ElementRef<'button'>;\nexport type SignInSupportedStrategyProps = {\n  asChild?: boolean;\n  name: Exclude<SignInFirstFactor['strategy'], `oauth_${string}` | 'saml'>;\n  children: React.ReactNode;\n};\n\n/**\n * By default, renders a button which will trigger a change in the chosen sign-in strategy. It **must** be used within a `<Step name='choose-strategy'>` component.\n *\n * @description This component will only render its contents if the chosen strategy is enabled (in the Clerk dashboard) and if it's not the current strategy.\n *\n * @param name - Define a strategy to be used.\n * @param {boolean} [asChild] - When `true`, the component will render its child and passes all props to it.\n *\n * @example\n * <SignIn.Step name='choose-strategy'>\n *   <SignIn.SupportedStrategy name='password'>\n *     Sign in with password\n *   </SignIn.SupportedStrategy>\n * </SignIn.Step>\n */\nexport const SignInSupportedStrategy = React.forwardRef<SignInSupportedStrategyElement, SignInSupportedStrategyProps>(\n  ({ asChild, children, name, ...rest }, forwardedRef) => {\n    const routerRef = SignInRouterCtx.useActorRef();\n    const snapshot = routerRef.getSnapshot();\n\n    const supportedFirstFactors = snapshot.context.clerk.client.signIn.supportedFirstFactors;\n    const factor = supportedFirstFactors.find(factor => name === factor.strategy);\n\n    const currentFirstFactor = useSelector(\n      snapshot.children[SignInRouterSystemId.firstFactor] as unknown as ActorRefFrom<TSignInFirstFactorMachine>,\n      state => state?.context.currentFactor?.strategy,\n    );\n\n    const sendUpdateStrategyEvent = React.useCallback(\n      () => routerRef.send({ type: 'STRATEGY.UPDATE', factor }),\n      [routerRef, factor],\n    );\n\n    // Don't render if the current factor is the same as the one we're trying to render\n    if (currentFirstFactor === name) {\n      return null;\n    }\n\n    const Comp = asChild ? Slot : 'button';\n    const defaultProps = asChild ? {} : { type: 'button' as const };\n\n    return factor ? (\n      <Comp\n        {...defaultProps}\n        {...rest}\n        ref={forwardedRef}\n        onClick={sendUpdateStrategyEvent}\n      >\n        {children || factor.strategy}\n      </Comp>\n    ) : null;\n  },\n);\n\nSignInSupportedStrategy.displayName = SUPPORTED_STRATEGY_NAME;\n","import type { SignInResource } from '@clerk/types';\nimport type { ActorRefFrom, MachineSnapshot, StateMachine } from 'xstate';\n\nimport type { TFormMachine } from '~/internals/machines/form';\nimport type {\n  BaseRouterContext,\n  BaseRouterErrorEvent,\n  BaseRouterFormAttachEvent,\n  BaseRouterInput,\n  BaseRouterLoadingEvent,\n  BaseRouterNextEvent,\n  BaseRouterPrevEvent,\n  BaseRouterRedirectEvent,\n  BaseRouterResetEvent,\n  BaseRouterResetStepEvent,\n  BaseRouterSetClerkEvent,\n  BaseRouterStartEvent,\n  BaseRouterTransferEvent,\n} from '~/internals/machines/types';\n\nimport type { SignInVerificationFactorUpdateEvent } from './verification.types';\n\n// ---------------------------------- Tags ---------------------------------- //\n\nexport const SignInRouterRoutes = {\n  start: 'route:start',\n  firstFactor: 'route:first-factor',\n  secondFactor: 'route:second-factor',\n  callback: 'route:callback',\n  error: 'route:error',\n  forgotPassword: 'route:forgot-password',\n  resetPassword: 'route:reset-password',\n  chooseStrategy: 'route:choose-strategy',\n} as const;\n\nexport type SignInRouterRoutes = keyof typeof SignInRouterRoutes;\nexport type SignInRouterTags = (typeof SignInRouterRoutes)[keyof typeof SignInRouterRoutes];\n\n// ---------------------------------- Children ---------------------------------- //\n\nexport const SignInRouterSystemId = {\n  start: 'start',\n  firstFactor: 'firstFactor',\n  secondFactor: 'secondFactor',\n  resetPassword: 'resetPassword',\n} as const;\n\nexport type SignInRouterSystemId = keyof typeof SignInRouterSystemId;\n\n// ---------------------------------- Events ---------------------------------- //\n\nexport type SignInRouterFormAttachEvent = BaseRouterFormAttachEvent;\nexport type SignInRouterNextEvent = BaseRouterNextEvent<SignInResource>;\nexport type SignInRouterStartEvent = BaseRouterStartEvent;\nexport type SignInRouterPrevEvent = BaseRouterPrevEvent;\nexport type SignInRouterChooseStrategyEvent = { type: 'NAVIGATE.CHOOSE_STRATEGY' };\nexport type SignInRouterForgotPasswordEvent = { type: 'NAVIGATE.FORGOT_PASSWORD' };\nexport type SignInRouterErrorEvent = BaseRouterErrorEvent;\nexport type SignInRouterTransferEvent = BaseRouterTransferEvent;\nexport type SignInRouterRedirectEvent = BaseRouterRedirectEvent;\nexport type SignInRouterResetEvent = BaseRouterResetEvent;\nexport type SignInRouterResetStepEvent = BaseRouterResetStepEvent;\nexport type SignInRouterLoadingEvent = BaseRouterLoadingEvent<'start' | 'verifications' | 'reset-password'>;\nexport type SignInRouterSetClerkEvent = BaseRouterSetClerkEvent;\nexport type SignInRouterSubmitEvent = { type: 'SUBMIT' };\nexport type SignInRouterPasskeyEvent = { type: 'AUTHENTICATE.PASSKEY' };\nexport type SignInRouterPasskeyAutofillEvent = {\n  type: 'AUTHENTICATE.PASSKEY.AUTOFILL';\n};\n\nexport interface SignInRouterInitEvent extends BaseRouterInput {\n  type: 'INIT';\n  formRef: ActorRefFrom<TFormMachine>;\n  signUpPath?: string;\n}\n\nexport type SignInRouterNavigationEvents =\n  | SignInRouterStartEvent\n  | SignInRouterChooseStrategyEvent\n  | SignInRouterForgotPasswordEvent\n  | SignInRouterPrevEvent;\n\nexport type SignInRouterEvents =\n  | SignInRouterFormAttachEvent\n  | SignInRouterInitEvent\n  | SignInRouterNextEvent\n  | SignInRouterNavigationEvents\n  | SignInRouterErrorEvent\n  | SignInRouterTransferEvent\n  | SignInRouterRedirectEvent\n  | SignInRouterResetEvent\n  | SignInRouterResetStepEvent\n  | SignInVerificationFactorUpdateEvent\n  | SignInRouterLoadingEvent\n  | SignInRouterSetClerkEvent\n  | SignInRouterSubmitEvent\n  | SignInRouterPasskeyEvent\n  | SignInRouterPasskeyAutofillEvent;\n\n// ---------------------------------- Context ---------------------------------- //\n\nexport type SignInRouterLoadingContext = Omit<SignInRouterLoadingEvent, 'type'>;\n\nexport interface SignInRouterContext extends BaseRouterContext {\n  formRef: ActorRefFrom<TFormMachine>;\n  loading: SignInRouterLoadingContext;\n  signUpPath: string;\n  webAuthnAutofillSupport: boolean;\n}\n\n// ---------------------------------- Input ---------------------------------- //\n\nexport interface SignInRouterInput {\n  // NOTE: Set in INIT event\n}\n\n// ---------------------------------- Schema ---------------------------------- //\n\nexport interface SignInRouterSchema {\n  context: SignInRouterContext;\n  events: SignInRouterEvents;\n  tags: SignInRouterTags;\n}\n\n// ---------------------------------- Schema ---------------------------------- //\n\nexport type SignInRouterChildren = any; // TODO: Update\nexport type SignInRouterOuptut = any; // TODO: Update\nexport type SignInRouterStateValue = any; // TODO: Update\n\nexport type SignInRouterSnapshot = MachineSnapshot<\n  SignInRouterContext,\n  SignInRouterEvents,\n  SignInRouterChildren,\n  SignInRouterStateValue,\n  SignInRouterTags,\n  SignInRouterOuptut,\n  any // TMeta - Introduced in XState 5.12.x\n>;\n\n// ---------------------------------- Machine Type ---------------------------------- //\n\nexport type TSignInRouterParentMachine = StateMachine<\n  SignInRouterContext, // context\n  SignInRouterEvents, // event\n  SignInRouterChildren, // children\n  any, // actor\n  any, // action\n  any, // guard\n  any, // delay\n  any, // state value\n  string, // tag\n  any, // input\n  SignInRouterOuptut, // output\n  any, // emitted\n  any // meta\n>;\n\n// ---------------------------------- Machine Actor Ref ---------------------------------- //\n\nexport type SignInRouterMachineActorRef = ActorRefFrom<TSignInRouterParentMachine>;\n","import * as React from 'react';\n\n/**\n * Use this context helper to detect whether a component has a particular parent higher up in the DOM or not.\n */\nexport function createContextForDomValidation(displayName: string) {\n  const ReactContext = React.createContext(false);\n  const OriginalProvider = ReactContext.Provider;\n\n  function Provider({ children }: { children: React.ReactNode }) {\n    return React.createElement(\n      OriginalProvider,\n      {\n        value: true,\n      },\n      children,\n    );\n  }\n\n  Provider.displayName = displayName;\n\n  function useContext(allowMissingContext: boolean = false) {\n    const context = React.useContext(ReactContext);\n\n    if (!allowMissingContext && !context) {\n      throw new Error(\n        `You used a hook from \"${Provider.displayName}\" but it's not inside a <${Provider.displayName}.Provider> component.`,\n      );\n    }\n\n    return context;\n  }\n\n  return {\n    Provider,\n    useDomValidation: useContext,\n  };\n}\n","import type { TSignInStartMachine } from '~/internals/machines/sign-in';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignInRouterCtx, useSignInStartStep } from '~/react/sign-in/context';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SignInStartProps = FormProps;\n\nexport const SignInStartCtx = createContextFromActorRef<TSignInStartMachine>('SignInStartCtx');\n\nexport function SignInStart(props: SignInStartProps) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:start');\n\n  return activeState ? <SignInStartInner {...props} /> : null;\n}\n\nfunction SignInStartInner(props: SignInStartProps) {\n  const ref = useSignInStartStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignInStartCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignInStartCtx.Provider>\n  );\n}\n","import { useClerk } from '@clerk/clerk-react';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\n\nimport { ClerkElementsRuntimeError } from '~/internals/errors';\n\nimport type { SignInChooseStrategyProps } from './choose-strategy';\nimport { SignInChooseStrategy, SignInForgotPassword } from './choose-strategy';\nimport type { SignInResetPasswordProps } from './reset-password';\nimport { SignInResetPassword } from './reset-password';\nimport type { SignInStartProps } from './start';\nimport { SignInStart } from './start';\nimport type { SignInVerificationsProps } from './verifications';\nimport { SignInVerifications } from './verifications';\n\nexport const SIGN_IN_STEPS = {\n  start: 'start',\n  verifications: 'verifications',\n  'choose-strategy': 'choose-strategy',\n  'forgot-password': 'forgot-password',\n  'reset-password': 'reset-password',\n} as const;\n\nexport type TSignInStep = (typeof SIGN_IN_STEPS)[keyof typeof SIGN_IN_STEPS];\ntype StepWithProps<N extends TSignInStep, T> = { name: N } & T;\n\nexport type SignInStepProps =\n  | StepWithProps<'start', SignInStartProps>\n  | StepWithProps<'verifications', SignInVerificationsProps>\n  | StepWithProps<'choose-strategy' | 'forgot-password', SignInChooseStrategyProps>\n  | StepWithProps<'reset-password', SignInResetPasswordProps>;\n\n/**\n * Render different steps of the sign-in flow. Initially the `'start'` step is rendered. Once a sign-in attempt has been created, `'verifications'` will be displayed. If during that verification step the user decides to choose a different method of signing in or verifying, the `'choose-strategy'` step will be displayed.\n *\n * You typically want to place fields like username, password, or social providers in the `'start'` step. The `'verifications'` step is used to verify the user's credentials like password or MFA. Once the user has been verified, the sign-in attempt will be completed.\n *\n * @param {string} name - Step name. Use `'start'`, `'verifications'`, `'choose-strategy'`, `'reset-password'`, or `'forgot-password'`.\n *\n * @example\n * <SignIn.Root>\n *  <SignIn.Step name='start' />\n *  <SignIn.Step name='verifications' />\n *  <SignIn.Step name='choose-strategy' />\n *  <SignIn.Step name='forgot-password' />\n *  <SignIn.Step name='reset-password' />\n * </SignIn.Root>\n */\nexport function SignInStep(props: SignInStepProps) {\n  const clerk = useClerk();\n\n  clerk.telemetry?.record(eventComponentMounted('Elements_SignInStep', { name: props.name }));\n\n  switch (props.name) {\n    case SIGN_IN_STEPS['start']:\n      return <SignInStart {...props} />;\n    case SIGN_IN_STEPS['verifications']:\n      return <SignInVerifications {...props} />;\n    case SIGN_IN_STEPS['choose-strategy']:\n      return <SignInChooseStrategy {...props} />;\n    case SIGN_IN_STEPS['forgot-password']:\n      return <SignInForgotPassword {...props} />;\n    case SIGN_IN_STEPS['reset-password']:\n      return <SignInResetPassword {...props} />;\n    default:\n      throw new ClerkElementsRuntimeError(`Invalid step name. Use: ${Object.keys(SIGN_IN_STEPS).join(',')}.`);\n  }\n}\n","import type { SignInFactor, SignInStrategy as ClerkSignInStrategy } from '@clerk/types';\nimport { useSelector } from '@xstate/react';\nimport { useCallback, useEffect } from 'react';\nimport type { ActorRefFrom, SnapshotFrom } from 'xstate';\n\nimport type { SignInStrategyName } from '~/internals/machines/shared';\nimport type { TSignInFirstFactorMachine, TSignInSecondFactorMachine } from '~/internals/machines/sign-in';\nimport { matchStrategy } from '~/internals/machines/utils/strategies';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport {\n  SignInRouterCtx,\n  StrategiesContext,\n  useSignInFirstFactorStep,\n  useSignInSecondFactorStep,\n  useStrategy,\n} from '~/react/sign-in/context';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SignInVerificationsProps = { preferred?: ClerkSignInStrategy } & FormProps;\n\nexport const SignInFirstFactorCtx = createContextFromActorRef<TSignInFirstFactorMachine>('SignInFirstFactorCtx');\nexport const SignInSecondFactorCtx = createContextFromActorRef<TSignInSecondFactorMachine>('SignInSecondFactorCtx');\n\nconst strategiesSelector = (state: SnapshotFrom<TSignInFirstFactorMachine | TSignInSecondFactorMachine>) =>\n  state.context.currentFactor?.strategy;\n\nfunction SignInStrategiesProvider({\n  children,\n  preferred,\n  actorRef,\n  ...props\n}: SignInVerificationsProps & { actorRef: ActorRefFrom<TSignInFirstFactorMachine | TSignInSecondFactorMachine> }) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const current = useSelector(actorRef, strategiesSelector);\n  const isChoosingAltStrategy = useActiveTags(routerRef, ['route:choose-strategy', 'route:forgot-password']);\n  const isActive = useCallback((name: string) => (current ? matchStrategy(current, name) : false), [current]);\n\n  return (\n    <StrategiesContext.Provider value={{ current: current, preferred, isActive }}>\n      {isChoosingAltStrategy.active ? null : (\n        <Form\n          flowActor={actorRef}\n          {...props}\n        >\n          {children}\n        </Form>\n      )}\n    </StrategiesContext.Provider>\n  );\n}\n\nexport type SignInStrategyProps = { name: SignInStrategyName; children: React.ReactNode };\n\nfunction useFactorCtx() {\n  const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);\n  const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);\n\n  return firstFactorRef || secondFactorRef;\n}\n\n/**\n * Generic component to handle both first and second factor verifications.\n *\n * @param {string} name - The name of the strategy for which its children will be rendered.\n *\n * @example\n * <SignIn.Step name=\"verifications\">\n *   <SignIn.Strategy name=\"password\">...</SignIn.Strategy>\n * </SignIn.Step>\n */\nexport function SignInStrategy({ children, name }: SignInStrategyProps) {\n  const { active } = useStrategy(name);\n  const factorCtx = useFactorCtx();\n\n  useEffect(() => {\n    if (factorCtx) {\n      factorCtx.send({ type: 'STRATEGY.REGISTER', factor: name as unknown as SignInFactor });\n    }\n\n    return () => {\n      if (factorCtx?.getSnapshot().status === 'active') {\n        factorCtx.send({ type: 'STRATEGY.UNREGISTER', factor: name as unknown as SignInFactor });\n      }\n    };\n  }, [factorCtx, name]);\n\n  return active ? <>{children}</> : null;\n}\n\n/**\n * Generic component to handle both first and second factor verifications.\n *\n * @example\n * <Step name=\"verifications\">...</Step>\n */\nexport function SignInVerifications(props: SignInVerificationsProps) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const { activeTags: activeRoutes } = useActiveTags(routerRef, ['route:first-factor', 'route:second-factor']);\n\n  if (activeRoutes.has('route:first-factor')) {\n    return <SignInFirstFactorInner {...props} />;\n  }\n\n  if (activeRoutes.has('route:second-factor')) {\n    return <SignInSecondFactorInner {...props} />;\n  }\n\n  return null;\n}\n\n/**\n * Component to handle specifically first factor verifications.\n * Generally, you should use the <SignInVerifications> component instead via <Step name=\"verifications\">.\n *\n * @example\n * <FirstFactor>...</FirstFactor>\n */\nexport function SignInFirstFactor(props: SignInVerificationsProps) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:first-factor');\n\n  return activeState ? <SignInFirstFactorInner {...props} /> : null;\n}\n\n/**\n * Component to handle specifically second factor verifications.\n * Generally, you should use the <SignInVerifications> component instead via <Step name=\"verifications\">.\n *\n * @example\n * <SecondFactor>...</SecondFactor>\n */\nexport function SignInSecondFactor(props: SignInVerificationsProps) {\n  const routerRef = SignInRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:second-factor');\n\n  return activeState ? <SignInSecondFactorInner {...props} /> : null;\n}\n\nexport function SignInFirstFactorInner(props: SignInVerificationsProps) {\n  const ref = useSignInFirstFactorStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return ref ? (\n    <SignInFirstFactorCtx.Provider actorRef={ref}>\n      <SignInStrategiesProvider\n        actorRef={ref}\n        {...props}\n      />\n    </SignInFirstFactorCtx.Provider>\n  ) : null;\n}\n\nexport function SignInSecondFactorInner(props: SignInVerificationsProps) {\n  const ref = useSignInSecondFactorStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return ref ? (\n    <SignInSecondFactorCtx.Provider actorRef={ref}>\n      <SignInStrategiesProvider\n        actorRef={ref}\n        {...props}\n      />\n    </SignInSecondFactorCtx.Provider>\n  ) : null;\n}\n\nexport type SignInVerificationResendableRenderProps = {\n  resendable: boolean;\n  resendableAfter: number;\n};\n\nexport type SignInVerificationResendableProps = {\n  children: (props: SignInVerificationResendableRenderProps) => React.ReactNode;\n};\n","import type { TSignUpContinueMachine } from '~/internals/machines/sign-up';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignUpRouterCtx, useSignUpContinueStep } from '~/react/sign-up/context';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SignUpContinueProps = FormProps;\n\nexport const SignUpContinueCtx = createContextFromActorRef<TSignUpContinueMachine>('SignUpContinueCtx');\n\nexport function SignUpContinue(props: SignUpContinueProps) {\n  const routerRef = SignUpRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:continue');\n\n  return activeState ? <SignUpContinueInner {...props} /> : null;\n}\n\nfunction SignUpContinueInner(props: SignUpContinueProps) {\n  const ref = useSignUpContinueStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignUpContinueCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignUpContinueCtx.Provider>\n  );\n}\n","import type { TSignUpStartMachine } from '~/internals/machines/sign-up';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignUpRouterCtx, useSignUpStartStep } from '~/react/sign-up/context';\nimport { createContextFromActorRef } from '~/react/utils/create-context-from-actor-ref';\n\nexport type SignUpStartProps = FormProps;\n\nexport const SignUpStartCtx = createContextFromActorRef<TSignUpStartMachine>('SignUpStartCtx');\n\nexport function SignUpStart(props: SignUpStartProps) {\n  const routerRef = SignUpRouterCtx.useActorRef();\n  const activeState = useActiveTags(routerRef, 'route:start');\n\n  return activeState ? <SignUpStartInner {...props} /> : null;\n}\n\nfunction SignUpStartInner(props: SignUpStartProps) {\n  const ref = useSignUpStartStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignUpStartCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignUpStartCtx.Provider>\n  );\n}\n","import { useClerk } from '@clerk/clerk-react';\nimport { eventComponentMounted } from '@clerk/shared/telemetry';\n\nimport { ClerkElementsRuntimeError } from '~/internals/errors';\n\nimport type { SignUpContinueProps } from './continue';\nimport { SignUpContinue } from './continue';\nimport type { SignUpStartProps } from './start';\nimport { SignUpStart } from './start';\nimport type { SignUpVerificationsProps } from './verifications';\nimport { SignUpVerifications } from './verifications';\n\nexport const SIGN_UP_STEPS = {\n  start: 'start',\n  continue: 'continue',\n  verifications: 'verifications',\n} as const;\n\nexport type TSignUpStep = (typeof SIGN_UP_STEPS)[keyof typeof SIGN_UP_STEPS];\ntype StepWithProps<N extends TSignUpStep, T> = { name: N } & T;\n\nexport type SignUpStepProps =\n  | StepWithProps<'start', SignUpStartProps>\n  | StepWithProps<'continue', SignUpContinueProps>\n  | StepWithProps<'verifications', SignUpVerificationsProps>;\n\n/**\n * Render different steps of the sign-up flow. Initially the `'start'` step is rendered. Optionally, you can render additional fields in the `'continue'` step. Once a sign-up attempt has been created, `'verifications'` will be displayed.\n *\n * You typically want to place fields like username, password, or social providers in the `'start'` step. The `'continue'` step can hold inputs for username, first name/last name or other metadata. The `'verifications'` step is used to verify the user's information like an email verification. Once the user has been verified, the sign-up attempt will be completed.\n *\n * @param {string} name - Step name. Use `'start'`, `'continue'`, or `'verifications'`.\n *\n * @example\n * <SignUp.Root>\n *  <SignUp.Step name='start' />\n *  <SignUp.Step name='continue' />\n *  <SignUp.Step name='verifications' />\n * </SignUp.Root>\n */\nexport function SignUpStep(props: SignUpStepProps) {\n  const clerk = useClerk();\n\n  clerk.telemetry?.record(eventComponentMounted('Elements_SignUpStep', { name: props.name }));\n\n  switch (props.name) {\n    case SIGN_UP_STEPS.start:\n      return <SignUpStart {...props} />;\n    case SIGN_UP_STEPS.continue:\n      return <SignUpContinue {...props} />;\n    case SIGN_UP_STEPS.verifications:\n      return <SignUpVerifications {...props} />;\n    default:\n      throw new ClerkElementsRuntimeError(`Invalid step name. Use 'start', 'continue', or 'verifications'.`);\n  }\n}\n","import type {\n  SignUpVerificationFriendlyTags,\n  SignUpVerificationTags,\n  TSignUpVerificationMachine,\n} from '~/internals/machines/sign-up';\nimport type { FormProps } from '~/react/common/form';\nimport { Form } from '~/react/common/form';\nimport { useActiveTags } from '~/react/hooks';\nimport { SignUpRouterCtx, useSignUpVerificationStep } from '~/react/sign-up/context';\n\nimport { createContextFromActorRef } from '../utils/create-context-from-actor-ref';\n\nexport type SignUpVerificationsProps = FormProps;\n\nexport const SignUpVerificationCtx = createContextFromActorRef<TSignUpVerificationMachine>('SignUpVerificationCtx');\n\n/**\n * Renders its children when the user is in the verification step of the sign-up flow. This happens after the user has signed up but before their account is active & verified.\n * @example\n * import { SignUp, Step, Strategy } from \"@clerk/elements/sign-up\"\n *\n * export default SignUpPage = () => (\n *  <SignUp>\n *    <Step name=\"verifications\">\n *      <Strategy name=\"email_link\">\n *        Please check your email for a verification link.\n *      </Strategy>\n *    </Step>\n *  </SignUp>\n * )\n */\nexport function SignUpVerifications(props: SignUpVerificationsProps) {\n  const ref = SignUpRouterCtx.useActorRef();\n  const activeState = useActiveTags(ref, 'route:verification');\n\n  return activeState ? <SignUpVerifyInner {...props} /> : null;\n}\n\nfunction SignUpVerifyInner(props: SignUpVerificationsProps) {\n  const ref = useSignUpVerificationStep();\n\n  if (!ref) {\n    return null;\n  }\n\n  return (\n    <SignUpVerificationCtx.Provider actorRef={ref}>\n      <Form\n        flowActor={ref}\n        {...props}\n      />\n    </SignUpVerificationCtx.Provider>\n  );\n}\n\nexport type SignUpStrategyProps = { name: SignUpVerificationFriendlyTags; children: React.ReactNode };\n\n/**\n * Conditionally render its children depending on the authentication strategy that needs to be verified. Does not render any markup on its own.\n *\n * @param {string} name - The name of the strategy for which its children will be rendered.\n *\n * @example\n * <SignUp.Strategy name=\"email_code\">\n *  <Clerk.Field name=\"code\">\n *    <Clerk.Label>Code</Clerk.Label>\n *    <Clerk.Input />\n *    <Clerk.FieldError />\n *  </Clerk.Field>\n *  <SignUp.Action submit>Verify</SignUp.Action>\n * </SignUp.Strategy>\n */\nexport function SignUpStrategy({ children, name: tag }: SignUpStrategyProps) {\n  const ref = SignUpVerificationCtx.useActorRef(true);\n\n  if (!ref) {\n    throw new Error(\n      '<Strategy> used outside of <SignUp>. Did you mean to `import { Strategy } from \"@clerk/elements/sign-in\"` instead?',\n    );\n  }\n\n  const { active } = useActiveTags(ref, [\n    `verification:${tag}`,\n    `verification:category:${tag}`,\n  ] as unknown as SignUpVerificationTags[]);\n\n  return active ? <>{children}</> : null;\n}\n","import type { OAuthProvider, SamlStrategy, SignInStrategy } from '@clerk/types';\n\ntype Strategy = OAuthProvider | SamlStrategy | 'metamask';\n\nexport function mapScopeToStrategy<T extends `provider:${Strategy}`>(scope: T): SignInStrategy {\n  if (scope === 'provider:metamask') {\n    return 'web3_metamask_signature';\n  }\n\n  if (scope === 'provider:saml') {\n    return 'saml';\n  }\n\n  const scopeWithoutPrefix = scope.replace('provider:', '') as OAuthProvider;\n\n  return `oauth_${scopeWithoutPrefix}`;\n}\n"],"mappings":"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","names":["import_clerk_react","composeEventHandlers","originalEventHandler","ourEventHandler","checkForDefaultPrevented","handleEvent","event","defaultPrevented","import_react_form","React","_a","import_react","React","useContext","useSelector","useSelectorUnbound","React","React","OTPInput","RadixControl","import_jsx_runtime","RadixControl","RadixForm","RadixField","RadixLabel","RadixSubmit","RadixFormMessage","import_react_slot","import_react","import_clerk_react","import_react","import_types","import_jsx_runtime","import_clerk_react","import_telemetry","import_react","import_react_slot","import_react","React","React","useContext","import_jsx_runtime","factor","import_jsx_runtime","import_clerk_react","import_telemetry","import_react","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime","import_clerk_react","import_telemetry","import_jsx_runtime","import_jsx_runtime","import_jsx_runtime"]}