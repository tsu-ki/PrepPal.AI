import {
  Router,
  useClerkRouter,
  useNextRouter,
  usePathnameWithoutCatchAll,
  useVirtualRouter
} from "../../chunk-UDCFBJQW.mjs";
import {
  Form,
  FormStoreProvider,
  ROUTING,
  SIGN_IN_DEFAULT_BASE_PATH,
  SIGN_UP_DEFAULT_BASE_PATH,
  SignInFirstFactor,
  SignInFirstFactorCtx,
  SignInRouterCtx,
  SignInRouterMachine,
  SignInSafeIdentifierSelector,
  SignInSalutationSelector,
  SignInSecondFactor,
  SignInSecondFactorCtx,
  SignInStep,
  SignInStrategy,
  SignInSupportedStrategy,
  Submit,
  inspect,
  useFormStore
} from "../../chunk-FU4AFZWL.mjs";

// src/react/sign-in/index.ts
import "client-only";

// src/react/sign-in/root.tsx
import { ClerkLoaded, ClerkLoading, useClerk } from "@clerk/clerk-react";
import { eventComponentMounted } from "@clerk/shared/telemetry";
import { useEffect } from "react";
import { createActor } from "xstate";
import { jsx, jsxs } from "react/jsx-runtime";
var actor = createActor(SignInRouterMachine, { inspect });
actor.start();
function SignInFlowProvider({ children, exampleMode }) {
  const clerk = useClerk();
  const router = useClerkRouter();
  const formRef = useFormStore();
  useEffect(() => {
    if (!clerk || !router) {
      return;
    }
    clerk.addOnLoaded(() => {
      const evt = {
        type: "INIT",
        clerk,
        exampleMode,
        formRef,
        router,
        signUpPath: SIGN_UP_DEFAULT_BASE_PATH
      };
      if (actor.getSnapshot().can(evt)) {
        actor.send(evt);
      }
    });
    if (formRef && actor.getSnapshot().can({ type: "RESET.STEP" })) {
      actor.send({
        type: "FORM.ATTACH",
        formRef
      });
    }
  }, [clerk, exampleMode, formRef == null ? void 0 : formRef.id, !!router]);
  return /* @__PURE__ */ jsx(SignInRouterCtx.Provider, { actorRef: actor, children });
}
function SignInRoot({
  children,
  exampleMode = false,
  fallback = null,
  path: pathProp,
  routing = ROUTING.path
}) {
  var _a;
  const clerk = useClerk();
  const inferredPath = usePathnameWithoutCatchAll();
  const path = pathProp || inferredPath || SIGN_IN_DEFAULT_BASE_PATH;
  (_a = clerk.telemetry) == null ? void 0 : _a.record(
    eventComponentMounted("Elements_SignInRoot", {
      exampleMode,
      fallback: Boolean(fallback),
      path,
      routing
    })
  );
  const router = (routing === ROUTING.virtual ? useVirtualRouter : useNextRouter)();
  const isRootPath = path === router.pathname();
  return /* @__PURE__ */ jsx(
    Router,
    {
      basePath: path,
      router,
      children: /* @__PURE__ */ jsx(FormStoreProvider, { children: /* @__PURE__ */ jsxs(SignInFlowProvider, { exampleMode, children: [
        isRootPath ? /* @__PURE__ */ jsx(ClerkLoading, { children: /* @__PURE__ */ jsx(Form, { children: fallback }) }) : null,
        /* @__PURE__ */ jsx(ClerkLoaded, { children })
      ] }) })
    }
  );
}

// src/react/sign-in/action/action.tsx
import * as React4 from "react";

// src/react/sign-in/action/navigate.tsx
import { Slot } from "@radix-ui/react-slot";
import * as React2 from "react";
import { jsx as jsx2 } from "react/jsx-runtime";
var SIGN_IN_NAVIGATE_NAME = "SignInNavigate";
var SignInNavigationEventMap = {
  start: `NAVIGATE.START`,
  previous: `NAVIGATE.PREVIOUS`,
  "choose-strategy": `NAVIGATE.CHOOSE_STRATEGY`,
  "forgot-password": `NAVIGATE.FORGOT_PASSWORD`
};
var SignInNavigate = React2.forwardRef(
  ({ asChild, to, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef();
    const Comp = asChild ? Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React2.useCallback(() => {
      const type = SignInNavigationEventMap[to];
      if (actorRef.getSnapshot().can({ type })) {
        actorRef.send({ type });
      } else {
        console.warn("Invalid navigation event.");
      }
    }, [actorRef, to]);
    return /* @__PURE__ */ jsx2(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInNavigate.displayName = SIGN_IN_NAVIGATE_NAME;

// src/react/sign-in/action/resend.tsx
import { Slot as Slot2 } from "@radix-ui/react-slot";
import { useSelector } from "@xstate/react";
import * as React3 from "react";
import { jsx as jsx3 } from "react/jsx-runtime";
var SIGN_IN_RESEND_NAME = "SignInResend";
var SignInResend = React3.forwardRef(
  ({ asChild, fallback, ...rest }, forwardedRef) => {
    const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);
    const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);
    const actorRef = firstFactorRef || secondFactorRef;
    if (!actorRef) {
      throw new Error('The resend action must be used within <SignIn.Step name="verifications">.');
    }
    const fallbackProps = useSelector(
      actorRef,
      (state) => ({
        resendable: state.context.resendable,
        resendableAfter: state.context.resendableAfter
      }),
      (a, b) => a.resendableAfter === b.resendableAfter && a.resendable === b.resendable
    );
    if (fallback && !fallbackProps.resendable) {
      return typeof fallback === "function" ? fallback(fallbackProps) : fallback;
    }
    const Comp = asChild ? Slot2 : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    return /* @__PURE__ */ jsx3(
      Comp,
      {
        ...defaultProps,
        ...rest,
        disabled: !fallbackProps.resendable,
        onClick: () => actorRef.send({ type: "RETRY" }),
        ref: forwardedRef
      }
    );
  }
);
SignInResend.displayName = SIGN_IN_RESEND_NAME;

// src/react/sign-in/action/action.tsx
import { jsx as jsx4 } from "react/jsx-runtime";
var SIGN_IN_ACTION_NAME = "SignInAction";
var SignInAction = React4.forwardRef((props, forwardedRef) => {
  const { submit, navigate, resend, ...rest } = props;
  let Comp;
  if (submit) {
    Comp = Submit;
  } else if (navigate) {
    Comp = SignInNavigate;
  } else if (resend) {
    Comp = SignInResend;
  }
  return Comp ? /* @__PURE__ */ jsx4(
    Comp,
    {
      to: navigate,
      ...rest,
      ref: forwardedRef
    }
  ) : null;
});
SignInAction.displayName = SIGN_IN_ACTION_NAME;

// src/react/sign-in/passkey.tsx
import { Slot as Slot3 } from "@radix-ui/react-slot";
import * as React5 from "react";
import { jsx as jsx5 } from "react/jsx-runtime";
var SIGN_IN_PASSKEY_NAME = "SignInPasskey";
var SignInPasskey = React5.forwardRef(
  ({ asChild, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef(true);
    const Comp = asChild ? Slot3 : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React5.useCallback(() => {
      actorRef == null ? void 0 : actorRef.send({ type: "AUTHENTICATE.PASSKEY" });
    }, [actorRef]);
    return /* @__PURE__ */ jsx5(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInPasskey.displayName = SIGN_IN_PASSKEY_NAME;

// src/react/sign-in/identifiers.tsx
function SignInSafeIdentifier() {
  return SignInRouterCtx.useSelector(SignInSafeIdentifierSelector);
}
function SignInSalutation() {
  return SignInRouterCtx.useSelector(SignInSalutationSelector);
}
export {
  SignInAction as Action,
  SignInFirstFactor as FirstFactor,
  SignInPasskey as Passkey,
  SignInRoot as Root,
  SignInSafeIdentifier as SafeIdentifier,
  SignInSalutation as Salutation,
  SignInSecondFactor as SecondFactor,
  SignInRoot as SignIn,
  SignInStep as Step,
  SignInStrategy as Strategy,
  SignInSupportedStrategy as SupportedStrategy
};
//# sourceMappingURL=index.mjs.map