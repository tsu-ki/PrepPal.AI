"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);

// src/react/sign-in/index.ts
var sign_in_exports = {};
__export(sign_in_exports, {
  Action: () => SignInAction,
  FirstFactor: () => SignInFirstFactor,
  Passkey: () => SignInPasskey,
  Root: () => SignInRoot,
  SafeIdentifier: () => SignInSafeIdentifier,
  Salutation: () => SignInSalutation,
  SecondFactor: () => SignInSecondFactor,
  SignIn: () => SignInRoot,
  Step: () => SignInStep,
  Strategy: () => SignInStrategy,
  SupportedStrategy: () => SignInSupportedStrategy
});
module.exports = __toCommonJS(sign_in_exports);
var import_client_only2 = require("client-only");

// src/react/sign-in/root.tsx
var import_clerk_react3 = require("@clerk/clerk-react");
var import_telemetry2 = require("@clerk/shared/telemetry");
var import_react8 = require("react");
var import_xstate8 = require("xstate");

// src/internals/constants/index.ts
var SSO_CALLBACK_PATH_ROUTE = "/sso-callback";
var _a, _b;
var SIGN_IN_DEFAULT_BASE_PATH = (_b = (_a = process.env.CLERK_SIGN_IN_URL) != null ? _a : process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL) != null ? _b : "/sign-in";
var _a2, _b2;
var SIGN_UP_DEFAULT_BASE_PATH = (_b2 = (_a2 = process.env.CLERK_SIGN_UP_URL) != null ? _a2 : process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL) != null ? _b2 : "/sign-up";
var NEXT_WINDOW_HISTORY_SUPPORT_VERSION = "14.1.0";
var RESENDABLE_COUNTDOWN_DEFAULT = 60;
var ERROR_CODES = {
  FORM_IDENTIFIER_NOT_FOUND: "form_identifier_not_found",
  FORM_PASSWORD_INCORRECT: "form_password_incorrect",
  INVALID_STRATEGY_FOR_USER: "strategy_for_user_invalid",
  NOT_ALLOWED_TO_SIGN_UP: "not_allowed_to_sign_up",
  OAUTH_ACCESS_DENIED: "oauth_access_denied",
  OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML: "oauth_email_domain_reserved_by_saml",
  NOT_ALLOWED_ACCESS: "not_allowed_access",
  SAML_USER_ATTRIBUTE_MISSING: "saml_user_attribute_missing",
  USER_LOCKED: "user_locked"
};
var ROUTING = {
  path: "path",
  virtual: "virtual"
};

// src/internals/machines/form/form.context.ts
var import_react = require("@xstate/react");

// src/internals/machines/form/form.machine.ts
var import_error = require("@clerk/shared/error");
var import_underscore = require("@clerk/shared/underscore");
var import_xstate = require("xstate");

// src/internals/errors/index.ts
var ClerkElementsErrorBase = class extends Error {
  constructor(code, message) {
    super(message);
    this.code = code;
    this.clerkError = true;
    this.clerkElementsError = true;
    this.name = "ClerkElementsError";
    this.rawMessage = message;
  }
  toString() {
    return `[${this.name}]
Code: ${this.code}
Message: ${this.message}`;
  }
};
var ClerkElementsError = class _ClerkElementsError extends ClerkElementsErrorBase {
  static fromAPIError(error) {
    return new _ClerkElementsError(error.code, error.longMessage || error.message);
  }
  constructor(code, message) {
    super(code, message);
    this.name = "ClerkElementsError";
  }
};
var ClerkElementsRuntimeError = class extends ClerkElementsErrorBase {
  constructor(message) {
    super("elements_runtime_error", message);
    this.name = "ClerkElementsRuntimeError";
  }
};
var ClerkElementsFieldError = class _ClerkElementsFieldError extends ClerkElementsErrorBase {
  constructor(code, message) {
    super(code, message);
    this.matchFn = () => true;
    this.name = "ClerkElementsFieldError";
  }
  static fromAPIError(error) {
    return new _ClerkElementsFieldError(error.code, error.longMessage || error.message);
  }
  get validityState() {
    return this.code;
  }
  get forceMatch() {
    return true;
  }
};

// src/internals/machines/form/form.machine.ts
var FormMachine = (0, import_xstate.setup)({
  actions: {
    setGlobalErrors: (0, import_xstate.assign)({
      errors: (_, params) => [...params.errors]
    }),
    setFieldFeedback: (0, import_xstate.assign)({
      fields: ({ context }, params) => {
        if (!params.name) {
          throw new Error("Field name is required");
        }
        if (context.fields.has(params.name)) {
          context.fields.get(params.name).feedback = params.feedback;
        }
        return context.fields;
      }
    })
  },
  types: {}
}).createMachine({
  id: "Form",
  context: () => ({
    defaultValues: /* @__PURE__ */ new Map(),
    errors: [],
    fields: /* @__PURE__ */ new Map(),
    progressive: false
  }),
  on: {
    "ERRORS.SET": {
      actions: (0, import_xstate.enqueueActions)(({ enqueue, event }) => {
        var _a3, _b3;
        if ((0, import_error.isKnownError)(event.error)) {
          const fields = {};
          const globalErrors = [];
          for (const error of event.error.errors || [event.error]) {
            const name = (0, import_underscore.snakeToCamel)((_a3 = error.meta) == null ? void 0 : _a3.paramName);
            if (!name) {
              globalErrors.push(ClerkElementsError.fromAPIError(error));
              continue;
            } else if (!fields[name]) {
              fields[name] = [];
            }
            (_b3 = fields[name]) == null ? void 0 : _b3.push(ClerkElementsFieldError.fromAPIError(error));
          }
          enqueue({
            type: "setGlobalErrors",
            params: {
              errors: globalErrors
            }
          });
          for (const field in fields) {
            enqueue({
              type: "setFieldFeedback",
              params: {
                name: field,
                feedback: {
                  type: "error",
                  message: fields[field][0]
                }
              }
            });
          }
        }
      })
    },
    "ERRORS.CLEAR": {
      actions: (0, import_xstate.assign)({
        errors: () => []
      })
    },
    "FIELD.ADD": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          event.field.value = event.field.value || context.defaultValues.get(event.field.name) || void 0;
          context.fields.set(event.field.name, event.field);
          return context.fields;
        }
      })
    },
    "FIELD.UPDATE": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          if (context.fields.has(event.field.name)) {
            context.fields.get(event.field.name).value = event.field.value;
          }
          return context.fields;
        }
      })
    },
    "FIELD.REMOVE": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          context.fields.delete(event.field.name);
          return context.fields;
        }
      })
    },
    "FIELD.FEEDBACK.SET": {
      actions: [
        {
          type: "setFieldFeedback",
          params: ({ event }) => event.field
        }
      ]
    },
    "FIELD.FEEDBACK.CLEAR": {
      actions: (0, import_xstate.assign)({
        fields: ({ context, event }) => {
          if (!event.field.name) {
            throw new Error("Field name is required");
          }
          if (context.fields.has(event.field.name)) {
            context.fields.get(event.field.name).feedback = void 0;
          }
          return context.fields;
        }
      })
    },
    "FIELD.FEEDBACK.CLEAR.ALL": {
      actions: (0, import_xstate.assign)({
        fields: ({ context }) => {
          context.fields.forEach((field) => {
            field.feedback = void 0;
          });
          return context.fields;
        }
      })
    },
    MARK_AS_PROGRESSIVE: {
      actions: (0, import_xstate.assign)(({ event }) => {
        const missing = new Set(event.missing);
        return {
          defaultValues: event.defaultValues,
          hidden: /* @__PURE__ */ new Set([...event.required.filter((f) => !missing.has(f)), ...event.optional]),
          missing,
          optional: new Set(event.optional),
          progressive: true,
          required: new Set(event.required)
        };
      })
    },
    UNMARK_AS_PROGRESSIVE: {
      actions: (0, import_xstate.assign)({
        defaultValues: /* @__PURE__ */ new Map(),
        hidden: void 0,
        missing: void 0,
        optional: void 0,
        progressive: false,
        required: void 0
      })
    }
  }
});

// src/internals/utils/inspector/index.ts
var inspect;
if (false) {
  inspect = (_a = getBrowserInspector()) != null ? _a : getConsoleInspector();
}

// src/internals/machines/form/form.context.ts
var FormMachineContext = (0, import_react.createActorContext)(FormMachine, { inspect });
var FormStoreProvider = FormMachineContext.Provider;
var useFormStore = FormMachineContext.useActorRef;
var useFormSelector = FormMachineContext.useSelector;
var globalErrorsSelector = (state) => state.context.errors;
var fieldValueSelector = (name) => (state) => {
  var _a3;
  return name ? (_a3 = state.context.fields.get(name)) == null ? void 0 : _a3.value : "";
};
var fieldHasValueSelector = (name) => (state) => Boolean(fieldValueSelector(name)(state));
var fieldFeedbackSelector = (name) => (state) => {
  var _a3;
  return name ? (_a3 = state.context.fields.get(name)) == null ? void 0 : _a3.feedback : void 0;
};

// src/internals/machines/sign-in/verification.machine.ts
var import_xstate2 = require("xstate");

// src/internals/machines/shared/shared.actions.ts
function sendToLoading({ context, event }) {
  let step;
  let strategy;
  if (event.type.startsWith("xstate.done.") || event.type.startsWith("xstate.error.")) {
    return context.parent.send({
      type: "LOADING",
      isLoading: false,
      step: void 0,
      strategy: void 0
    });
  }
  if (context.loadingStep === "strategy") {
    step = void 0;
    if (event.type === "REDIRECT") {
      strategy = event.params.strategy;
    }
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy
    });
  } else if (context.loadingStep === "continue") {
    step = "continue";
    strategy = void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy
    });
  } else if (context.loadingStep === "reset-password") {
    step = "reset-password";
    strategy = void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy
    });
  } else {
    step = context.loadingStep;
    strategy = void 0;
    return context.parent.send({
      type: "LOADING",
      isLoading: true,
      step,
      strategy
    });
  }
}

// src/internals/machines/sign-in/utils/starting-factors.ts
var import_webauthn = require("@clerk/shared/webauthn");
var ORDER_WHEN_PASSWORD_PREFERRED = ["passkey", "password", "email_link", "email_code", "phone_code"];
var ORDER_WHEN_OTP_PREFERRED = ["email_link", "email_code", "phone_code", "passkey", "password"];
var findFactorForIdentifier = (i) => (f) => {
  return "safeIdentifier" in f && f.safeIdentifier === i;
};
function determineStartingSignInFactor(firstFactors, identifier, preferredSignInStrategy) {
  if (!firstFactors || firstFactors.length === 0) {
    return null;
  }
  return preferredSignInStrategy === "password" ? determineStrategyWhenPasswordIsPreferred(firstFactors, identifier) : determineStrategyWhenOTPIsPreferred(firstFactors, identifier);
}
function findPasskeyStrategy(factors) {
  if ((0, import_webauthn.isWebAuthnSupported)()) {
    const passkeyFactor = factors.find(({ strategy }) => strategy === "passkey");
    if (passkeyFactor) {
      return passkeyFactor;
    }
  }
  return null;
}
function determineStrategyWhenPasswordIsPreferred(factors, identifier) {
  const passkeyFactor = findPasskeyStrategy(factors);
  if (passkeyFactor) {
    return passkeyFactor;
  }
  const passwordFactor = factors.find((factor) => factor.strategy === "password");
  if (passwordFactor) {
    return passwordFactor;
  }
  const factorForIdentifier = factors.find(findFactorForIdentifier(identifier));
  if (factorForIdentifier) {
    return factorForIdentifier;
  }
  for (const preferredFactor of ORDER_WHEN_PASSWORD_PREFERRED) {
    const factor = factors.find((factor2) => factor2.strategy === preferredFactor);
    if (factor) {
      return factor;
    }
  }
  return null;
}
function determineStrategyWhenOTPIsPreferred(factors, identifier) {
  const passkeyFactor = findPasskeyStrategy(factors);
  if (passkeyFactor) {
    return passkeyFactor;
  }
  const factorForIdentifier = factors.find(findFactorForIdentifier(identifier));
  if (factorForIdentifier) {
    return factorForIdentifier;
  }
  const emailLinkFactor = factors.find((factor) => factor.strategy === "email_link");
  if (emailLinkFactor) {
    return emailLinkFactor;
  }
  for (const preferredFactor of ORDER_WHEN_OTP_PREFERRED) {
    const factor = factors.find((factor2) => factor2.strategy === preferredFactor);
    if (factor) {
      return factor;
    }
  }
  return null;
}
function determineStartingSignInSecondFactor(secondFactors) {
  if (!secondFactors || secondFactors.length === 0) {
    return null;
  }
  const totpFactor = secondFactors.find((f) => f.strategy === "totp");
  if (totpFactor) {
    return totpFactor;
  }
  const phoneCodeFactor = secondFactors.find((f) => f.strategy === "phone_code");
  if (phoneCodeFactor) {
    return phoneCodeFactor;
  }
  return secondFactors[0];
}

// src/internals/machines/utils/assert.ts
function assertIsDefined(value, label) {
  if (value === void 0 || value === null) {
    throw new Error(`${label || value} is not defined`);
  }
}
function assertActorEventError(event) {
  if ("error" in event === false) {
    throw new Error(`Expected an error event, got "${event.type}"`);
  }
}

// src/internals/machines/sign-in/verification.types.ts
var SignInVerificationDelays = {
  resendableTimeout: 1e3
  // 1 second
};

// src/internals/machines/sign-in/verification.machine.ts
var isNonPreperableStrategy = (strategy) => {
  if (!strategy) {
    return false;
  }
  return ["passkey", "password"].includes(strategy);
};
var SignInVerificationMachineId = "SignInVerification";
var SignInVerificationMachine = (0, import_xstate2.setup)({
  actors: {
    determineStartingFactor: (0, import_xstate2.fromPromise)(
      () => Promise.reject(new ClerkElementsRuntimeError("Actor `determineStartingFactor` must be overridden"))
    ),
    prepare: (0, import_xstate2.fromPromise)(
      () => Promise.reject(new ClerkElementsRuntimeError("Actor `prepare` must be overridden"))
    ),
    attempt: (0, import_xstate2.fromPromise)(
      () => Promise.reject(new ClerkElementsRuntimeError("Actor `attempt` must be overridden"))
    )
  },
  actions: {
    resendableTick: (0, import_xstate2.assign)(({ context }) => ({
      resendable: context.resendableAfter === 0,
      resendableAfter: context.resendableAfter > 0 ? context.resendableAfter - 1 : context.resendableAfter
    })),
    resendableReset: (0, import_xstate2.assign)({
      resendable: false,
      resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT
    }),
    validateRegisteredStrategies: ({ context }) => {
      var _a3;
      const clerk = context.parent.getSnapshot().context.clerk;
      if ((_a3 = clerk.__unstable__environment) == null ? void 0 : _a3.isProduction()) {
        return;
      }
      if (!clerk.client.signIn.supportedFirstFactors.every(
        (factor) => context.registeredStrategies.has(factor.strategy)
      )) {
        console.warn(
          `Clerk: Your instance is configured to support these strategies: ${clerk.client.signIn.supportedFirstFactors.map((factor) => factor.strategy).join(", ")}, but the rendered strategies are: ${Array.from(context.registeredStrategies).join(
            ", "
          )}. Before deploying your app, make sure to render a <Strategy> component for each supported strategy. For more information, visit the documentation: https://clerk.com/docs/elements/reference/sign-in#strategy`
        );
      }
      if (clerk.client.signIn.supportedSecondFactors && !clerk.client.signIn.supportedSecondFactors.every(
        (factor) => context.registeredStrategies.has(factor.strategy)
      )) {
        console.warn(
          `Clerk: Your instance is configured to support these 2FA strategies: ${[
            ...clerk.client.signIn.supportedSecondFactors
          ].map((f) => f.strategy).join(", ")}, but the rendered strategies are: ${Array.from(context.registeredStrategies).join(
            ", "
          )}. Before deploying your app, make sure to render a <Strategy> component for each supported strategy. For more information, visit the documentation: https://clerk.com/docs/elements/reference/sign-in#strategy`
        );
      }
      if (false) {
        throw new ClerkElementsRuntimeError(
          `Your sign-in attempt is missing a ${(_d = context.currentFactor) == null ? void 0 : _d.strategy} strategy. Make sure <Strategy name="${(_e = context.currentFactor) == null ? void 0 : _e.strategy}"> is rendered in your flow. For more information, visit the documentation: https://clerk.com/docs/elements/reference/sign-in#strategy`
        );
      } else if (false) {
        throw new ClerkElementsRuntimeError(
          "Unable to determine an authentication strategy to verify. This means your instance is misconfigured. Visit the Clerk Dashboard and verify that your instance has authentication strategies enabled: https://dashboard.clerk.com/last-active?path=/user-authentication/email-phone-username"
        );
      }
    },
    sendToNext: ({ context, event }) => context.parent.send({ type: "NEXT", resource: event.output }),
    sendToLoading,
    setFormErrors: (0, import_xstate2.sendTo)(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    ),
    setConsoleError: ({ event }) => {
      if (false) {
        assertActorEventError(event);
        throw new ClerkElementsRuntimeError(`Unable to fulfill the prepare or attempt request for the sign-in verification.
Error: ${event.error.message}

Please open an issue if you continue to run into this issue.`);
      }
    }
  },
  guards: {
    isResendable: ({ context }) => context.resendable || context.resendableAfter === 0,
    isNeverResendable: ({ context }) => {
      var _a3;
      return isNonPreperableStrategy((_a3 = context.currentFactor) == null ? void 0 : _a3.strategy);
    }
  },
  delays: SignInVerificationDelays,
  types: {}
}).createMachine({
  id: SignInVerificationMachineId,
  context: ({ input }) => ({
    currentFactor: null,
    formRef: input.formRef,
    loadingStep: "verifications",
    parent: input.parent,
    registeredStrategies: /* @__PURE__ */ new Set(),
    resendable: false,
    resendableAfter: RESENDABLE_COUNTDOWN_DEFAULT
  }),
  initial: "Init",
  on: {
    "NAVIGATE.PREVIOUS": ".Hist",
    "STRATEGY.REGISTER": {
      actions: (0, import_xstate2.assign)({
        registeredStrategies: ({ context, event }) => context.registeredStrategies.add(event.factor)
      })
    },
    "STRATEGY.UNREGISTER": {
      actions: (0, import_xstate2.assign)({
        registeredStrategies: ({ context, event }) => {
          context.registeredStrategies.delete(event.factor);
          return context.registeredStrategies;
        }
      })
    }
  },
  states: {
    Init: {
      tags: ["state:preparing", "state:loading"],
      invoke: {
        id: "determineStartingFactor",
        src: "determineStartingFactor",
        input: ({ context }) => ({
          parent: context.parent
        }),
        onDone: {
          target: "Preparing",
          actions: (0, import_xstate2.assign)({
            currentFactor: ({ event }) => event.output
          })
        },
        onError: {
          target: "Preparing",
          actions: [
            (0, import_xstate2.log)("Clerk [Sign In Verification]: Error determining starting factor"),
            (0, import_xstate2.assign)({
              currentFactor: { strategy: "password" }
            })
          ]
        }
      }
    },
    Preparing: {
      tags: ["state:preparing", "state:loading"],
      invoke: {
        id: "prepare",
        src: "prepare",
        input: ({ context }) => ({
          parent: context.parent,
          resendable: context.resendable,
          params: context.currentFactor
        }),
        onDone: {
          actions: "resendableReset",
          target: "Pending"
        },
        onError: {
          actions: ["setFormErrors", "setConsoleError"],
          target: "Pending"
        }
      }
    },
    Pending: {
      tags: ["state:pending"],
      description: "Waiting for user input",
      on: {
        "NAVIGATE.CHOOSE_STRATEGY": "ChooseStrategy",
        "NAVIGATE.FORGOT_PASSWORD": "ChooseStrategy",
        RETRY: "Preparing",
        SUBMIT: {
          target: "Attempting",
          reenter: true
        }
      },
      initial: "Init",
      states: {
        Init: {
          description: "Marks appropriate factors as never resendable.",
          always: [
            {
              guard: "isNeverResendable",
              target: "NeverResendable"
            },
            {
              target: "NotResendable"
            }
          ]
        },
        Resendable: {
          description: "Waiting for user to retry"
        },
        NeverResendable: {
          description: "Handles never resendable",
          on: {
            RETRY: {
              actions: (0, import_xstate2.log)("Never retriable")
            }
          }
        },
        NotResendable: {
          description: "Handle countdowns",
          on: {
            RETRY: {
              actions: (0, import_xstate2.log)(({ context }) => `Not retriable; Try again in ${context.resendableAfter}s`)
            }
          },
          after: {
            resendableTimeout: [
              {
                description: "Set as retriable if countdown is 0",
                guard: "isResendable",
                actions: "resendableTick",
                target: "Resendable"
              },
              {
                description: "Continue countdown if not retriable",
                actions: "resendableTick",
                target: "NotResendable",
                reenter: true
              }
            ]
          }
        }
      },
      after: {
        3e3: {
          actions: "validateRegisteredStrategies"
        }
      }
    },
    ChooseStrategy: {
      description: "Handles both choose strategy and forgot password as the latter is similar in functionality",
      tags: ["state:choose-strategy", "state:forgot-password"],
      on: {
        "STRATEGY.UPDATE": {
          actions: (0, import_xstate2.assign)({ currentFactor: ({ event }) => event.factor || null }),
          target: "Preparing"
        }
      }
    },
    Attempting: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attempt",
        src: "attempt",
        input: ({ context }) => ({
          parent: context.parent,
          currentFactor: context.currentFactor,
          fields: context.formRef.getSnapshot().context.fields
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "setConsoleError", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    Hist: {
      type: "history"
    }
  }
});
var SignInFirstFactorMachine = SignInVerificationMachine.provide({
  actors: {
    determineStartingFactor: (0, import_xstate2.fromPromise)(async ({ input }) => {
      var _a3;
      const clerk = input.parent.getSnapshot().context.clerk;
      return Promise.resolve(
        determineStartingSignInFactor(
          clerk.client.signIn.supportedFirstFactors,
          clerk.client.signIn.identifier,
          (_a3 = clerk.__unstable__environment) == null ? void 0 : _a3.displayConfig.preferredSignInStrategy
        )
      );
    }),
    prepare: (0, import_xstate2.fromPromise)(async ({ input }) => {
      const { params, parent, resendable } = input;
      const clerk = parent.getSnapshot().context.clerk;
      const currentVerificationExpiration = clerk.client.signIn.firstFactorVerification.expireAt;
      const needsPrepare = resendable || !currentVerificationExpiration || currentVerificationExpiration < /* @__PURE__ */ new Date();
      if (isNonPreperableStrategy(params == null ? void 0 : params.strategy) || !needsPrepare) {
        return Promise.resolve(clerk.client.signIn);
      }
      assertIsDefined(params, "First factor params");
      return await clerk.client.signIn.prepareFirstFactor(params);
    }),
    attempt: (0, import_xstate2.fromPromise)(async ({ input }) => {
      var _a3, _b3, _c;
      const { currentFactor, fields, parent } = input;
      assertIsDefined(currentFactor, "Current factor");
      let attemptParams;
      const strategy = currentFactor.strategy;
      const code = (_a3 = fields.get("code")) == null ? void 0 : _a3.value;
      const password = (_b3 = fields.get("password")) == null ? void 0 : _b3.value;
      switch (strategy) {
        case "passkey": {
          return await parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey();
        }
        case "password": {
          assertIsDefined(password, "Password");
          attemptParams = {
            strategy,
            password
          };
          break;
        }
        case "reset_password_phone_code":
        case "reset_password_email_code": {
          assertIsDefined(code, "Code for resetting phone/email");
          attemptParams = {
            strategy,
            code,
            password
          };
          break;
        }
        case "phone_code":
        case "email_code": {
          assertIsDefined(code, "Code for phone/email");
          attemptParams = {
            strategy,
            code
          };
          break;
        }
        case "web3_metamask_signature": {
          const signature = (_c = fields.get("signature")) == null ? void 0 : _c.value;
          assertIsDefined(signature, "Web3 Metamask signature");
          attemptParams = {
            strategy,
            signature
          };
          break;
        }
        default:
          throw new ClerkElementsRuntimeError(`Invalid strategy: ${strategy}`);
      }
      return await parent.getSnapshot().context.clerk.client.signIn.attemptFirstFactor(attemptParams);
    })
  }
});
var SignInSecondFactorMachine = SignInVerificationMachine.provide({
  actors: {
    determineStartingFactor: (0, import_xstate2.fromPromise)(
      async ({ input }) => Promise.resolve(
        determineStartingSignInSecondFactor(
          input.parent.getSnapshot().context.clerk.client.signIn.supportedSecondFactors
        )
      )
    ),
    prepare: (0, import_xstate2.fromPromise)(async ({ input }) => {
      const { params, parent, resendable } = input;
      const clerk = parent.getSnapshot().context.clerk;
      const currentVerificationExpiration = clerk.client.signIn.secondFactorVerification.expireAt;
      const needsPrepare = resendable || !currentVerificationExpiration || currentVerificationExpiration < /* @__PURE__ */ new Date();
      assertIsDefined(params, "Second factor params");
      if (params.strategy !== "phone_code" || !needsPrepare) {
        return Promise.resolve(clerk.client.signIn);
      }
      return await clerk.client.signIn.prepareSecondFactor({
        strategy: params.strategy,
        phoneNumberId: params.phoneNumberId
      });
    }),
    attempt: (0, import_xstate2.fromPromise)(async ({ input }) => {
      var _a3;
      const { fields, parent, currentFactor } = input;
      const code = (_a3 = fields.get("code")) == null ? void 0 : _a3.value;
      assertIsDefined(currentFactor, "Current factor");
      assertIsDefined(code, "Code");
      return await parent.getSnapshot().context.clerk.client.signIn.attemptSecondFactor({
        strategy: currentFactor.strategy,
        code
      });
    })
  }
});

// src/internals/machines/sign-in/router.machine.ts
var import_url = require("@clerk/shared/url");
var import_webauthn2 = require("@clerk/shared/webauthn");
var import_xstate7 = require("xstate");

// src/internals/machines/third-party/third-party.actors.ts
var import_xstate3 = require("xstate");

// src/internals/machines/utils/clerkjs.ts
function isClerkJSEvent(eventObj, event) {
  return Object.values(eventObj).includes(event);
}
var ClerkJSNavigationEvent = {
  complete: "CLERKJS.NAVIGATE.COMPLETE",
  signUp: "CLERKJS.NAVIGATE.SIGN_UP",
  continue: "CLERKJS.NAVIGATE.CONTINUE",
  generic: "CLERKJS.NAVIGATE.GENERIC",
  resetPassword: "CLERKJS.NAVIGATE.RESET_PASSWORD",
  signIn: "CLERKJS.NAVIGATE.SIGN_IN",
  verification: "CLERKJS.NAVIGATE.VERIFICATION"
};
function isClerkJSNavigationEvent(event) {
  return isClerkJSEvent(ClerkJSNavigationEvent, event);
}

// src/internals/machines/third-party/third-party.actors.ts
var redirect = (0, import_xstate3.fromPromise)(
  async ({ input: { flow, params, parent } }) => {
    const clerk = parent.getSnapshot().context.clerk;
    return clerk.client[flow].authenticateWithRedirect({
      redirectUrl: clerk.buildUrlWithAuth(params.redirectUrl || "/"),
      redirectUrlComplete: clerk.buildUrlWithAuth(params.redirectUrlComplete || "/"),
      ...params
    });
  }
);
var handleRedirectCallback = (0, import_xstate3.fromCallback)(
  ({ sendBack, input: parent }) => {
    var _a3;
    const clerk = parent.getSnapshot().context.clerk;
    const displayConfig = (_a3 = clerk.__unstable__environment) == null ? void 0 : _a3.displayConfig;
    const customNavigate = (toEvt) => {
      const to = toEvt.split("/").slice(-1)[0];
      if (isClerkJSNavigationEvent(to)) {
        sendBack({ type: to });
      } else if (to === (displayConfig == null ? void 0 : displayConfig.signInUrl)) {
        sendBack({ type: ClerkJSNavigationEvent.signIn });
      } else if (to === (displayConfig == null ? void 0 : displayConfig.signUpUrl)) {
        sendBack({ type: ClerkJSNavigationEvent.signUp });
      } else {
        sendBack({ type: "FAILURE", error: new ClerkElementsRuntimeError(`Unknown navigation event: ${to}`) });
      }
      return Promise.resolve();
    };
    const loadedClerk = clerk.clerkjs;
    void loadedClerk.handleRedirectCallback(
      {
        signInForceRedirectUrl: ClerkJSNavigationEvent.complete,
        signInFallbackRedirectUrl: ClerkJSNavigationEvent.complete,
        signUpForceRedirectUrl: ClerkJSNavigationEvent.signUp,
        signUpFallbackRedirectUrl: ClerkJSNavigationEvent.signUp,
        continueSignUpUrl: ClerkJSNavigationEvent.continue,
        firstFactorUrl: ClerkJSNavigationEvent.signIn,
        resetPasswordUrl: ClerkJSNavigationEvent.resetPassword,
        secondFactorUrl: ClerkJSNavigationEvent.signIn,
        verifyEmailAddressUrl: ClerkJSNavigationEvent.verification,
        verifyPhoneNumberUrl: ClerkJSNavigationEvent.verification,
        signUpUrl: ClerkJSNavigationEvent.signUp,
        signInUrl: ClerkJSNavigationEvent.signIn
      },
      customNavigate
    );
    return () => void 0;
  }
);

// src/internals/machines/third-party/third-party.machine.ts
var import_xstate4 = require("xstate");
var ThirdPartyMachineId = "ThirdParty";
var ThirdPartyMachine = (0, import_xstate4.setup)({
  actors: {
    handleRedirectCallback,
    redirect
  },
  actions: {
    logError: (0, import_xstate4.log)(({ event }) => `Error: ${event.type}`),
    assignActiveStrategy: (0, import_xstate4.assign)({
      activeStrategy: ({ event }) => {
        (0, import_xstate4.assertEvent)(event, "REDIRECT");
        return event.params.strategy;
      }
    }),
    unassignActiveStrategy: (0, import_xstate4.assign)({
      activeStrategy: null
    }),
    sendToNext: ({ context }) => context.parent.send({ type: "NEXT" }),
    sendToLoading,
    setFormErrors: (0, import_xstate4.sendTo)(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    )
  },
  guards: {
    isExampleMode: ({ context }) => Boolean(context.parent.getSnapshot().context.exampleMode)
  },
  types: {}
}).createMachine({
  id: ThirdPartyMachineId,
  context: ({ input }) => ({
    activeStrategy: null,
    basePath: input.basePath,
    formRef: input.formRef,
    flow: input.flow,
    parent: input.parent,
    loadingStep: "strategy"
  }),
  initial: "Idle",
  states: {
    Idle: {
      description: "Sets third-party providers if not already set, and waits for a redirect or callback event",
      on: {
        CALLBACK: "HandlingCallback",
        REDIRECT: {
          guard: (0, import_xstate4.not)("isExampleMode"),
          target: "Redirecting",
          reenter: true
        }
      }
    },
    Redirecting: {
      description: "Redirects to the third-party provider for authentication",
      tags: ["state:redirect", "state:loading"],
      entry: ["assignActiveStrategy", "sendToLoading"],
      exit: ["unassignActiveStrategy", "sendToLoading"],
      invoke: {
        id: "redirect",
        src: "redirect",
        input: ({ context, event }) => {
          (0, import_xstate4.assertEvent)(event, "REDIRECT");
          return {
            basePath: context.basePath,
            flow: context.flow,
            params: event.params,
            parent: context.parent
          };
        },
        onError: {
          actions: "setFormErrors",
          target: "Idle"
        }
      }
    },
    HandlingCallback: {
      description: "Handles the callback from the third-party provider",
      tags: ["state:callback", "state:loading"],
      invoke: {
        id: "handleRedirectCallback",
        src: "handleRedirectCallback",
        input: ({ context }) => context.parent,
        onError: {
          actions: ["logError", "setFormErrors"],
          target: "Idle"
        }
      },
      on: {
        "CLERKJS.NAVIGATE.*": {
          actions: "sendToNext",
          target: "Idle"
        }
      }
    }
  }
});

// src/internals/machines/utils/next.ts
function shouldUseVirtualRouting() {
  if (typeof window === "undefined") {
    return false;
  }
  if (!window.next) {
    return false;
  }
  return window.next.version < NEXT_WINDOW_HISTORY_SUPPORT_VERSION;
}

// src/internals/machines/sign-in/reset-password.machine.ts
var import_xstate5 = require("xstate");
var SignInResetPasswordMachineId = "SignInResetPasswordMachine";
var SignInResetPasswordMachine = (0, import_xstate5.setup)({
  actors: {
    attempt: (0, import_xstate5.fromPromise)(
      ({ input: { fields, parent } }) => {
        var _a3;
        const password = ((_a3 = fields.get("password")) == null ? void 0 : _a3.value) || "";
        return parent.getSnapshot().context.clerk.client.signIn.resetPassword({ password });
      }
    )
  },
  actions: {
    sendToLoading,
    sendToNext: ({ context, event }) => context.parent.send({ type: "NEXT", resource: event.output }),
    setFormErrors: (0, import_xstate5.sendTo)(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    )
  },
  types: {}
}).createMachine({
  id: SignInResetPasswordMachineId,
  context: ({ input }) => ({
    loadingStep: "reset-password",
    parent: input.parent,
    formRef: input.formRef
  }),
  initial: "Pending",
  states: {
    Pending: {
      tags: ["state:pending"],
      description: "Waiting for user input",
      on: {
        SUBMIT: {
          target: "Attempting",
          reenter: true
        }
      }
    },
    Attempting: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attempt",
        src: "attempt",
        input: ({ context }) => ({
          parent: context.parent,
          fields: context.formRef.getSnapshot().context.fields
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    }
  }
});

// src/internals/machines/sign-in/start.machine.ts
var import_xstate6 = require("xstate");
var SignInStartMachineId = "SignInStart";
var SignInStartMachine = (0, import_xstate6.setup)({
  actors: {
    attemptPasskey: (0, import_xstate6.fromPromise)(({ input: { parent, flow } }) => {
      return parent.getSnapshot().context.clerk.client.signIn.authenticateWithPasskey({
        flow
      });
    }),
    attempt: (0, import_xstate6.fromPromise)(
      ({ input: { fields, parent } }) => {
        const clerk = parent.getSnapshot().context.clerk;
        const password = fields.get("password");
        const identifier = fields.get("identifier");
        const passwordParams = (password == null ? void 0 : password.value) ? {
          password: password.value,
          strategy: "password"
        } : {};
        return clerk.client.signIn.create({
          identifier: (identifier == null ? void 0 : identifier.value) || "",
          ...passwordParams
        });
      }
    )
  },
  actions: {
    sendToNext: ({ context, event }) => {
      return context.parent.send({ type: "NEXT", resource: event == null ? void 0 : event.output });
    },
    sendToLoading,
    setFormErrors: (0, import_xstate6.sendTo)(
      ({ context }) => context.formRef,
      ({ event }) => {
        assertActorEventError(event);
        return {
          type: "ERRORS.SET",
          error: event.error
        };
      }
    )
  },
  guards: {
    isExampleMode: ({ context }) => Boolean(context.parent.getSnapshot().context.exampleMode)
  },
  types: {}
}).createMachine({
  id: SignInStartMachineId,
  context: ({ input }) => ({
    basePath: input.basePath || SIGN_IN_DEFAULT_BASE_PATH,
    parent: input.parent,
    formRef: input.formRef,
    loadingStep: "start"
  }),
  initial: "Pending",
  states: {
    Pending: {
      tags: ["state:pending"],
      description: "Waiting for user input",
      on: {
        SUBMIT: {
          guard: (0, import_xstate6.not)("isExampleMode"),
          target: "Attempting",
          reenter: true
        },
        "AUTHENTICATE.PASSKEY": {
          guard: (0, import_xstate6.not)("isExampleMode"),
          target: "AttemptingPasskey",
          reenter: true
        },
        "AUTHENTICATE.PASSKEY.AUTOFILL": {
          guard: (0, import_xstate6.not)("isExampleMode"),
          target: "AttemptingPasskeyAutoFill",
          reenter: false
        }
      }
    },
    Attempting: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attempt",
        src: "attempt",
        input: ({ context }) => ({
          parent: context.parent,
          fields: context.formRef.getSnapshot().context.fields
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    AttemptingPasskey: {
      tags: ["state:attempting", "state:loading"],
      entry: "sendToLoading",
      invoke: {
        id: "attemptPasskey",
        src: "attemptPasskey",
        input: ({ context }) => ({
          parent: context.parent,
          flow: "discoverable"
        }),
        onDone: {
          actions: ["sendToNext", "sendToLoading"]
        },
        onError: {
          actions: ["setFormErrors", "sendToLoading"],
          target: "Pending"
        }
      }
    },
    AttemptingPasskeyAutoFill: {
      on: {
        "AUTHENTICATE.PASSKEY": {
          guard: (0, import_xstate6.not)("isExampleMode"),
          target: "AttemptingPasskey",
          reenter: true
        },
        SUBMIT: {
          guard: (0, import_xstate6.not)("isExampleMode"),
          target: "Attempting",
          reenter: true
        }
      },
      invoke: {
        id: "attemptPasskeyAutofill",
        src: "attemptPasskey",
        input: ({ context }) => ({
          parent: context.parent,
          flow: "autofill"
        }),
        onDone: {
          actions: ["sendToNext"]
        },
        onError: {
          actions: ["setFormErrors"],
          target: "Pending"
        }
      }
    }
  }
});

// src/internals/machines/sign-in/router.machine.ts
var isCurrentPath = (path) => ({ context }, _params) => {
  var _a3, _b3;
  return (_b3 = (_a3 = context.router) == null ? void 0 : _a3.match(path)) != null ? _b3 : false;
};
var needsStatus = (status) => ({ context, event }, _) => {
  var _a3, _b3;
  return ((_a3 = event == null ? void 0 : event.resource) == null ? void 0 : _a3.status) === status || ((_b3 = context.clerk) == null ? void 0 : _b3.client.signIn.status) === status;
};
var SignInRouterMachineId = "SignInRouter";
var SignInRouterMachine = (0, import_xstate7.setup)({
  actors: {
    firstFactorMachine: SignInFirstFactorMachine,
    formMachine: FormMachine,
    resetPasswordMachine: SignInResetPasswordMachine,
    startMachine: SignInStartMachine,
    secondFactorMachine: SignInSecondFactorMachine,
    thirdPartyMachine: ThirdPartyMachine,
    webAuthnAutofillSupport: (0, import_xstate7.fromPromise)(() => (0, import_webauthn2.isWebAuthnAutofillSupported)())
  },
  actions: {
    clearFormErrors: (0, import_xstate7.sendTo)(({ context }) => context.formRef, { type: "ERRORS.CLEAR" }),
    navigateInternal: ({ context }, { path, force = false }) => {
      if (!context.router) {
        return;
      }
      if (!force && shouldUseVirtualRouting()) {
        return;
      }
      if (context.exampleMode) {
        return;
      }
      const resolvedPath = (0, import_url.joinURL)(context.router.basePath, path);
      if (resolvedPath === context.router.pathname()) {
        return;
      }
      context.router.shallowPush(resolvedPath);
    },
    navigateExternal: ({ context }, { path }) => {
      var _a3;
      return (_a3 = context.router) == null ? void 0 : _a3.push(path);
    },
    raiseNext: (0, import_xstate7.raise)({ type: "NEXT" }),
    setActive: (0, import_xstate7.enqueueActions)(({ enqueue, check, context, event }) => {
      if (check("isExampleMode")) {
        return;
      }
      const lastActiveSessionId = context.clerk.client.lastActiveSessionId;
      const createdSessionId = ((event == null ? void 0 : event.resource) || context.clerk.client.signIn).createdSessionId;
      const session = createdSessionId || lastActiveSessionId || null;
      const beforeEmit = () => {
        var _a3;
        return (_a3 = context.router) == null ? void 0 : _a3.push(context.clerk.buildAfterSignInUrl());
      };
      void context.clerk.setActive({ session, beforeEmit });
      enqueue.raise({ type: "RESET" }, { delay: 2e3 });
    }),
    setError: (0, import_xstate7.assign)({
      error: (_, { error }) => {
        if (error) {
          return error;
        }
        return new ClerkElementsRuntimeError("Unknown error");
      }
    }),
    setFormErrors: ({ context }, params) => (0, import_xstate7.sendTo)(context.formRef, {
      type: "ERRORS.SET",
      error: params.error
    }),
    setFormOAuthErrors: ({ context }) => {
      const errorOrig = context.clerk.client.signIn.firstFactorVerification.error;
      if (!errorOrig) {
        return;
      }
      let error;
      switch (errorOrig.code) {
        case ERROR_CODES.NOT_ALLOWED_TO_SIGN_UP:
        case ERROR_CODES.OAUTH_ACCESS_DENIED:
        case ERROR_CODES.NOT_ALLOWED_ACCESS:
        case ERROR_CODES.SAML_USER_ATTRIBUTE_MISSING:
        case ERROR_CODES.OAUTH_EMAIL_DOMAIN_RESERVED_BY_SAML:
        case ERROR_CODES.USER_LOCKED:
          error = new ClerkElementsError(errorOrig.code, errorOrig.longMessage);
          break;
        default:
          error = new ClerkElementsError(
            "unable_to_complete",
            "Unable to complete action at this time. If the problem persists please contact support."
          );
      }
      context.formRef.send({
        type: "ERRORS.SET",
        error
      });
    },
    transfer: ({ context }) => {
      var _a3;
      const searchParams = new URLSearchParams({ __clerk_transfer: "1" });
      (_a3 = context.router) == null ? void 0 : _a3.push(`${context.signUpPath}?${searchParams}`);
    }
  },
  guards: {
    hasAuthenticatedViaClerkJS: ({ context }) => Boolean(context.clerk.client.signIn.status === null && context.clerk.client.lastActiveSessionId),
    hasOAuthError: ({ context }) => {
      var _a3, _b3, _c, _d;
      return Boolean((_d = (_c = (_b3 = (_a3 = context.clerk) == null ? void 0 : _a3.client) == null ? void 0 : _b3.signIn) == null ? void 0 : _c.firstFactorVerification) == null ? void 0 : _d.error);
    },
    hasResource: ({ context }) => {
      var _a3, _b3, _c;
      return Boolean((_c = (_b3 = (_a3 = context.clerk) == null ? void 0 : _a3.client) == null ? void 0 : _b3.signIn) == null ? void 0 : _c.status);
    },
    isLoggedInAndSingleSession: (0, import_xstate7.and)(["isLoggedIn", "isSingleSessionMode", (0, import_xstate7.not)("isExampleMode")]),
    isActivePathRoot: isCurrentPath("/"),
    isComplete: ({ context, event }) => {
      const resource = event == null ? void 0 : event.resource;
      const signIn = context.clerk.client.signIn;
      return (resource == null ? void 0 : resource.status) === "complete" && Boolean(resource == null ? void 0 : resource.createdSessionId) || signIn.status === "complete" && Boolean(signIn.createdSessionId);
    },
    isLoggedIn: ({ context }) => {
      var _a3;
      return Boolean((_a3 = context.clerk) == null ? void 0 : _a3.user);
    },
    isSingleSessionMode: ({ context }) => {
      var _a3, _b3;
      return Boolean((_b3 = (_a3 = context.clerk) == null ? void 0 : _a3.__unstable__environment) == null ? void 0 : _b3.authConfig.singleSessionMode);
    },
    isExampleMode: ({ context }) => Boolean(context.exampleMode),
    needsStart: (0, import_xstate7.or)([(0, import_xstate7.not)("hasResource"), "statusNeedsIdentifier", isCurrentPath("/")]),
    needsFirstFactor: (0, import_xstate7.and)(["statusNeedsFirstFactor", isCurrentPath("/continue")]),
    needsSecondFactor: (0, import_xstate7.and)(["statusNeedsSecondFactor", isCurrentPath("/continue")]),
    needsCallback: isCurrentPath(SSO_CALLBACK_PATH_ROUTE),
    needsNewPassword: (0, import_xstate7.and)(["statusNeedsNewPassword", isCurrentPath("/new-password")]),
    statusNeedsIdentifier: needsStatus("needs_identifier"),
    statusNeedsFirstFactor: needsStatus("needs_first_factor"),
    statusNeedsSecondFactor: needsStatus("needs_second_factor"),
    statusNeedsNewPassword: needsStatus("needs_new_password")
  },
  types: {}
}).createMachine({
  id: SignInRouterMachineId,
  // @ts-expect-error - Set in INIT event
  context: {},
  initial: "Idle",
  on: {
    "AUTHENTICATE.OAUTH": {
      actions: (0, import_xstate7.sendTo)(ThirdPartyMachineId, ({ context, event }) => {
        var _a3, _b3, _c;
        return {
          type: "REDIRECT",
          params: {
            strategy: event.strategy,
            redirectUrl: `${((_a3 = context.router) == null ? void 0 : _a3.mode) === ROUTING.virtual ? (_b3 = context.clerk.__unstable__environment) == null ? void 0 : _b3.displayConfig.signInUrl : (_c = context.router) == null ? void 0 : _c.basePath}${SSO_CALLBACK_PATH_ROUTE}`,
            redirectUrlComplete: context.clerk.buildAfterSignInUrl()
          }
        };
      })
    },
    "AUTHENTICATE.SAML": {
      actions: (0, import_xstate7.sendTo)(ThirdPartyMachineId, {
        type: "REDIRECT",
        params: { strategy: "saml" }
      })
    },
    "FORM.ATTACH": {
      description: "Attach/re-attach the form to the router.",
      actions: (0, import_xstate7.enqueueActions)(({ enqueue, event }) => {
        enqueue.assign({
          formRef: event.formRef
        });
        enqueue.raise({ type: "RESET.STEP" });
      })
    },
    "NAVIGATE.PREVIOUS": ".Hist",
    "NAVIGATE.START": ".Start",
    LOADING: {
      actions: (0, import_xstate7.assign)(({ event }) => ({
        loading: {
          isLoading: event.isLoading,
          step: event.step,
          strategy: event.strategy
        }
      }))
    },
    RESET: ".Idle"
  },
  states: {
    Idle: {
      invoke: {
        id: "webAuthnAutofill",
        src: "webAuthnAutofillSupport",
        onDone: {
          actions: (0, import_xstate7.assign)({ webAuthnAutofillSupport: ({ event }) => event.output })
        }
      },
      on: {
        INIT: {
          actions: (0, import_xstate7.assign)(({ event }) => ({
            clerk: event.clerk,
            exampleMode: event.exampleMode || false,
            formRef: event.formRef,
            loading: {
              isLoading: false
            },
            router: event.router,
            signUpPath: event.signUpPath || SIGN_UP_DEFAULT_BASE_PATH
          })),
          target: "Init"
        }
      }
    },
    Init: {
      entry: (0, import_xstate7.enqueueActions)(({ context, enqueue, self }) => {
        var _a3, _b3;
        if (!self.getSnapshot().children[ThirdPartyMachineId]) {
          enqueue.spawnChild("thirdPartyMachine", {
            id: ThirdPartyMachineId,
            systemId: ThirdPartyMachineId,
            input: {
              basePath: (_b3 = (_a3 = context.router) == null ? void 0 : _a3.basePath) != null ? _b3 : SIGN_IN_DEFAULT_BASE_PATH,
              flow: "signIn",
              formRef: context.formRef,
              parent: self
            }
          });
        }
      }),
      always: [
        {
          guard: "needsCallback",
          target: "Callback"
        },
        {
          guard: "isComplete",
          actions: "setActive"
        },
        {
          guard: "isLoggedInAndSingleSession",
          actions: [
            () => console.warn("logged-in-single-session-mode"),
            {
              type: "setError",
              params: {
                error: new ClerkElementsError("logged-in-single-session-mode", "You are already logged in.")
              }
            }
          ],
          target: "Start"
        },
        {
          guard: "needsStart",
          actions: { type: "navigateInternal", params: { force: true, path: "/" } },
          target: "Start"
        },
        {
          guard: "needsFirstFactor",
          actions: { type: "navigateInternal", params: { force: true, path: "/continue" } },
          target: "FirstFactor"
        },
        {
          guard: "needsSecondFactor",
          actions: { type: "navigateInternal", params: { force: true, path: "/continue" } },
          target: "SecondFactor"
        },
        {
          guard: "needsNewPassword",
          actions: { type: "navigateInternal", params: { force: true, path: "/reset-password" } },
          target: "ResetPassword"
        },
        {
          actions: { type: "navigateInternal", params: { force: true, path: "/" } },
          target: "Start"
        }
      ]
    },
    Start: {
      tags: "route:start",
      exit: "clearFormErrors",
      invoke: {
        id: "start",
        src: "startMachine",
        input: ({ context, self }) => {
          var _a3;
          return {
            basePath: (_a3 = context.router) == null ? void 0 : _a3.basePath,
            formRef: context.formRef,
            parent: self
          };
        },
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "Start",
          reenter: true
        },
        "AUTHENTICATE.PASSKEY": {
          actions: (0, import_xstate7.sendTo)("start", ({ event }) => event)
        },
        "AUTHENTICATE.PASSKEY.AUTOFILL": {
          actions: (0, import_xstate7.sendTo)("start", ({ event }) => event)
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsFirstFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "FirstFactor"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ]
      }
    },
    FirstFactor: {
      tags: "route:first-factor",
      invoke: {
        id: "firstFactor",
        src: "firstFactorMachine",
        input: ({ context, self }) => ({
          formRef: context.formRef,
          parent: self
        }),
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "FirstFactor",
          reenter: true
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ],
        "STRATEGY.UPDATE": {
          description: "Send event to verification machine to update the current strategy.",
          actions: (0, import_xstate7.sendTo)("firstFactor", ({ event }) => event),
          target: ".Idle"
        }
      },
      initial: "Idle",
      states: {
        Idle: {
          on: {
            "NAVIGATE.FORGOT_PASSWORD": {
              description: "Navigate to forgot password screen.",
              actions: (0, import_xstate7.sendTo)("firstFactor", ({ event }) => event),
              target: "ForgotPassword"
            },
            "NAVIGATE.CHOOSE_STRATEGY": {
              description: "Navigate to choose strategy screen.",
              actions: (0, import_xstate7.sendTo)("firstFactor", ({ event }) => event),
              target: "ChoosingStrategy"
            }
          }
        },
        ChoosingStrategy: {
          tags: ["route:choose-strategy"],
          on: {
            "NAVIGATE.PREVIOUS": {
              description: "Go to Idle, and also tell firstFactor to go to Pending",
              target: "Idle",
              actions: (0, import_xstate7.sendTo)("firstFactor", { type: "NAVIGATE.PREVIOUS" })
            }
          }
        },
        ForgotPassword: {
          tags: ["route:forgot-password"],
          on: {
            "NAVIGATE.PREVIOUS": "Idle"
          }
        }
      }
    },
    SecondFactor: {
      tags: "route:second-factor",
      invoke: {
        id: "secondFactor",
        src: "secondFactorMachine",
        input: ({ context, self }) => ({
          formRef: context.formRef,
          parent: self
        }),
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "SecondFactor",
          reenter: true
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ]
      }
    },
    ResetPassword: {
      tags: "route:reset-password",
      invoke: {
        id: "resetPassword",
        src: "resetPasswordMachine",
        input: ({ context, self }) => ({
          formRef: context.formRef,
          parent: self
        }),
        onDone: {
          actions: "raiseNext"
        }
      },
      on: {
        "RESET.STEP": {
          target: "ResetPassword",
          reenter: true
        },
        NEXT: [
          {
            guard: "isComplete",
            actions: "setActive"
          },
          {
            guard: "statusNeedsFirstFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "FirstFactor"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          }
        ]
      }
    },
    Callback: {
      tags: "route:callback",
      entry: (0, import_xstate7.sendTo)(ThirdPartyMachineId, { type: "CALLBACK" }),
      on: {
        NEXT: [
          {
            guard: "hasOAuthError",
            actions: ["setFormOAuthErrors", { type: "navigateInternal", params: { force: true, path: "/" } }],
            target: "Start"
          },
          {
            guard: (0, import_xstate7.or)(["isLoggedIn", "isComplete", "hasAuthenticatedViaClerkJS"]),
            actions: "setActive"
          },
          {
            guard: "statusNeedsIdentifier",
            actions: "transfer"
          },
          {
            guard: "statusNeedsFirstFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "FirstFactor"
          },
          {
            guard: "statusNeedsSecondFactor",
            actions: { type: "navigateInternal", params: { path: "/continue" } },
            target: "SecondFactor"
          },
          {
            guard: "statusNeedsNewPassword",
            actions: { type: "navigateInternal", params: { path: "/reset-password" } },
            target: "ResetPassword"
          }
        ]
      }
    },
    Error: {
      tags: "route:error",
      on: {
        NEXT: {
          target: "Start",
          actions: "clearFormErrors"
        }
      }
    },
    Hist: {
      type: "history",
      exit: "clearFormErrors"
    }
  }
});

// src/internals/machines/utils/formatters.ts
var import_underscore2 = require("@clerk/shared/underscore");
function formatName(...args) {
  switch (args.length) {
    case 0:
      return void 0;
    case 1:
      return (0, import_underscore2.titleize)(args[0]);
    default:
      return args.filter(Boolean).map(import_underscore2.titleize).join(" ");
  }
}
function formatSalutation({
  firstName,
  lastName,
  identifier
}) {
  return firstName && formatName(firstName) || lastName && formatName(lastName) || identifier || "";
}

// src/internals/machines/sign-in/router.selectors.ts
function SignInSafeIdentifierSelector(s) {
  var _a3;
  return ((_a3 = s.context.clerk) == null ? void 0 : _a3.client.signIn.identifier) || "";
}
function SignInSalutationSelector(s) {
  var _a3, _b3, _c;
  const signIn = (_a3 = s.context.clerk) == null ? void 0 : _a3.client.signIn;
  return formatSalutation({
    firstName: (_b3 = signIn == null ? void 0 : signIn.userData) == null ? void 0 : _b3.firstName,
    identifier: signIn == null ? void 0 : signIn.identifier,
    lastName: (_c = signIn == null ? void 0 : signIn.userData) == null ? void 0 : _c.lastName
  });
}

// src/internals/machines/sign-in/router.types.ts
var SignInRouterSystemId = {
  start: "start",
  firstFactor: "firstFactor",
  secondFactor: "secondFactor",
  resetPassword: "resetPassword"
};

// src/react/router/next.ts
var import_navigation = require("next/navigation");
var useNextRouter = () => {
  const router = (0, import_navigation.useRouter)();
  const pathname = (0, import_navigation.usePathname)();
  const searchParams = typeof window === "undefined" ? new URLSearchParams() : (0, import_navigation.useSearchParams)();
  const canUseWindowHistoryAPIs = typeof window !== "undefined" && window.next && window.next.version >= NEXT_WINDOW_HISTORY_SUPPORT_VERSION;
  return {
    mode: "path",
    name: "NextRouter",
    push: (path) => router.push(path),
    replace: (path) => canUseWindowHistoryAPIs ? window.history.replaceState(null, "", path) : router.replace(path),
    shallowPush(path) {
      canUseWindowHistoryAPIs ? window.history.pushState(null, "", path) : router.push(path, {});
    },
    pathname: () => pathname,
    searchParams: () => searchParams
  };
};

// src/react/router/react.tsx
var import_react2 = require("react");

// src/react/router/router.ts
var import_url2 = require("@clerk/shared/url");
var PRESERVED_QUERYSTRING_PARAMS = ["after_sign_in_url", "after_sign_up_url", "redirect_url"];
function normalizePath(path) {
  return (0, import_url2.withoutTrailingSlash)((0, import_url2.withLeadingSlash)(path));
}
function createClerkRouter(router, basePath = "/") {
  const normalizedBasePath = normalizePath(basePath);
  function makeDestinationUrlWithPreservedQueryParameters(path) {
    const destinationUrl = new URL(path, window.location.origin);
    const currentSearchParams = router.searchParams();
    PRESERVED_QUERYSTRING_PARAMS.forEach((key) => {
      const maybeValue = currentSearchParams.get(key);
      if (maybeValue) {
        destinationUrl.searchParams.set(key, maybeValue);
      }
    });
    return `${destinationUrl.pathname}${destinationUrl.search}`;
  }
  function match(path, index) {
    const pathToMatch = path != null ? path : index && "/";
    if (!pathToMatch) {
      throw new Error("[clerk] router.match() requires either a path to match, or the index flag must be set to true.");
    }
    const normalizedPath = normalizePath(pathToMatch);
    return normalizePath(`${normalizedBasePath}${normalizedPath}`) === normalizePath(router.pathname());
  }
  function child(childBasePath) {
    return createClerkRouter(router, `${normalizedBasePath}${normalizePath(childBasePath)}`);
  }
  function push(path) {
    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);
    return router.push(destinationUrl);
  }
  function replace(path) {
    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);
    return router.replace(destinationUrl);
  }
  function shallowPush(path) {
    const destinationUrl = makeDestinationUrlWithPreservedQueryParameters(path);
    return router.shallowPush(destinationUrl);
  }
  return {
    child,
    match,
    mode: router.mode,
    name: router.name,
    push,
    replace,
    shallowPush,
    pathname: router.pathname,
    searchParams: router.searchParams,
    basePath: normalizedBasePath
  };
}

// src/react/router/react.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var ClerkRouterContext = (0, import_react2.createContext)(null);
function useClerkRouter() {
  const ctx = (0, import_react2.useContext)(ClerkRouterContext);
  if (!ctx) {
    throw new Error("clerk: Unable to locate ClerkRouter, make sure this is rendered within `<Router>`.");
  }
  return ctx;
}
function Router({
  basePath,
  children,
  router
}) {
  const clerkRouter = createClerkRouter(router, basePath);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ClerkRouterContext.Provider, { value: clerkRouter, children });
}

// src/react/router/virtual.ts
var import_react3 = require("react");
var DUMMY_ORIGIN = "https://clerk.dummy";
var _url, _listeners;
var VirtualRouter = class {
  constructor(path) {
    this.name = "VirtualRouter";
    this.mode = "virtual";
    __privateAdd(this, _url);
    __privateAdd(this, _listeners, /* @__PURE__ */ new Set());
    const origin = typeof window === "undefined" ? DUMMY_ORIGIN : window.location.origin;
    __privateSet(this, _url, new URL(path != null ? path : "/", origin));
  }
  push(path) {
    const newUrl = new URL(__privateGet(this, _url).toString());
    newUrl.pathname = path;
    __privateSet(this, _url, newUrl);
    this.emit();
  }
  replace(path) {
    this.push(path);
  }
  shallowPush(path) {
    this.push(path);
  }
  pathname() {
    return __privateGet(this, _url).pathname;
  }
  searchParams() {
    return __privateGet(this, _url).searchParams;
  }
  subscribe(listener) {
    __privateGet(this, _listeners).add(listener);
    return () => __privateGet(this, _listeners).delete(listener);
  }
  emit() {
    __privateGet(this, _listeners).forEach((listener) => listener(__privateGet(this, _url)));
  }
  getSnapshot() {
    return __privateGet(this, _url);
  }
};
_url = new WeakMap();
_listeners = new WeakMap();
var virtualRouter = new VirtualRouter("/");
var useVirtualRouter = () => {
  const url = (0, import_react3.useSyncExternalStore)(
    virtualRouter.subscribe.bind(virtualRouter),
    virtualRouter.getSnapshot.bind(virtualRouter)
  );
  return {
    mode: virtualRouter.mode,
    name: virtualRouter.name,
    pathname: () => url.pathname,
    push: virtualRouter.push.bind(virtualRouter),
    replace: virtualRouter.replace.bind(virtualRouter),
    searchParams: () => url.searchParams,
    shallowPush: virtualRouter.shallowPush.bind(virtualRouter)
  };
};

// src/react/utils/create-context-from-actor-ref.ts
var import_react5 = require("@xstate/react");
var React = __toESM(require("react"));
function createContextFromActorRef(displayName) {
  const ReactContext = React.createContext(null);
  const OriginalProvider = ReactContext.Provider;
  function Provider({ children, actorRef }) {
    return React.createElement(
      OriginalProvider,
      {
        value: actorRef
      },
      children
    );
  }
  Provider.displayName = displayName;
  function useContext6(allowMissingActor = false) {
    const actorRef = React.useContext(ReactContext);
    if (!allowMissingActor && !actorRef) {
      throw new Error(
        `You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`
      );
    }
    return actorRef;
  }
  function useSelector5(selector, compare) {
    const actor2 = useContext6();
    return (0, import_react5.useSelector)(actor2, selector, compare);
  }
  return {
    Provider,
    useActorRef: useContext6,
    useSelector: useSelector5
  };
}

// src/react/sign-in/context/router.context.ts
var SignInRouterCtx = createContextFromActorRef("SignInRouterCtx");
function useSignInStep(name) {
  return SignInRouterCtx.useSelector((state) => state.children[name]);
}
var useSignInStartStep = () => useSignInStep("start");
var useSignInFirstFactorStep = () => useSignInStep("firstFactor");
var useSignInSecondFactorStep = () => useSignInStep("secondFactor");
var useSignInResetPasswordStep = () => useSignInStep("resetPassword");
var useSignInPasskeyAutofill = () => SignInRouterCtx.useSelector((state) => state.context.webAuthnAutofillSupport);

// src/react/sign-in/context/strategies.context.ts
var import_react6 = require("react");
var StrategiesContext = (0, import_react6.createContext)({
  current: void 0,
  isActive: (_name) => false,
  preferred: void 0
});
function useStrategy(name) {
  const ctx = (0, import_react6.useContext)(StrategiesContext);
  if (!ctx) {
    throw new ClerkElementsRuntimeError(
      'useStrategy must be used within a <SignIn.Step name="verifications"> component. Did you mean to `import { Step } from "@clerk/elements/sign-up"` instead?'
    );
  }
  const { current, preferred, isActive } = ctx;
  return {
    current,
    preferred,
    get active() {
      return isActive(name);
    }
  };
}

// src/react/common/form/index.tsx
var import_clerk_react2 = require("@clerk/clerk-react");
var import_logger = require("@clerk/shared/logger");
var import_telemetry = require("@clerk/shared/telemetry");

// ../../node_modules/@radix-ui/primitive/dist/index.mjs
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// src/react/common/form/index.tsx
var import_react_form2 = require("@radix-ui/react-form");
var import_react_slot = require("@radix-ui/react-slot");
var React5 = __toESM(require("react"));

// src/react/hooks/use-password.hook.ts
var import_clerk_react = require("@clerk/clerk-react");
var import_shared5 = require("@clerk/shared");
var React2 = __toESM(require("react"));

// src/react/utils/generate-password-error-text.ts
var errorMessages = {
  max_length: ["less than %length% characters", "length"],
  min_length: ["%length% or more characters", "length"],
  require_numbers: "a number",
  require_lowercase: "a lowercase letter",
  require_uppercase: "an uppercase letter",
  require_special_char: "a special character"
};
var createListFormat = (message) => {
  let messageWithPrefix;
  if ("ListFormat" in Intl) {
    const formatter = new Intl.ListFormat("en", { style: "long", type: "conjunction" });
    messageWithPrefix = formatter.format(message);
  } else {
    messageWithPrefix = message.join(", ");
  }
  return messageWithPrefix;
};
var generatePasswordErrorText = ({ config, failedValidations }) => {
  const keys = [];
  if (!failedValidations || Object.keys(failedValidations).length === 0) {
    return {
      keys,
      message: ""
    };
  }
  const hasMinLengthError = (failedValidations == null ? void 0 : failedValidations.min_length) || false;
  const messages = Object.entries(failedValidations).filter((k) => hasMinLengthError ? k[0] === "min_length" : true).filter(([, v]) => !!v).map(([k]) => {
    const entry = k;
    keys.push(entry);
    const errorKey = errorMessages[entry];
    if (Array.isArray(errorKey)) {
      const [msg, replaceValue] = errorKey;
      return msg.replace(`%${replaceValue}%`, config[k]);
    }
    return errorKey;
  });
  const messageWithPrefix = createListFormat(messages);
  return {
    keys,
    message: `Your password must contain ${messageWithPrefix}.`
  };
};

// src/react/hooks/use-password.hook.ts
var usePassword = (callbacks) => {
  var _a3;
  const clerk = (0, import_clerk_react.useClerk)();
  const passwordSettings = (_a3 = clerk.__unstable__environment) == null ? void 0 : _a3.userSettings.passwordSettings;
  const { disable_hibp, min_zxcvbn_strength, show_zxcvbn, ...config } = passwordSettings || {};
  const {
    onValidationError = import_shared5.noop,
    onValidationSuccess = import_shared5.noop,
    onValidationWarning = import_shared5.noop,
    onValidationInfo = import_shared5.noop,
    onValidationComplexity
  } = callbacks || {};
  const onValidate = React2.useCallback(
    (res) => {
      var _a4, _b3, _c;
      if (res.complexity) {
        if (Object.values(res == null ? void 0 : res.complexity).length > 0) {
          const { message, keys } = generatePasswordErrorText({
            config,
            failedValidations: res.complexity
          });
          if ((_a4 = res.complexity) == null ? void 0 : _a4.min_length) {
            return onValidationInfo(message, keys);
          }
          return onValidationError(message, keys);
        }
      }
      if (((_b3 = res == null ? void 0 : res.strength) == null ? void 0 : _b3.state) === "fail") {
        const keys = res.strength.keys;
        const error = keys.map((key) => get(zxcvbnKeys, key)).join(" ");
        return onValidationError(error, keys);
      }
      if (((_c = res == null ? void 0 : res.strength) == null ? void 0 : _c.state) === "pass") {
        const keys = res.strength.keys;
        const error = keys.map((key) => get(zxcvbnKeys, key)).join(" ");
        return onValidationWarning(error, keys);
      }
      return onValidationSuccess();
    },
    [callbacks]
  );
  const validatePassword = React2.useMemo(() => {
    return (password) => {
      return clerk.client.signUp.validatePassword(password, {
        onValidation: onValidate,
        onValidationComplexity
      });
    };
  }, [onValidate]);
  return {
    validatePassword
  };
};
var get = (t, path) => path.split(".").reduce((r, k) => r == null ? void 0 : r[k], t);
var zxcvbnKeys = {
  unstable__errors: {
    zxcvbn: {
      couldBeStronger: "Your password works, but could be stronger. Try adding more characters.",
      goodPassword: "Your password meets all the necessary requirements.",
      notEnough: "Your password is not strong enough.",
      suggestions: {
        allUppercase: "Capitalize some, but not all letters.",
        anotherWord: "Add more words that are less common.",
        associatedYears: "Avoid years that are associated with you.",
        capitalization: "Capitalize more than the first letter.",
        dates: "Avoid dates and years that are associated with you.",
        l33t: "Avoid predictable letter substitutions like '@' for 'a'.",
        longerKeyboardPattern: "Use longer keyboard patterns and change typing direction multiple times.",
        noNeed: "You can create strong passwords without using symbols, numbers, or uppercase letters.",
        pwned: "If you use this password elsewhere, you should change it.",
        recentYears: "Avoid recent years.",
        repeated: "Avoid repeated words and characters.",
        reverseWords: "Avoid reversed spellings of common words.",
        sequences: "Avoid common character sequences.",
        useWords: "Use multiple words, but avoid common phrases."
      },
      warnings: {
        common: "This is a commonly used password.",
        commonNames: "Common names and surnames are easy to guess.",
        dates: "Dates are easy to guess.",
        extendedRepeat: 'Repeated character patterns like "abcabcabc" are easy to guess.',
        keyPattern: "Short keyboard patterns are easy to guess.",
        namesByThemselves: "Single names or surnames are easy to guess.",
        pwned: "Your password was exposed by a data breach on the Internet.",
        recentYears: "Recent years are easy to guess.",
        sequences: 'Common character sequences like "abc" are easy to guess.',
        similarToCommon: "This is similar to a commonly used password.",
        simpleRepeat: 'Repeated characters like "aaa" are easy to guess.',
        straightRow: "Straight rows of keys on your keyboard are easy to guess.",
        topHundred: "This is a frequently used password.",
        topTen: "This is a heavily used password.",
        userInputs: "There should not be any personal or page related data.",
        wordByItself: "Single words are easy to guess."
      }
    }
  }
};

// src/react/utils/is-react-fragment.ts
var React3 = __toESM(require("react"));
function isReactFragment(node) {
  return React3.isValidElement(node) && node.type === React3.Fragment;
}

// src/react/common/form/otp.tsx
var import_react_form = require("@radix-ui/react-form");
var React4 = __toESM(require("react"));
var import_jsx_runtime2 = require("react/jsx-runtime");
var ZERO = [0, 0];
var OUTSIDE = [-1, -1];
var OTP_LENGTH_DEFAULT = 6;
var PASSWORD_MANAGER_OFFSET_DEFAULT = 40;
var OTPInput = React4.forwardRef(function OTPInput2(props, ref) {
  const { render, length, autoSubmit, ...rest } = props;
  const hasRenderProp = typeof render !== "undefined";
  if (hasRenderProp) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      OTPInputSegmented,
      {
        ...rest,
        ref,
        render,
        length,
        autoSubmit
      }
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
    OTPInputStandard,
    {
      ...rest,
      ref,
      length,
      autoSubmit
    }
  );
});
var OTPInputStandard = React4.forwardRef(
  function OTPInput3(props, ref) {
    const { length = OTP_LENGTH_DEFAULT, autoSubmit = false, ...rest } = props;
    const innerRef = React4.useRef(null);
    React4.useImperativeHandle(ref, () => innerRef.current, []);
    React4.useEffect(() => {
      var _a3, _b3;
      if (String(props.value).length === length && autoSubmit) {
        (_b3 = (_a3 = innerRef.current) == null ? void 0 : _a3.form) == null ? void 0 : _b3.requestSubmit();
      }
    }, [props.value, length, autoSubmit]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      import_react_form.Control,
      {
        ref: innerRef,
        ...rest,
        "data-otp-input-standard": true
      }
    );
  }
);
var OTPInputSegmented = React4.forwardRef(
  function OTPInput4(props, ref) {
    const {
      className: userProvidedClassName,
      render,
      length = OTP_LENGTH_DEFAULT,
      autoSubmit = false,
      passwordManagerOffset = PASSWORD_MANAGER_OFFSET_DEFAULT,
      ...rest
    } = props;
    const innerRef = React4.useRef(null);
    const [selectionRange, setSelectionRange] = React4.useState(props.autoFocus ? ZERO : OUTSIDE);
    const [isHovering, setIsHovering] = React4.useState(false);
    const isFocused = () => document.activeElement === innerRef.current;
    React4.useImperativeHandle(ref, () => innerRef.current, []);
    React4.useLayoutEffect(() => {
      if (document.activeElement !== innerRef.current) {
        return;
      }
      setSelectionRange((cur) => selectionRangeUpdater(cur, innerRef));
    }, [props.value]);
    React4.useEffect(() => {
      function onSelectionChange() {
        if (!isFocused()) {
          return;
        }
        setSelectionRange((cur) => selectionRangeUpdater(cur, innerRef));
      }
      document.addEventListener("selectionchange", onSelectionChange, { capture: true });
      return () => document.removeEventListener("selectionchange", onSelectionChange);
    }, []);
    React4.useEffect(() => {
      var _a3, _b3;
      if (String(props.value).length === length && autoSubmit) {
        (_b3 = (_a3 = innerRef.current) == null ? void 0 : _a3.form) == null ? void 0 : _b3.requestSubmit();
      }
    }, [props.value, length, autoSubmit]);
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      "div",
      {
        "data-otp-input-wrapper": true,
        style: wrapperStyle,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("style", { children: `
      input[data-otp-input-segmented]::selection {
        color: transparent;
        background-color: transparent;
      }
      ` }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_react_form.Control,
            {
              "data-otp-input-segmented": true,
              ref: innerRef,
              ...rest,
              onFocus: (event) => {
                var _a3;
                if (innerRef.current) {
                  const start = Math.min(innerRef.current.value.length, length - 1);
                  const end = innerRef.current.value.length;
                  innerRef.current.setSelectionRange(start, end);
                  setSelectionRange([start, end]);
                }
                (_a3 = rest == null ? void 0 : rest.onFocus) == null ? void 0 : _a3.call(rest, event);
              },
              onBlur: (event) => {
                var _a3;
                setSelectionRange([-1, -1]);
                (_a3 = rest == null ? void 0 : rest.onBlur) == null ? void 0 : _a3.call(rest, event);
              },
              onMouseOver: (event) => {
                var _a3;
                if (!isFocused()) {
                  setIsHovering(true);
                }
                (_a3 = props.onMouseOver) == null ? void 0 : _a3.call(props, event);
              },
              onMouseLeave: (event) => {
                var _a3;
                setIsHovering(false);
                (_a3 = props.onMouseLeave) == null ? void 0 : _a3.call(props, event);
              },
              style: {
                ...inputStyle,
                clipPath: `inset(0 calc(1ch + ${passwordManagerOffset}px) 0 0)`,
                width: `calc(100% + 1ch + ${passwordManagerOffset}px)`
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            "div",
            {
              className: userProvidedClassName,
              "aria-hidden": true,
              style: segmentWrapperStyle,
              children: Array.from({ length }).map((_, i) => {
                var _a3, _b3;
                const isHovered = isHovering && !isFocused();
                const isCursor = selectionRange[0] === selectionRange[1] && selectionRange[0] === i;
                const isSelected = ((_a3 = selectionRange[0]) != null ? _a3 : -1) <= i && ((_b3 = selectionRange[1]) != null ? _b3 : -1) > i;
                return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(React4.Fragment, { children: render({
                  value: String(props.value)[i] || "",
                  status: isHovered ? "hovered" : isCursor ? "cursor" : isSelected ? "selected" : "none",
                  index: i
                }) }, `otp-segment-${i}`);
              })
            }
          )
        ]
      }
    );
  }
);
function selectionRangeUpdater(cur, inputRef) {
  var _a3, _b3, _c, _d, _e, _f, _g, _h, _i;
  let updated = [
    (_b3 = (_a3 = inputRef.current) == null ? void 0 : _a3.selectionStart) != null ? _b3 : 0,
    (_d = (_c = inputRef.current) == null ? void 0 : _c.selectionEnd) != null ? _d : 0,
    (_f = (_e = inputRef.current) == null ? void 0 : _e.selectionDirection) != null ? _f : null
  ];
  if (cur[0] === updated[0] && cur[1] === updated[1]) {
    return cur;
  }
  if (updated[0] === 0 && updated[1] === 1) {
    updated[2] = "forward";
  }
  if (updated[0] === updated[1]) {
    if (updated[0] > 0 && cur[0] === updated[0] && cur[1] === updated[0] + 1) {
      updated = [updated[0] - 1, updated[1], "backward"];
    } else if (typeof ((_g = inputRef.current) == null ? void 0 : _g.value[updated[0]]) !== "undefined") {
      updated = [updated[0], updated[1] + 1, "backward"];
    } else if (updated[0] >= OTP_LENGTH_DEFAULT) {
      updated = [updated[0] - 1, updated[1], "backward"];
    }
  }
  (_i = inputRef.current) == null ? void 0 : _i.setSelectionRange(updated[0], updated[1], (_h = updated[2]) != null ? _h : void 0);
  return [updated[0], updated[1]];
}
var wrapperStyle = {
  position: "relative",
  userSelect: "none"
};
var inputStyle = {
  display: "block",
  background: "transparent",
  opacity: 1,
  outline: "transparent solid 0px",
  appearance: "none",
  color: "transparent",
  position: "absolute",
  inset: 0,
  caretColor: "transparent",
  border: "0 px solid transparent",
  // width is handled inline
  height: "100%",
  letterSpacing: "-1rem"
};
var segmentWrapperStyle = {
  zIndex: 1,
  pointerEvents: "none"
};

// src/react/common/form/types.ts
var FIELD_STATES = {
  success: "success",
  error: "error",
  idle: "idle",
  warning: "warning",
  info: "info"
};
var FIELD_VALIDITY = {
  valid: "valid",
  invalid: "invalid"
};

// src/react/common/form/index.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var FieldContext = React5.createContext(null);
var useFieldContext = () => React5.useContext(FieldContext);
var useGlobalErrors = () => {
  const errors = useFormSelector(globalErrorsSelector);
  return {
    errors
  };
};
var useFieldFeedback = ({ name }) => {
  const feedback = useFormSelector(fieldFeedbackSelector(name));
  return {
    feedback
  };
};
var determineInputTypeFromName = (name) => {
  if (name === "password" || name === "confirmPassword" || name === "currentPassword" || name === "newPassword") {
    return "password";
  }
  if (name === "emailAddress") {
    return "email";
  }
  if (name === "phoneNumber") {
    return "tel";
  }
  if (name === "code") {
    return "otp";
  }
  return "text";
};
var useFieldState = ({ name }) => {
  const { feedback } = useFieldFeedback({ name });
  const hasValue = useFormSelector(fieldHasValueSelector(name));
  let state = FIELD_STATES.idle;
  if (!hasValue) {
    state = FIELD_STATES.idle;
  }
  switch (feedback == null ? void 0 : feedback.type) {
    case "error":
      state = FIELD_STATES.error;
      break;
    case "warning":
      state = FIELD_STATES.warning;
      break;
    case "info":
      state = FIELD_STATES.info;
      break;
    case "success":
      state = FIELD_STATES.success;
      break;
    default:
      break;
  }
  return {
    state
  };
};
var useForm = ({ flowActor }) => {
  const { errors } = useGlobalErrors();
  const validity = errors.length > 0 ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;
  const onSubmit = React5.useCallback(
    (event) => {
      event.preventDefault();
      if (flowActor) {
        flowActor.send({ type: "SUBMIT" });
      }
    },
    [flowActor]
  );
  return {
    props: {
      [`data-${validity}`]: true,
      onSubmit
    }
  };
};
var useField = ({ name }) => {
  const hasValue = useFormSelector(fieldHasValueSelector(name));
  const { feedback } = useFieldFeedback({ name });
  const shouldBeHidden = false;
  const hasError = feedback ? feedback.type === "error" : false;
  const validity = hasError ? FIELD_VALIDITY.invalid : FIELD_VALIDITY.valid;
  return {
    hasValue,
    props: {
      [`data-${validity}`]: true,
      "data-hidden": shouldBeHidden ? true : void 0,
      serverInvalid: hasError
    }
  };
};
var useInput = ({
  name: inputName,
  value: initialValue,
  type: inputType,
  onChange: onChangeProp,
  onBlur: onBlurProp,
  onFocus: onFocusProp,
  ...passthroughProps
}) => {
  const fieldContext = useFieldContext();
  const name = inputName || (fieldContext == null ? void 0 : fieldContext.name);
  const { state: fieldState } = useFieldState({ name });
  if (!name) {
    throw new Error("Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.");
  }
  const ref = useFormStore();
  const [hasPassedValiation, setHasPassedValidation] = React5.useState(false);
  const { validatePassword } = usePassword({
    onValidationComplexity: (hasPassed) => setHasPassedValidation(hasPassed),
    onValidationSuccess: () => {
      ref.send({
        type: "FIELD.FEEDBACK.SET",
        field: { name, feedback: { type: "success", message: "Your password meets all the necessary requirements." } }
      });
    },
    onValidationError: (error, keys) => {
      if (error) {
        ref.send({
          type: "FIELD.FEEDBACK.SET",
          field: {
            name,
            feedback: {
              type: "error",
              message: new ClerkElementsFieldError("password-validation-error", error),
              codes: keys
            }
          }
        });
      }
    },
    onValidationWarning: (warning, keys) => ref.send({
      type: "FIELD.FEEDBACK.SET",
      field: { name, feedback: { type: "warning", message: warning, codes: keys } }
    }),
    onValidationInfo: (info, keys) => {
      ref.send({
        type: "FIELD.FEEDBACK.SET",
        field: { name, feedback: { type: "info", message: info, codes: keys } }
      });
    }
  });
  const value = useFormSelector(fieldValueSelector(name));
  const hasValue = Boolean(value);
  const type = inputType != null ? inputType : determineInputTypeFromName(name);
  let shouldValidatePassword = false;
  if (type === "password" || type === "text") {
    shouldValidatePassword = Boolean(passthroughProps.validatePassword);
  }
  React5.useEffect(() => {
    if (!name || ref.getSnapshot().context.fields.get(name)) {
      return;
    }
    ref.send({ type: "FIELD.ADD", field: { name, value: initialValue } });
    return () => ref.send({ type: "FIELD.REMOVE", field: { name } });
  }, [ref]);
  const onChange = React5.useCallback(
    (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (!name || initialValue) {
        return;
      }
      ref.send({ type: "FIELD.UPDATE", field: { name, value: event.target.value } });
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [ref, name, onChangeProp, initialValue, shouldValidatePassword, validatePassword]
  );
  const onBlur = React5.useCallback(
    (event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [onBlurProp, shouldValidatePassword, validatePassword]
  );
  const onFocus = React5.useCallback(
    (event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (shouldValidatePassword) {
        validatePassword(event.target.value);
      }
    },
    [onFocusProp, shouldValidatePassword, validatePassword]
  );
  React5.useEffect(() => {
    if (!initialValue || !name) {
      return;
    }
    ref.send({ type: "FIELD.UPDATE", field: { name, value: initialValue } });
  }, [name, ref, initialValue]);
  if (!name) {
    throw new Error("Clerk: <Input /> must be wrapped in a <Field> component or have a name prop.");
  }
  const shouldBeHidden = false;
  const Element = type === "otp" ? OTPInput : import_react_form2.Control;
  let props = {};
  if (type === "otp") {
    const p = passthroughProps;
    const length = p.length || OTP_LENGTH_DEFAULT;
    props = {
      "data-otp-input": true,
      autoComplete: "one-time-code",
      inputMode: "numeric",
      pattern: `[0-9]{${length}}`,
      minLength: length,
      maxLength: length,
      onChange: (event) => {
        event.currentTarget.value = event.currentTarget.value.replace(/\D+/g, "");
        onChange(event);
      },
      type: "text",
      spellCheck: false
    };
  }
  if (type === "password" && shouldValidatePassword) {
    props = {
      "data-has-passed-validation": hasPassedValiation ? true : void 0
    };
  }
  const { validatePassword: _1, ...rest } = passthroughProps;
  return {
    Element,
    props: {
      type,
      value: value != null ? value : "",
      onChange,
      onBlur,
      onFocus,
      "data-hidden": shouldBeHidden ? true : void 0,
      "data-has-value": hasValue ? true : void 0,
      "data-state": fieldState,
      ...props,
      ...rest
    }
  };
};
var FORM_NAME = "ClerkElementsForm";
var Form = React5.forwardRef(({ flowActor, onSubmit, ...rest }, forwardedRef) => {
  const form = useForm({ flowActor });
  const { onSubmit: internalOnSubmit, ...internalFormProps } = form.props;
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    import_react_form2.Form,
    {
      ...internalFormProps,
      ...rest,
      onSubmit: $e42e1063c40fb3ef$export$b9ecd428b558ff10(internalOnSubmit, onSubmit),
      ref: forwardedRef
    }
  );
});
Form.displayName = FORM_NAME;
var FIELD_NAME = "ClerkElementsField";
var FIELD_INNER_NAME = "ClerkElementsFieldInner";
var FIELD_STATE_NAME = "ClerkElementsFieldState";
var Field = React5.forwardRef(({ alwaysShow, ...rest }, forwardedRef) => {
  var _a3;
  const formRef = useFormStore();
  const formCtx = formRef.getSnapshot().context;
  const isHiddenField = formCtx.progressive && Boolean((_a3 = formCtx.hidden) == null ? void 0 : _a3.has(rest.name));
  const shouldHide = alwaysShow ? false : isHiddenField;
  return shouldHide ? null : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(FieldContext.Provider, { value: { name: rest.name }, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    FieldInner,
    {
      ...rest,
      ref: forwardedRef
    }
  ) });
});
var FieldInner = React5.forwardRef((props, forwardedRef) => {
  const { children, ...rest } = props;
  const field = useField({ name: rest.name });
  const { state: fieldState } = useFieldState({ name: rest.name });
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    import_react_form2.Field,
    {
      ...field.props,
      ...rest,
      ref: forwardedRef,
      children: typeof children === "function" ? children(fieldState) : children
    }
  );
});
Field.displayName = FIELD_NAME;
FieldInner.displayName = FIELD_INNER_NAME;
function FieldState({ children }) {
  const field = useFieldContext();
  const { feedback } = useFieldFeedback({ name: field == null ? void 0 : field.name });
  const { state } = useFieldState({ name: field == null ? void 0 : field.name });
  const message = (feedback == null ? void 0 : feedback.message) instanceof ClerkElementsFieldError ? feedback.message.message : feedback == null ? void 0 : feedback.message;
  const codes = feedback == null ? void 0 : feedback.codes;
  const fieldState = { state, message, codes };
  return children(fieldState);
}
FieldState.displayName = FIELD_STATE_NAME;
var INPUT_NAME = "ClerkElementsInput";
var Input = React5.forwardRef(
  (props, forwardedRef) => {
    var _a3, _b3, _c;
    const clerk = (0, import_clerk_react2.useClerk)();
    const field = useInput(props);
    const hasPasskeyAutofillProp = Boolean((_a3 = field.props.autoComplete) == null ? void 0 : _a3.includes("webauthn"));
    const allowedTypeForPasskey = ["text", "email", "tel"].includes(field.props.type);
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    (_c = clerk.telemetry) == null ? void 0 : _c.record(
      (0, import_telemetry.eventComponentMounted)("Elements_Input", {
        type: (_b3 = props.type) != null ? _b3 : false,
        // @ts-expect-error - Depending on type the props can be different
        render: Boolean(props == null ? void 0 : props.render),
        // @ts-expect-error - Depending on type the props can be different
        asChild: Boolean(props == null ? void 0 : props.asChild),
        // @ts-expect-error - Depending on type the props can be different
        validatePassword: Boolean(props == null ? void 0 : props.validatePassword)
      })
    );
    if (signInRouterRef && hasPasskeyAutofillProp && allowedTypeForPasskey) {
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        InputWithPasskeyAutofill,
        {
          ref: forwardedRef,
          ...props
        }
      );
    }
    if (hasPasskeyAutofillProp && !allowedTypeForPasskey) {
      import_logger.logger.warnOnce(
        `<Input autoComplete="webauthn"> can only be used with <Input type="text"> or <Input type="email">`
      );
    } else if (hasPasskeyAutofillProp) {
      import_logger.logger.warnOnce(
        `<Input autoComplete="webauthn"> can only be used inside <SignIn> in order to trigger a sign-in attempt, otherwise it will be ignored.`
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      field.Element,
      {
        ref: forwardedRef,
        ...field.props
      }
    );
  }
);
Input.displayName = INPUT_NAME;
var InputWithPasskeyAutofill = React5.forwardRef(
  (props, forwardedRef) => {
    const signInRouterRef = SignInRouterCtx.useActorRef(true);
    const passkeyAutofillSupported = useSignInPasskeyAutofill();
    React5.useEffect(() => {
      if (passkeyAutofillSupported) {
        signInRouterRef == null ? void 0 : signInRouterRef.send({ type: "AUTHENTICATE.PASSKEY.AUTOFILL" });
      }
    }, [passkeyAutofillSupported, signInRouterRef]);
    const field = useInput(props);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      field.Element,
      {
        ref: forwardedRef,
        ...field.props
      }
    );
  }
);
var LABEL_NAME = "ClerkElementsLabel";
var Label = import_react_form2.Label;
Label.displayName = LABEL_NAME;
var SUBMIT_NAME = "ClerkElementsSubmit";
var Submit = import_react_form2.Submit;
Submit.displayName = SUBMIT_NAME;
var GLOBAL_ERROR_NAME = "ClerkElementsGlobalError";
var FIELD_ERROR_NAME = "ClerkElementsFieldError";
var GlobalError = React5.forwardRef(
  ({ asChild = false, children, code, ...rest }, forwardedRef) => {
    const { errors } = useGlobalErrors();
    const error = errors == null ? void 0 : errors[0];
    if (!error || code && error.code !== code) {
      return null;
    }
    const Comp = asChild ? import_react_slot.Slot : "div";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
      throw new ClerkElementsRuntimeError("<GlobalError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      Comp,
      {
        role: "alert",
        ...rest,
        ref: forwardedRef,
        children: child || error.message
      }
    );
  }
);
var FieldError = React5.forwardRef(
  ({ asChild = false, children, code, name, ...rest }, forwardedRef) => {
    const fieldContext = useFieldContext();
    const fieldName = (fieldContext == null ? void 0 : fieldContext.name) || name;
    const { feedback } = useFieldFeedback({ name: fieldName });
    if (!((feedback == null ? void 0 : feedback.type) === "error")) {
      return null;
    }
    const error = feedback.message;
    if (!error) {
      return null;
    }
    const Comp = asChild ? import_react_slot.Slot : "span";
    const child = typeof children === "function" ? children(error) : children;
    if (isReactFragment(child)) {
      throw new ClerkElementsRuntimeError("<FieldError /> cannot render a Fragment as a child.");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      import_react_form2.FormMessage,
      {
        "data-error-code": error.code,
        ...rest,
        ref: forwardedRef,
        asChild: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Comp, { children: child || error.message })
      }
    );
  }
);
GlobalError.displayName = GLOBAL_ERROR_NAME;
FieldError.displayName = FIELD_ERROR_NAME;

// src/react/utils/path-inference/next.tsx
var import_router6 = require("next/compat/router");
var import_navigation2 = require("next/navigation");
var import_react7 = __toESM(require("react"));

// src/react/utils/path-inference/utils.ts
function removeOptionalCatchAllSegment(pathname) {
  return pathname.replace(/\/\[\[\.\.\..*/, "");
}

// src/react/utils/path-inference/next.tsx
var usePathnameWithoutCatchAll = () => {
  const pathRef = import_react7.default.useRef();
  const pagesRouter = (0, import_router6.useRouter)();
  if (pagesRouter) {
    if (pathRef.current) {
      return pathRef.current;
    } else {
      pathRef.current = removeOptionalCatchAllSegment(pagesRouter.pathname);
      return pathRef.current;
    }
  }
  const pathname = (0, import_navigation2.usePathname)() || "";
  const pathParts = pathname.split("/").filter(Boolean);
  const catchAllParams = Object.values((0, import_navigation2.useParams)() || {}).filter((v) => Array.isArray(v)).flat(Infinity);
  if (pathRef.current) {
    return pathRef.current;
  } else {
    pathRef.current = `/${pathParts.slice(0, pathParts.length - catchAllParams.length).join("/")}`;
    return pathRef.current;
  }
};

// src/react/sign-in/root.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var actor = (0, import_xstate8.createActor)(SignInRouterMachine, { inspect });
actor.start();
function SignInFlowProvider({ children, exampleMode }) {
  const clerk = (0, import_clerk_react3.useClerk)();
  const router = useClerkRouter();
  const formRef = useFormStore();
  (0, import_react8.useEffect)(() => {
    if (!clerk || !router) {
      return;
    }
    clerk.addOnLoaded(() => {
      const evt = {
        type: "INIT",
        clerk,
        exampleMode,
        formRef,
        router,
        signUpPath: SIGN_UP_DEFAULT_BASE_PATH
      };
      if (actor.getSnapshot().can(evt)) {
        actor.send(evt);
      }
    });
    if (formRef && actor.getSnapshot().can({ type: "RESET.STEP" })) {
      actor.send({
        type: "FORM.ATTACH",
        formRef
      });
    }
  }, [clerk, exampleMode, formRef == null ? void 0 : formRef.id, !!router]);
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SignInRouterCtx.Provider, { actorRef: actor, children });
}
function SignInRoot({
  children,
  exampleMode = false,
  fallback = null,
  path: pathProp,
  routing = ROUTING.path
}) {
  var _a3;
  const clerk = (0, import_clerk_react3.useClerk)();
  const inferredPath = usePathnameWithoutCatchAll();
  const path = pathProp || inferredPath || SIGN_IN_DEFAULT_BASE_PATH;
  (_a3 = clerk.telemetry) == null ? void 0 : _a3.record(
    (0, import_telemetry2.eventComponentMounted)("Elements_SignInRoot", {
      exampleMode,
      fallback: Boolean(fallback),
      path,
      routing
    })
  );
  const router = (routing === ROUTING.virtual ? useVirtualRouter : useNextRouter)();
  const isRootPath = path === router.pathname();
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    Router,
    {
      basePath: path,
      router,
      children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FormStoreProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(SignInFlowProvider, { exampleMode, children: [
        isRootPath ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_clerk_react3.ClerkLoading, { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Form, { children: fallback }) }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_clerk_react3.ClerkLoaded, { children })
      ] }) })
    }
  );
}

// src/react/sign-in/step.tsx
var import_clerk_react4 = require("@clerk/clerk-react");
var import_telemetry3 = require("@clerk/shared/telemetry");

// src/react/sign-in/choose-strategy.tsx
var import_react_slot2 = require("@radix-ui/react-slot");
var import_react10 = require("@xstate/react");
var React9 = __toESM(require("react"));

// src/react/hooks/use-active-tags.hook.ts
var import_react9 = require("@xstate/react");
var ActiveTagsMode = {
  any: "any",
  all: "all"
};
function useActiveTags(actor2, tags, mode = ActiveTagsMode.any) {
  const state = (0, import_react9.useSelector)(
    actor2,
    (s) => s,
    (prev, next) => prev.tags === next.tags
  );
  if (typeof tags === "string") {
    return state.hasTag(tags);
  }
  if (!Array.isArray(tags)) {
    throw new Error("Invalid tags parameter provided to useActiveTags");
  }
  switch (mode) {
    case ActiveTagsMode.any: {
      const matching = new Set(tags.filter((tag) => state.hasTag(tag)));
      return { active: matching.size > 0, activeTags: matching };
    }
    case ActiveTagsMode.all:
      return tags.length === state.tags.size ? tags.every((tag) => state.hasTag(tag)) : false;
    default:
      return false;
  }
}

// src/react/utils/create-context-for-dom-validation.ts
var React8 = __toESM(require("react"));
function createContextForDomValidation(displayName) {
  const ReactContext = React8.createContext(false);
  const OriginalProvider = ReactContext.Provider;
  function Provider({ children }) {
    return React8.createElement(
      OriginalProvider,
      {
        value: true
      },
      children
    );
  }
  Provider.displayName = displayName;
  function useContext6(allowMissingContext = false) {
    const context = React8.useContext(ReactContext);
    if (!allowMissingContext && !context) {
      throw new Error(
        `You used a hook from "${Provider.displayName}" but it's not inside a <${Provider.displayName}.Provider> component.`
      );
    }
    return context;
  }
  return {
    Provider,
    useDomValidation: useContext6
  };
}

// src/react/sign-in/choose-strategy.tsx
var import_jsx_runtime5 = require("react/jsx-runtime");
var SignInChooseStrategyCtx = createContextForDomValidation("SignInChooseStrategyCtx");
function SignInChooseStrategy({ children, ...props }) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, ["route:first-factor", "route:choose-strategy"], ActiveTagsMode.all);
  return activeState ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(SignInChooseStrategyCtx.Provider, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { ...props, children }) }) : null;
}
function SignInForgotPassword({ children, ...props }) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, ["route:first-factor", "route:forgot-password"], ActiveTagsMode.all);
  return activeState ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(SignInChooseStrategyCtx.Provider, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { ...props, children }) }) : null;
}
var SUPPORTED_STRATEGY_NAME = "SignInSupportedStrategy";
var SignInSupportedStrategy = React9.forwardRef(
  ({ asChild, children, name, ...rest }, forwardedRef) => {
    const routerRef = SignInRouterCtx.useActorRef();
    const snapshot = routerRef.getSnapshot();
    const supportedFirstFactors = snapshot.context.clerk.client.signIn.supportedFirstFactors;
    const factor = supportedFirstFactors.find((factor2) => name === factor2.strategy);
    const currentFirstFactor = (0, import_react10.useSelector)(
      snapshot.children[SignInRouterSystemId.firstFactor],
      (state) => {
        var _a3;
        return (_a3 = state == null ? void 0 : state.context.currentFactor) == null ? void 0 : _a3.strategy;
      }
    );
    const sendUpdateStrategyEvent = React9.useCallback(
      () => routerRef.send({ type: "STRATEGY.UPDATE", factor }),
      [routerRef, factor]
    );
    if (currentFirstFactor === name) {
      return null;
    }
    const Comp = asChild ? import_react_slot2.Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    return factor ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      Comp,
      {
        ...defaultProps,
        ...rest,
        ref: forwardedRef,
        onClick: sendUpdateStrategyEvent,
        children: children || factor.strategy
      }
    ) : null;
  }
);
SignInSupportedStrategy.displayName = SUPPORTED_STRATEGY_NAME;

// src/react/sign-in/reset-password.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var SignInResetPasswordCtx = createContextFromActorRef("SignInResetPasswordCtx");
function SignInResetPassword(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "route:reset-password");
  return activeState ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(SignInResetPasswordInner, { ...props }) : null;
}
function SignInResetPasswordInner(props) {
  const ref = useSignInResetPasswordStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(SignInResetPasswordCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}

// src/react/sign-in/start.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var SignInStartCtx = createContextFromActorRef("SignInStartCtx");
function SignInStart(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "route:start");
  return activeState ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SignInStartInner, { ...props }) : null;
}
function SignInStartInner(props) {
  const ref = useSignInStartStep();
  if (!ref) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SignInStartCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
    Form,
    {
      flowActor: ref,
      ...props
    }
  ) });
}

// src/react/sign-in/verifications.tsx
var import_react11 = require("@xstate/react");
var import_react12 = require("react");

// src/internals/machines/utils/strategies.ts
var matchStrategy = (current, desired) => {
  if (!current || !desired) {
    return false;
  }
  if (current === desired) {
    return true;
  }
  return current.startsWith(`${desired}_`);
};

// src/react/sign-in/verifications.tsx
var import_jsx_runtime8 = require("react/jsx-runtime");
var SignInFirstFactorCtx = createContextFromActorRef("SignInFirstFactorCtx");
var SignInSecondFactorCtx = createContextFromActorRef("SignInSecondFactorCtx");
var strategiesSelector = (state) => {
  var _a3;
  return (_a3 = state.context.currentFactor) == null ? void 0 : _a3.strategy;
};
function SignInStrategiesProvider({
  children,
  preferred,
  actorRef,
  ...props
}) {
  const routerRef = SignInRouterCtx.useActorRef();
  const current = (0, import_react11.useSelector)(actorRef, strategiesSelector);
  const isChoosingAltStrategy = useActiveTags(routerRef, ["route:choose-strategy", "route:forgot-password"]);
  const isActive = (0, import_react12.useCallback)((name) => current ? matchStrategy(current, name) : false, [current]);
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(StrategiesContext.Provider, { value: { current, preferred, isActive }, children: isChoosingAltStrategy.active ? null : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    Form,
    {
      flowActor: actorRef,
      ...props,
      children
    }
  ) });
}
function useFactorCtx() {
  const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);
  const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);
  return firstFactorRef || secondFactorRef;
}
function SignInStrategy({ children, name }) {
  const { active } = useStrategy(name);
  const factorCtx = useFactorCtx();
  (0, import_react12.useEffect)(() => {
    if (factorCtx) {
      factorCtx.send({ type: "STRATEGY.REGISTER", factor: name });
    }
    return () => {
      if ((factorCtx == null ? void 0 : factorCtx.getSnapshot().status) === "active") {
        factorCtx.send({ type: "STRATEGY.UNREGISTER", factor: name });
      }
    };
  }, [factorCtx, name]);
  return active ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children }) : null;
}
function SignInVerifications(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const { activeTags: activeRoutes } = useActiveTags(routerRef, ["route:first-factor", "route:second-factor"]);
  if (activeRoutes.has("route:first-factor")) {
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignInFirstFactorInner, { ...props });
  }
  if (activeRoutes.has("route:second-factor")) {
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignInSecondFactorInner, { ...props });
  }
  return null;
}
function SignInFirstFactor(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "route:first-factor");
  return activeState ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignInFirstFactorInner, { ...props }) : null;
}
function SignInSecondFactor(props) {
  const routerRef = SignInRouterCtx.useActorRef();
  const activeState = useActiveTags(routerRef, "route:second-factor");
  return activeState ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignInSecondFactorInner, { ...props }) : null;
}
function SignInFirstFactorInner(props) {
  const ref = useSignInFirstFactorStep();
  if (!ref) {
    return null;
  }
  return ref ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignInFirstFactorCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    SignInStrategiesProvider,
    {
      actorRef: ref,
      ...props
    }
  ) }) : null;
}
function SignInSecondFactorInner(props) {
  const ref = useSignInSecondFactorStep();
  if (!ref) {
    return null;
  }
  return ref ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignInSecondFactorCtx.Provider, { actorRef: ref, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
    SignInStrategiesProvider,
    {
      actorRef: ref,
      ...props
    }
  ) }) : null;
}

// src/react/sign-in/step.tsx
var import_jsx_runtime9 = require("react/jsx-runtime");
var SIGN_IN_STEPS = {
  start: "start",
  verifications: "verifications",
  "choose-strategy": "choose-strategy",
  "forgot-password": "forgot-password",
  "reset-password": "reset-password"
};
function SignInStep(props) {
  var _a3;
  const clerk = (0, import_clerk_react4.useClerk)();
  (_a3 = clerk.telemetry) == null ? void 0 : _a3.record((0, import_telemetry3.eventComponentMounted)("Elements_SignInStep", { name: props.name }));
  switch (props.name) {
    case SIGN_IN_STEPS["start"]:
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SignInStart, { ...props });
    case SIGN_IN_STEPS["verifications"]:
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SignInVerifications, { ...props });
    case SIGN_IN_STEPS["choose-strategy"]:
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SignInChooseStrategy, { ...props });
    case SIGN_IN_STEPS["forgot-password"]:
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SignInForgotPassword, { ...props });
    case SIGN_IN_STEPS["reset-password"]:
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SignInResetPassword, { ...props });
    default:
      throw new ClerkElementsRuntimeError(`Invalid step name. Use: ${Object.keys(SIGN_IN_STEPS).join(",")}.`);
  }
}

// src/react/sign-in/action/action.tsx
var React12 = __toESM(require("react"));

// src/react/common/index.ts
var import_client_only = require("client-only");

// src/react/sign-in/action/navigate.tsx
var import_react_slot3 = require("@radix-ui/react-slot");
var React10 = __toESM(require("react"));
var import_jsx_runtime10 = require("react/jsx-runtime");
var SIGN_IN_NAVIGATE_NAME = "SignInNavigate";
var SignInNavigationEventMap = {
  start: `NAVIGATE.START`,
  previous: `NAVIGATE.PREVIOUS`,
  "choose-strategy": `NAVIGATE.CHOOSE_STRATEGY`,
  "forgot-password": `NAVIGATE.FORGOT_PASSWORD`
};
var SignInNavigate = React10.forwardRef(
  ({ asChild, to, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef();
    const Comp = asChild ? import_react_slot3.Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React10.useCallback(() => {
      const type = SignInNavigationEventMap[to];
      if (actorRef.getSnapshot().can({ type })) {
        actorRef.send({ type });
      } else {
        console.warn("Invalid navigation event.");
      }
    }, [actorRef, to]);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInNavigate.displayName = SIGN_IN_NAVIGATE_NAME;

// src/react/sign-in/action/resend.tsx
var import_react_slot4 = require("@radix-ui/react-slot");
var import_react13 = require("@xstate/react");
var React11 = __toESM(require("react"));
var import_jsx_runtime11 = require("react/jsx-runtime");
var SIGN_IN_RESEND_NAME = "SignInResend";
var SignInResend = React11.forwardRef(
  ({ asChild, fallback, ...rest }, forwardedRef) => {
    const firstFactorRef = SignInFirstFactorCtx.useActorRef(true);
    const secondFactorRef = SignInSecondFactorCtx.useActorRef(true);
    const actorRef = firstFactorRef || secondFactorRef;
    if (!actorRef) {
      throw new Error('The resend action must be used within <SignIn.Step name="verifications">.');
    }
    const fallbackProps = (0, import_react13.useSelector)(
      actorRef,
      (state) => ({
        resendable: state.context.resendable,
        resendableAfter: state.context.resendableAfter
      }),
      (a, b) => a.resendableAfter === b.resendableAfter && a.resendable === b.resendable
    );
    if (fallback && !fallbackProps.resendable) {
      return typeof fallback === "function" ? fallback(fallbackProps) : fallback;
    }
    const Comp = asChild ? import_react_slot4.Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      Comp,
      {
        ...defaultProps,
        ...rest,
        disabled: !fallbackProps.resendable,
        onClick: () => actorRef.send({ type: "RETRY" }),
        ref: forwardedRef
      }
    );
  }
);
SignInResend.displayName = SIGN_IN_RESEND_NAME;

// src/react/sign-in/action/action.tsx
var import_jsx_runtime12 = require("react/jsx-runtime");
var SIGN_IN_ACTION_NAME = "SignInAction";
var SignInAction = React12.forwardRef((props, forwardedRef) => {
  const { submit, navigate, resend, ...rest } = props;
  let Comp;
  if (submit) {
    Comp = Submit;
  } else if (navigate) {
    Comp = SignInNavigate;
  } else if (resend) {
    Comp = SignInResend;
  }
  return Comp ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    Comp,
    {
      to: navigate,
      ...rest,
      ref: forwardedRef
    }
  ) : null;
});
SignInAction.displayName = SIGN_IN_ACTION_NAME;

// src/react/sign-in/passkey.tsx
var import_react_slot5 = require("@radix-ui/react-slot");
var React13 = __toESM(require("react"));
var import_jsx_runtime13 = require("react/jsx-runtime");
var SIGN_IN_PASSKEY_NAME = "SignInPasskey";
var SignInPasskey = React13.forwardRef(
  ({ asChild, ...rest }, forwardedRef) => {
    const actorRef = SignInRouterCtx.useActorRef(true);
    const Comp = asChild ? import_react_slot5.Slot : "button";
    const defaultProps = asChild ? {} : { type: "button" };
    const sendEvent = React13.useCallback(() => {
      actorRef == null ? void 0 : actorRef.send({ type: "AUTHENTICATE.PASSKEY" });
    }, [actorRef]);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      Comp,
      {
        ...defaultProps,
        ...rest,
        onClick: sendEvent,
        ref: forwardedRef
      }
    );
  }
);
SignInPasskey.displayName = SIGN_IN_PASSKEY_NAME;

// src/react/sign-in/identifiers.tsx
function SignInSafeIdentifier() {
  return SignInRouterCtx.useSelector(SignInSafeIdentifierSelector);
}
function SignInSalutation() {
  return SignInRouterCtx.useSelector(SignInSalutationSelector);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Action,
  FirstFactor,
  Passkey,
  Root,
  SafeIdentifier,
  Salutation,
  SecondFactor,
  SignIn,
  Step,
  Strategy,
  SupportedStrategy
});
//# sourceMappingURL=index.js.map