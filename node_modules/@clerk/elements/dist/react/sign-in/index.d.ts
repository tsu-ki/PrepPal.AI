import * as React from 'react';
import React__default from 'react';
import { R as ROUTING } from '../../index-Bq_JGDwx.js';
export { b as FirstFactor, c as SecondFactor, S as Step, d as Strategy, a as SupportedStrategy } from '../../step-DyVPFsqC.js';
import { j as FormSubmitProps } from '../../index-CbIXjVuO.js';
import 'react/jsx-runtime';
import '@clerk/types';
import '@radix-ui/react-form';
import 'type-fest';
import 'xstate';

type SignInFlowProviderProps = {
    children: React__default.ReactNode;
    exampleMode?: boolean;
};
type SignInRootProps = SignInFlowProviderProps & {
    /**
     * Fallback markup to render while Clerk is loading
     */
    fallback?: React__default.ReactNode;
    /**
     * The base path for your sign-in route.
     * Will be automatically inferred in Next.js.
     * @example `/sign-in`
     */
    path?: string;
    /**
     * If you want to render Clerk Elements in e.g. a modal, use the `virtual` routing mode.
     */
    routing?: ROUTING;
};
/**
 * Root component for the sign-in flow. It sets up providers and state management for its children.
 * Must wrap all sign-in related components.
 *
 * @param {string} path - The root path the sign-in flow is mounted at. Will be automatically inferred in Next.js. You can set it to `/sign-in` for example.
 * @param {React.ReactNode} fallback - Fallback markup to render while Clerk is loading. Default: `null`
 * @param {string} routing - If you want to render Clerk Elements in e.g. a modal, use the `'virtual'` routing mode. Default: `'path'`
 *
 * @example
 * import * as SignIn from "@clerk/elements/sign-in"
 *
 * export default SignInPage = () => (
 *  <SignIn.Root>
 *  </SignIn.Root>
 * )
 */
declare function SignInRoot({ children, exampleMode, fallback, path: pathProp, routing, }: SignInRootProps): JSX.Element | null;

declare const SignInNavigationEventMap: {
    readonly start: "NAVIGATE.START";
    readonly previous: "NAVIGATE.PREVIOUS";
    readonly 'choose-strategy': "NAVIGATE.CHOOSE_STRATEGY";
    readonly 'forgot-password': "NAVIGATE.FORGOT_PASSWORD";
};
type SignInNavigateElementKey = keyof typeof SignInNavigationEventMap;
type SignInNavigateProps = {
    asChild?: boolean;
    to: SignInNavigateElementKey;
    children: React.ReactNode;
};

type SignInResendFallbackProps = {
    resendable: boolean;
    resendableAfter: number;
};
type SignInResendProps = {
    asChild?: boolean;
    children: React.ReactNode;
    /**
     * A fallback component to render when the resend action is not available.
     * This can be a React element or a function that receives the `resendableAfter` prop.
     */
    fallback?: React.ReactNode | ((props: SignInResendFallbackProps) => React.ReactNode);
};

type SignInActionProps = {
    asChild?: boolean;
} & FormSubmitProps & (({
    navigate: SignInNavigateProps['to'];
    resend?: never;
    submit?: never;
} & Omit<SignInNavigateProps, 'to'>) | {
    navigate?: never;
    resend?: never;
    submit: true;
} | ({
    navigate?: never;
    resend: true;
    submit?: never;
} & SignInResendProps));
/**
 * Perform various actions during the sign-in process. This component is used to navigate between steps, submit the form, or resend a verification codes.
 *
 * @param {boolean} [submit] - If `true`, the action will submit the form.
 * @param {string} [navigate] - The name of the step to navigate to.
 * @param {boolean} [resend] - If `true`, the action will resend the verification code for the currently active strategy, if applicable.
 * @param {Function} [fallback] - Only used when `resend` is `true`. If provided, the fallback markup will be rendered before the resend delay has expired.
 *
 * @example
 * <SignIn.Action navigate="start">Go Back</SignIn.Action>
 *
 * @example
 * <SignIn.Action submit>Sign In</SignIn.Action>
 *
 * @example
 * <SignIn.Action resend>Resend</SignIn.Action>
 */
declare const SignInAction: React.ForwardRefExoticComponent<SignInActionProps & React.RefAttributes<HTMLButtonElement>>;

type SignInPasskeyProps = {
    asChild?: boolean;
    children: React.ReactNode;
} & React.DetailedHTMLProps<React.HTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
/**
 * Prompt users to select a passkey from their device in order to sign in.
 * This component must be used within the <Step name="start">.
 *
 * @example
 * <SignIn.Action passkey>Use Passkey instead</SignIn.Action>
 */
declare const SignInPasskey: React.ForwardRefExoticComponent<Omit<SignInPasskeyProps, "ref"> & React.RefAttributes<HTMLButtonElement>>;

/**
 * Render an identifier that has been provided by the user during a sign-in attempt. Renders a `string` (or empty string if it can't find an identifier).
 *
 * @example
 * <SignIn.Strategy name="email_code">
 *  <h1>Check your email</h1>
 *  <p>We've sent a code to <SignIn.SafeIdentifier />.</p>
 * </SignIn.Strategy>
 */
declare function SignInSafeIdentifier(): string;
/**
 * Render a salutation for the user during a sign-in attempt. It attempts to resolve these values in this specific order: First name, Last name, Identifier. Renders a `string` (or empty string if it can't find an identifier).
 *
 * @example
 * <SignIn.Strategy name="password">
 *  <p>Welcome back <SignIn.Salutation />!</p>
 * </SignIn.Strategy>
 */
declare function SignInSalutation(): string;

export { SignInAction as Action, SignInPasskey as Passkey, SignInRoot as Root, SignInSafeIdentifier as SafeIdentifier, SignInSalutation as Salutation, SignInRoot as SignIn };
