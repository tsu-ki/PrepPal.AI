import * as react_jsx_runtime from 'react/jsx-runtime';
import { i as FormProps } from './index-CbIXjVuO.js';

type SignUpVerificationFriendlyTags = 'code' | 'email_link' | 'email_code' | 'phone_code';

type SignUpContinueProps = FormProps;

type SignUpStartProps = FormProps;

type SignUpVerificationsProps = FormProps;
type SignUpStrategyProps = {
    name: SignUpVerificationFriendlyTags;
    children: React.ReactNode;
};
/**
 * Conditionally render its children depending on the authentication strategy that needs to be verified. Does not render any markup on its own.
 *
 * @param {string} name - The name of the strategy for which its children will be rendered.
 *
 * @example
 * <SignUp.Strategy name="email_code">
 *  <Clerk.Field name="code">
 *    <Clerk.Label>Code</Clerk.Label>
 *    <Clerk.Input />
 *    <Clerk.FieldError />
 *  </Clerk.Field>
 *  <SignUp.Action submit>Verify</SignUp.Action>
 * </SignUp.Strategy>
 */
declare function SignUpStrategy({ children, name: tag }: SignUpStrategyProps): react_jsx_runtime.JSX.Element | null;

declare const SIGN_UP_STEPS: {
    readonly start: "start";
    readonly continue: "continue";
    readonly verifications: "verifications";
};
type TSignUpStep = (typeof SIGN_UP_STEPS)[keyof typeof SIGN_UP_STEPS];
type StepWithProps<N extends TSignUpStep, T> = {
    name: N;
} & T;
type SignUpStepProps = StepWithProps<'start', SignUpStartProps> | StepWithProps<'continue', SignUpContinueProps> | StepWithProps<'verifications', SignUpVerificationsProps>;
/**
 * Render different steps of the sign-up flow. Initially the `'start'` step is rendered. Optionally, you can render additional fields in the `'continue'` step. Once a sign-up attempt has been created, `'verifications'` will be displayed.
 *
 * You typically want to place fields like username, password, or social providers in the `'start'` step. The `'continue'` step can hold inputs for username, first name/last name or other metadata. The `'verifications'` step is used to verify the user's information like an email verification. Once the user has been verified, the sign-up attempt will be completed.
 *
 * @param {string} name - Step name. Use `'start'`, `'continue'`, or `'verifications'`.
 *
 * @example
 * <SignUp.Root>
 *  <SignUp.Step name='start' />
 *  <SignUp.Step name='continue' />
 *  <SignUp.Step name='verifications' />
 * </SignUp.Root>
 */
declare function SignUpStep(props: SignUpStepProps): react_jsx_runtime.JSX.Element;

export { SignUpStep as S, type TSignUpStep as T, SignUpStrategy as a };
